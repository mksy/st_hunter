//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   29/Oct/2008  03:34:20 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\Pasha\elf\_MY_PROJECT_\NRSS\main.c               /
//    Command line    =  D:\Pasha\elf\_MY_PROJECT_\NRSS\main.c -D NEWSGOLD   /
//                       -D ELKA -lCN D:\Pasha\elf\_MY_PROJECT_\NRSS\Release /
//                       _ELKA\List\ -la D:\Pasha\elf\_MY_PROJECT_\NRSS\Rele /
//                       ase_ELKA\List\ -o D:\Pasha\elf\_MY_PROJECT_\NRSS\Re /
//                       lease_ELKA\Obj\ -s9 --no_unroll --cpu_mode arm      /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "D:\Pasha\Embedded Workbench 4.0                    /
//                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I               /
//                       "D:\Pasha\Embedded Workbench 4.0                    /
//                       Evaluation2\ARM\INC\" --inline_threshold=2          /
//    List file       =  D:\Pasha\elf\_MY_PROJECT_\NRSS\Release_ELKA\List\ma /
//                       in.s79                                              /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)
        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable12 EQU 0
??DataTable13 EQU 0
??DataTable15 EQU 0
??DataTable16 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
??DataTable9 EQU 0
        MULTWEAK ??DecodeRSS??rT
        MULTWEAK ??DestroyTree??rA
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??FreeRssItems??rT
        MULTWEAK ??InitConfig??rA
        MULTWEAK ??PrintLibFree??rA
        MULTWEAK ??PrintLibInit??rA
        MULTWEAK ??SetCanvasFlag??rA
        MULTWEAK ??UpdateCSMname??rT
        MULTWEAK ??XMLDecode??rA
        MULTWEAK ??create_connect??rT
        MULTWEAK ??create_rssitems_menu??rA
        MULTWEAK ??do_start_connection??rT
        MULTWEAK ??free_recv_buf??rT
        MULTWEAK ??free_send_buf??rT
        MULTWEAK ??free_xml_buf??rT
        MULTWEAK ??get_answer??rT
        MULTWEAK ??html_decode??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??method9??rT
        MULTWEAK ??send_answer??rT
        MULTWEAK ??send_req??rT
        MULTWEAK ??strcmp_nocase??rA
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC ALLTOTALRECEIVED
        PUBLIC ALLTOTALSENDED
        PUBLIC DNR_ID
        PUBLIC DNR_TRIES
        PUBLIC DecodeRSS
        FUNCTION DecodeRSS,0201H
        LOCFRAME CSTACK, 36, STACK
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC FreeRssItems
        FUNCTION FreeRssItems,0203H
        LOCFRAME CSTACK, 12, STACK
        FUNCTION OnKey,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION OnRedraw,0603H
        LOCFRAME CSTACK, 84, STACK
        PUBLIC UpdateCSMname
        FUNCTION UpdateCSMname,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC connect_state
        PUBLIC create_connect
        FUNCTION create_connect,0603H
        LOCFRAME CSTACK, 108, STACK
        PUBLIC do_start_connection
        FUNCTION do_start_connection,0203H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION end_socket,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC free_recv_buf
        FUNCTION free_recv_buf,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC free_send_buf
        FUNCTION free_send_buf,0203H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION free_socket,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC free_xml_buf
        FUNCTION free_xml_buf,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC get_answer
        FUNCTION get_answer,0603H
        LOCFRAME CSTACK, 1044, STACK
        PUBLIC gui_methods
        PUBLIC html_decode
        FUNCTION html_decode,0203H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC is_gprs_online
        PUBLIC logmsg
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 48, STACK
        FUNCTION maincsm_onclose,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 16, STACK
        FUNCTION maincsm_onmessage,0603H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC menu_sk
        PUBLIC menu_skt
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC method9
        FUNCTION method9,0603H
        PUBLIC mytmr
        FUNCTION onClose,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION onCreate,0603H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION onFocus,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION onUnfocus,0603H
        PUBLIC receive_mode
        PUBLIC recv_buf
        PUBLIC recv_buf_len
        PUBLIC rss_first
        PUBLIC rss_last
        PUBLIC send_answer
        FUNCTION send_answer,0603H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC send_buf
        PUBLIC send_buf_len
        PUBLIC send_req
        FUNCTION send_req,0603H
        LOCFRAME CSTACK, 400, STACK
        PUBLIC sock
        PUBLIC xml_buf
        PUBLIC xml_buf_len
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
DestroyTree         SYMBOL "DestroyTree"
InitConfig          SYMBOL "InitConfig"
PrintLibFree        SYMBOL "PrintLibFree"
PrintLibInit        SYMBOL "PrintLibInit"
SetCanvasFlag       SYMBOL "SetCanvasFlag"
XMLDecode           SYMBOL "XMLDecode"
create_rssitems_menu SYMBOL "create_rssitems_menu"
kill_data           SYMBOL "kill_data"
strcmp_nocase       SYMBOL "strcmp_nocase"
DecodeRSS           SYMBOL "DecodeRSS"
??DecodeRSS??rT     SYMBOL "??rT", DecodeRSS
??DestroyTree??rA   SYMBOL "??rA", DestroyTree
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
FreeRssItems        SYMBOL "FreeRssItems"
??FreeRssItems??rT  SYMBOL "??rT", FreeRssItems
??InitConfig??rA    SYMBOL "??rA", InitConfig
??PrintLibFree??rA  SYMBOL "??rA", PrintLibFree
??PrintLibInit??rA  SYMBOL "??rA", PrintLibInit
??SetCanvasFlag??rA SYMBOL "??rA", SetCanvasFlag
UpdateCSMname       SYMBOL "UpdateCSMname"
??UpdateCSMname??rT SYMBOL "??rT", UpdateCSMname
??XMLDecode??rA     SYMBOL "??rA", XMLDecode
create_connect      SYMBOL "create_connect"
??create_connect??rT SYMBOL "??rT", create_connect
??create_rssitems_menu??rA SYMBOL "??rA", create_rssitems_menu
do_start_connection SYMBOL "do_start_connection"
??do_start_connection??rT SYMBOL "??rT", do_start_connection
free_recv_buf       SYMBOL "free_recv_buf"
??free_recv_buf??rT SYMBOL "??rT", free_recv_buf
free_send_buf       SYMBOL "free_send_buf"
??free_send_buf??rT SYMBOL "??rT", free_send_buf
free_xml_buf        SYMBOL "free_xml_buf"
??free_xml_buf??rT  SYMBOL "??rT", free_xml_buf
get_answer          SYMBOL "get_answer"
??get_answer??rT    SYMBOL "??rT", get_answer
html_decode         SYMBOL "html_decode"
??html_decode??rT   SYMBOL "??rT", html_decode
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
method9             SYMBOL "method9"
??method9??rT       SYMBOL "??rT", method9
send_answer         SYMBOL "send_answer"
??send_answer??rT   SYMBOL "??rT", send_answer
send_req            SYMBOL "send_req"
??send_req??rT      SYMBOL "??rT", send_req
??strcmp_nocase??rA SYMBOL "??rA", strcmp_nocase

        EXTERN DestroyTree
        FUNCTION DestroyTree,0202H
        EXTERN InitConfig
        FUNCTION InitConfig,0200H
        EXTERN PrintLibFree
        FUNCTION PrintLibFree,0200H
        EXTERN PrintLibInit
        FUNCTION PrintLibInit,0202H
        EXTERN RSS_URL
        EXTERN SetCanvasFlag
        FUNCTION SetCanvasFlag,0202H
        EXTERN XMLDecode
        FUNCTION XMLDecode,0202H
        EXTERN create_rssitems_menu
        FUNCTION create_rssitems_menu,0202H
        EXTERN kill_data
        FUNCTION kill_data,0602H
        EXTERN strcmp_nocase
        FUNCTION strcmp_nocase,0202H
        EXTERN successed_config_filename


        RSEG DATA_I:DATA:SORT:NOROOT(2)
menu_sk:
        DS8 24
        REQUIRE `?<Initializer for menu_sk>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
menu_skt:
        DS8 8
        REQUIRE `?<Initializer for menu_skt>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??FreeRssItems??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE FreeRssItems

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function FreeRssItems
        ARM
FreeRssItems:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R4,??DataTable14  ;; sock
        LDR      R5,[R4, #+28]
        SWI      +326
        MOV      R0,#+0
        STR      R0,[R4, #+28]
        SWI      +327
        CMP      R5,#+0
        POPEQ    {R4,R5,PC}
??FreeRssItems_0:
        LDR      R4,[R5, #+0]
        LDR      R0,[R5, #+4]
        SWI      +21
        LDR      R0,[R5, #+8]
        SWI      +21
        MOVS     R5,R4
        BNE      ??FreeRssItems_0
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??create_connect??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE create_connect

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function create_connect
        ARM
create_connect:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        LDR      R6,??DataTable10  ;; sock
        SUB      SP,SP,#+84
        CFI CFA R13+108
        MOV      R4,#+80
        MOV      R5,#+0
        STR      R5,[SP, #+0]
        STR      R5,[R6, #+4]
        SWI      +167
        CMP      R0,#+0
        STREQ    R5,[R6, #+8]
        BEQ      ??create_connect_0
        LDR      R7,??DataTable11  ;; RSS_URL
        STR      R5,[R6, #+16]
        SWI      +33148
        STR      R5,[R0, #+0]
        MOV      R1,#+58
        MOV      R0,R7
        SWI      +24
        CMP      R0,#+0
        BEQ      ??create_connect_1
        ADD      R1,R0,#+1
        LDRB     R2,[R1, #+0]
        CMP      R2,#+47
        LDRBEQ   R1,[R1, #+1]
        CMPEQ    R1,#+47
        BNE      ??create_connect_2
        ADD      R0,R0,#+3
??create_connect_1:
        CMP      R0,#+0
        BNE      ??create_connect_3
??create_connect_2:
        MOV      R0,R7
??create_connect_3:
        ADD      R1,SP,#+20
        B        ??create_connect_4
??create_connect_5:
        STRB     R2,[R1], #+1
??create_connect_4:
        LDRB     R2,[R0], #+1
        CMP      R2,#+0
        CMPNE    R2,#+47
        CMPNE    R2,#+58
        BNE      ??create_connect_5
        STRB     R5,[R1, #+0]
        MOV      R1,#+58
        MOV      R0,R7
        SWI      +279
        CMP      R0,#+0
        BEQ      ??create_connect_6
        LDRB     R1,[R0, #+1]
        CMP      R1,#+47
        LDRBEQ   R1,[R0, #+2]
        CMPEQ    R1,#+47
        BEQ      ??create_connect_6
        MOV      R4,#+0
        ADD      R0,R0,#+1
        MOV      R1,#+10
        B        ??create_connect_7
??create_connect_8:
        SUB      R2,R2,#+48
        MLA      R4,R1,R4,R2
??create_connect_7:
        LDRB     R2,[R0], #+1
        CMP      R2,#+0
        CMPNE    R2,#+47
        CMPNE    R2,#+58
        BEQ      ??create_connect_6
        CMP      R2,#+48
        BLT      ??create_connect_6
        CMP      R2,#+58
        BLT      ??create_connect_8
??create_connect_6:
        LDR      R7,??create_connect_9  ;; `?<Constant "DNR ok!">`
        MOV      R3,R4
        ADD      R2,SP,#+20
        ADD      R1,R7,#+8
        ADD      R0,R6,#+64
        SWI      +22
        SWI      +370
        ADD      R0,SP,#+20
        SWI      +439
        MVN      R8,R5
        CMP      R0,R8
        STRNE    R0,[SP, #+8]
        BNE      ??create_connect_10
        ADD      R2,R6,#+16
        MOV      R1,SP
        ADD      R0,SP,#+20
        SWI      +438
        MOVS     R3,R0
        BEQ      ??create_connect_11
        CMP      R3,#+201
        CMPNE    R3,#+214
        BNE      ??create_connect_12
        LDR      R0,[R6, #+16]
        CMP      R0,#+0
        BEQ      ??create_connect_11
        ADD      R1,R7,#+40
        ADD      R0,R6,#+64
        SWI      +26
        B        ??create_connect_13
??create_connect_12:
        ADD      R2,R7,#+52
        MOV      R1,#+255
        ADD      R0,R6,#+64
        SWI      +283
        B        ??create_connect_14
??create_connect_11:
        LDR      R0,[SP, #+0]
        CMP      R0,#+0
        BEQ      ??create_connect_15
        LDR      R0,[R0, #+12]
        CMP      R0,#+0
        BEQ      ??create_connect_0
        MOV      R1,R7
        ADD      R0,R6,#+64
        SWI      +26
        SWI      +370
        STR      R5,[R6, #+12]
        LDR      R1,[SP, #+0]
        LDR      R1,[R1, #+12]
        LDR      R1,[R1, #+0]
        LDR      R1,[R1, #+0]
        STR      R1,[SP, #+8]
??create_connect_10:
        MOV      R2,#+0
        MOV      R1,#+1
        MOV      R0,R1
        SWI      +371
        STR      R0,[R6, #+0]
        CMP      R0,R8
        BEQ      ??create_connect_16
        MOV      R5,#+1
        STRH     R5,[SP, #+4]
        MOV      R0,R4, LSL #+16
        MOV      R0,R0, LSR #+16
        SWI      +378
        STRH     R0,[SP, #+6]
        LDR      R0,[R6, #+0]
        MOV      R2,#+16
        ADD      R1,SP,#+4
        SWI      +372
        CMP      R0,R8
        STRNE    R5,[R6, #+4]
        BNE      ??create_connect_0
        LDR      R0,[R6, #+0]
        SWI      +374
        STR      R8,[R6, #+0]
        ADD      R2,R7,#+68
        B        ??create_connect_17
??create_connect_16:
        ADD      R2,R7,#+84
??create_connect_17:
        MOV      R1,#+255
        ADD      R0,R6,#+64
        SWI      +283
??create_connect_13:
        SWI      +370
??create_connect_14:
        ADD      SP,SP,#+84
        CFI CFA R13+24
        POP      {R4-R8,PC}
        CFI CFA R13+108
??create_connect_15:
        LDR      R0,[R6, #+12]
        SUB      R0,R0,#+1
        STR      R0,[R6, #+12]
??create_connect_0:
        ADD      SP,SP,#+84       ;; stack cleaning
        CFI CFA R13+24
        POP      {R4-R8,PC}       ;; return
        DATA
??create_connect_9:
        DC32     `?<Constant "DNR ok!">`
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??do_start_connection??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE do_start_connection

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function do_start_connection
        ARM
do_start_connection:
        LDR      R0,??DataTable18  ;; create_connect
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +369
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??free_xml_buf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE free_xml_buf

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function free_xml_buf
        ARM
free_xml_buf:
        LDR      R1,??DataTable14  ;; sock
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R1, #+52]
        MOV      R2,#+0
        STR      R2,[R1, #+56]
        STR      R2,[R1, #+52]
        SWI      +21
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??free_recv_buf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE free_recv_buf

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function free_recv_buf
        ARM
free_recv_buf:
        LDR      R1,??DataTable14  ;; sock
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R1, #+36]
        MOV      R2,#+0
        STR      R2,[R1, #+40]
        STR      R2,[R1, #+36]
        SWI      +21
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??get_answer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE get_answer

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
sock:
        DS8 4
connect_state:
        DS8 4
is_gprs_online:
        DS8 4
DNR_TRIES:
        DS8 4
DNR_ID:
        DS8 4
ALLTOTALRECEIVED:
        DS8 4
ALLTOTALSENDED:
        DS8 4
rss_first:
        DS8 4
rss_last:
        DS8 4
recv_buf:
        DS8 4
recv_buf_len:
        DS8 4
send_buf:
        DS8 4
send_buf_len:
        DS8 4
xml_buf:
        DS8 4
xml_buf_len:
        DS8 4
receive_mode:
        DS8 4
logmsg:
        DS8 256

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
mytmr:
        DS8 16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function get_answer
        ARM
get_answer:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        LDR      R4,??DataTable10  ;; sock
        SUB      SP,SP,#+1024
        CFI CFA R13+1044
        LDR      R0,[R4, #+0]
        MOV      R3,#+0
        MOV      R2,#+1024
        MOV      R1,SP
        SWI      +376
        MOV      R5,R0
        CMP      R5,#+1
        BLT      ??get_answer_0
        LDR      R0,[R4, #+20]
        MOV      R6,#+0
        ADD      R0,R5,R0
        STR      R0,[R4, #+20]
        LDR      R0,[R4, #+60]
        CMP      R0,#+0
        BEQ      ??get_answer_1
        LDR      R0,[R4, #+56]
        ADD      R0,R5,R0
        ADD      R1,R0,#+1
        LDR      R0,[R4, #+52]
        SWI      +186
        STR      R0,[R4, #+52]
        LDR      R0,[R4, #+56]
        LDR      R1,[R4, #+52]
        ADD      R0,R5,R0
        STRB     R6,[R0, +R1]
        LDR      R0,[R4, #+56]
        LDR      R3,[R4, #+52]
        MOV      R2,R5
        MOV      R1,SP
        ADD      R0,R0,R3
        SWI      +286
        LDR      R0,[R4, #+56]
        ADD      R0,R5,R0
        STR      R0,[R4, #+56]
        ADD      SP,SP,#+1024
        CFI CFA R13+20
        POP      {R4-R7,PC}
        CFI CFA R13+1044
??get_answer_1:
        LDR      R0,[R4, #+40]
        ADD      R0,R5,R0
        ADD      R1,R0,#+1
        LDR      R0,[R4, #+36]
        SWI      +186
        STR      R0,[R4, #+36]
        LDR      R0,[R4, #+40]
        LDR      R1,[R4, #+36]
        ADD      R0,R5,R0
        STRB     R6,[R0, +R1]
        LDR      R0,[R4, #+40]
        LDR      R3,[R4, #+36]
        MOV      R2,R5
        MOV      R1,SP
        ADD      R0,R0,R3
        SWI      +286
        LDR      R0,[R4, #+40]
        LDR      R1,??get_answer_2  ;; `?<Constant "\\r\\n\\r\\n">`
        ADD      R0,R5,R0
        STR      R0,[R4, #+40]
        LDR      R0,[R4, #+36]
        SWI      +280
        MOVS     R7,R0
        BEQ      ??get_answer_0
        LDR      R1,[R4, #+36]
        MOV      R0,#+1
        STR      R0,[R4, #+60]
        LDR      R0,[R4, #+40]
        ADD      R7,R7,#+4
        SUB      R1,R7,R1
        SUB      R5,R0,R1
        BL       free_xml_buf
        CMP      R5,#+0
        BEQ      ??get_answer_0
        ADD      R0,R5,#+1
        SWI      +20
        STR      R0,[R4, #+52]
        STRB     R6,[R5, +R0]
        LDR      R0,[R4, #+52]
        MOV      R2,R5
        MOV      R1,R7
        SWI      +286
        STR      R5,[R4, #+56]
        BL       free_recv_buf
??get_answer_0:
        ADD      SP,SP,#+1024     ;; stack cleaning
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??get_answer_2:
        DC32     `?<Constant "\\r\\n\\r\\n">`
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??free_send_buf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE free_send_buf

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function free_send_buf
        ARM
free_send_buf:
        LDR      R1,??DataTable14  ;; sock
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R1, #+44]
        MOV      R2,#+0
        STR      R2,[R1, #+48]
        STR      R2,[R1, #+44]
        SWI      +21
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??send_answer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE send_answer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function send_answer
        ARM
send_answer:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        LDR      R4,??DataTable10  ;; sock
        MOV      R5,R0
        MOV      R6,R1
        CMP      R5,#+0
        BEQ      ??send_answer_0
        LDR      R0,[R4, #+44]
        CMP      R0,#+0
        BEQ      ??send_answer_1
        LDR      R1,[R4, #+48]
        ADD      R1,R6,R1
        SWI      +186
        STR      R0,[R4, #+44]
        LDR      R0,[R4, #+48]
        LDR      R3,[R4, #+44]
        MOV      R2,R6
        MOV      R1,R5
        ADD      R0,R0,R3
        SWI      +286
        LDR      R0,[R4, #+48]
        ADD      R0,R6,R0
        STR      R0,[R4, #+48]
        MOV      R0,R5
        B        ??send_answer_2
??send_answer_1:
        STR      R5,[R4, #+44]
        STR      R6,[R4, #+48]
        B        ??send_answer_0
??send_answer_3:
        LDR      R0,[R4, #+24]
        ADD      R0,R5,R0
        STR      R0,[R4, #+24]
        LDR      R0,[R4, #+48]
        SUB      R2,R0,R5
        LDR      R0,[R4, #+44]
        STR      R2,[R4, #+48]
        ADD      R1,R5,R0
        SWI      +286
        CMP      R5,R6
        POPLT    {R4-R6,PC}
??send_answer_0:
        LDR      R6,[R4, #+48]
        LDR      R1,[R4, #+44]
        CMP      R6,#+0
        BEQ      ??send_answer_4
        MOV      R0,#+1
        ORR      R0,R0,#0x400
        CMP      R6,R0
        LDR      R0,[R4, #+0]
        MOVGE    R6,#+1024
        MOV      R3,#+0
        MOV      R2,R6
        SWI      +377
        MOVS     R5,R0
        BPL      ??send_answer_3
        SWI      +33148
        POP      {R4-R6,PC}
??send_answer_4:
        MOV      R0,#+0
        STR      R0,[R4, #+44]
        MOV      R0,R1
??send_answer_2:
        SWI      +21
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??end_socket??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE end_socket

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function end_socket
        ARM
end_socket:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R4,??DataTable10  ;; sock
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        POPMI    {R4,PC}
        MOV      R1,#+2
        SWI      +375
        LDR      R0,[R4, #+0]
        SWI      +374
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??free_socket??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE free_socket

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function free_socket
        ARM
free_socket:
        LDR      R0,??DataTable10  ;; sock
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MVN      R1,#+0
        STR      R1,[R0, #+0]
        MOV      R1,#+0
        STR      R1,[R0, #+4]
        BL       free_recv_buf
        BL       free_send_buf
        SWI      +370
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable10:
        DC32     sock

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??send_req??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE send_req

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function send_req
        ARM
send_req:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R4,??DataTable11  ;; RSS_URL
        SUB      SP,SP,#+384
        CFI CFA R13+396
        MOV      R1,#+58
        MOV      R0,R4
        SWI      +24
        CMP      R0,#+0
        BEQ      ??send_req_0
        ADD      R1,R0,#+1
        LDRB     R2,[R1, #+0]
        CMP      R2,#+47
        LDRBEQ   R1,[R1, #+1]
        CMPEQ    R1,#+47
        BNE      ??send_req_1
        ADD      R0,R0,#+3
??send_req_0:
        CMP      R0,#+0
        BNE      ??send_req_2
??send_req_1:
        MOV      R0,R4
??send_req_2:
        ADD      R1,SP,#+256
        B        ??send_req_3
??send_req_4:
        STRB     R2,[R1], #+1
        ADD      R0,R0,#+1
??send_req_3:
        LDRB     R2,[R0, #+0]
        CMP      R2,#+0
        CMPNE    R2,#+47
        BNE      ??send_req_4
        MOV      R3,#+0
        STRB     R3,[R1, #+0]
        ADD      R1,SP,#+320
        B        ??send_req_5
??send_req_6:
        STRB     R2,[R1], #+1
??send_req_5:
        LDRB     R2,[R0], #+1
        CMP      R2,#+0
        CMPNE    R2,#+58
        BNE      ??send_req_6
        STRB     R3,[R1, #+0]
        LDR      R2,??send_req_7  ;; `?<Constant "GET %s HTTP/1.0\\r\\nHost...">`
        ADD      R0,SP,#+256
        PUSH     {R0}
        CFI CFA R13+400
        ADD      R3,SP,#+324
        MOV      R1,#+255
        ADD      R0,SP,#+4
        SWI      +283
        ADD      R0,SP,#+4
        SWI      +27
        MOV      R4,R0
        ADD      R0,R4,#+1
        SWI      +20
        MOV      R5,R0
        ADD      R1,SP,#+4
        SWI      +26
        MOV      R1,R4
        MOV      R0,R5
        BL       send_answer
        ADD      SP,SP,#+388
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        DATA
??send_req_7:
        DC32     `?<Constant "GET %s HTTP/1.0\\r\\nHost...">`
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable11:
        DC32     RSS_URL

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??html_decode??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE html_decode

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function html_decode
        ARM
html_decode:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        MOV      R6,R0
        MOV      R7,#+13
        LDR      R10,??html_decode_0+0x10  ;; `?<Constant "br />">`
        SWI      +27
        ADD      R0,R0,#+1
        SWI      +20
        MOV      R4,R0
        MOV      R5,R4
        MOV      R9,#+32
        B        ??html_decode_1
??html_decode_2:
        STRB     R7,[R5], #+1
??html_decode_3:
        ADD      R6,R6,#+3
??html_decode_1:
        LDRB     R8,[R6], #+1
        CMP      R8,#+0
        BEQ      ??html_decode_4
        CMP      R8,#+60
        BNE      ??html_decode_5
        MOV      R2,#+3
        ADR      R1,??html_decode_0  ;; "br>"
        MOV      R0,R6
        SWI      +277
        CMP      R0,#+0
        BEQ      ??html_decode_2
        MOV      R2,#+5
        MOV      R1,R10
        MOV      R0,R6
        SWI      +277
        CMP      R0,#+0
        BNE      ??html_decode_6
        STRB     R7,[R5], #+1
??html_decode_7:
        ADD      R6,R6,#+5
        B        ??html_decode_1
??html_decode_6:
        MOV      R2,#+4
        ADD      R1,R10,#+24
        MOV      R0,R6
        SWI      +277
        CMP      R0,#+0
        BNE      ??html_decode_8
        STRB     R9,[R5], #+1
??html_decode_9:
        ADD      R6,R6,#+4
        B        ??html_decode_1
??html_decode_8:
        MOV      R2,#+2
        ADR      R1,??html_decode_0+0x4  ;; "p>"
        MOV      R0,R6
        SWI      +277
        CMP      R0,#+0
        BNE      ??html_decode_10
        STRB     R7,[R5], #+1
        ADD      R6,R6,#+2
        B        ??html_decode_1
??html_decode_5:
        CMP      R8,#+38
        BNE      ??html_decode_10
        MOV      R2,#+6
        ADD      R1,R10,#+8
        MOV      R0,R6
        SWI      +277
        CMP      R0,#+0
        BNE      ??html_decode_11
        MOV      R0,#+34
        STRB     R0,[R5], #+1
        ADD      R6,R6,#+6
        B        ??html_decode_1
??html_decode_11:
        MOV      R2,#+5
        ADD      R1,R10,#+16
        MOV      R0,R6
        SWI      +277
        CMP      R0,#+0
        STRBEQ   R9,[R5], #+1
        BEQ      ??html_decode_7
        MOV      R2,#+3
        ADR      R1,??html_decode_0+0x8  ;; "lt;"
        MOV      R0,R6
        SWI      +277
        CMP      R0,#+0
        MOVEQ    R0,#+60
        STRBEQ   R0,[R5], #+1
        BEQ      ??html_decode_3
        MOV      R2,#+3
        ADR      R1,??html_decode_0+0xC  ;; "gt;"
        MOV      R0,R6
        SWI      +277
        CMP      R0,#+0
        MOVEQ    R0,#+62
        STRBEQ   R0,[R5], #+1
        BEQ      ??html_decode_3
        MOV      R2,#+4
        ADD      R1,R10,#+32
        MOV      R0,R6
        SWI      +277
        CMP      R0,#+0
        MOVEQ    R0,#+38
        STRBEQ   R0,[R5], #+1
        BEQ      ??html_decode_9
        MOV      R2,#+5
        ADD      R1,R10,#+40
        MOV      R0,R6
        SWI      +277
        CMP      R0,#+0
        BNE      ??html_decode_10
        MOV      R0,#+40
        STRB     R0,[R5], #+1
        MOV      R0,#+99
        STRB     R0,[R5], #+1
        MOV      R0,#+41
        STRB     R0,[R5], #+1
        B        ??html_decode_7
??html_decode_10:
        STRB     R8,[R5], #+1
        B        ??html_decode_1
??html_decode_4:
        MOV      R0,#+0
        STRB     R0,[R5, #+0]
        MOV      R0,R4
        POP      {R4-R10,PC}      ;; return
        DATA
??html_decode_0:
        DC8      "br>"
        DC8      "p>",+0
        DC8      "lt;"
        DC8      "gt;"
        DC32     `?<Constant "br />">`
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??DecodeRSS??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE DecodeRSS

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function DecodeRSS
        ARM
DecodeRSS:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        LDR      R4,??DataTable14  ;; sock
        BL       FreeRssItems
        LDR      R0,[R4, #+52]
        LDR      R1,[R4, #+56]
        _BLF     XMLDecode,??XMLDecode??rA
        MOVS     R5,R0
        POPEQ    {R4-R11,PC}
        MOV      R6,R5
        B        ??DecodeRSS_0
??DecodeRSS_1:
        LDR      R6,[R6, #+0]
        CMP      R6,#+0
        BEQ      ??DecodeRSS_2
??DecodeRSS_0:
        LDR      R0,[R6, #+8]
        ADR      R1,??DecodeRSS_3  ;; "rss"
        SWI      +25
        CMP      R0,#+0
        BNE      ??DecodeRSS_1
        LDR      R7,[R6, #+4]
        LDR      R6,??DecodeRSS_3+0x4  ;; `?<Constant "channel">`
        B        ??DecodeRSS_4
??DecodeRSS_5:
        LDR      R7,[R7, #+0]
??DecodeRSS_4:
        CMP      R7,#+0
        BEQ      ??DecodeRSS_2
        LDR      R0,[R7, #+8]
        MOV      R1,R6
        SWI      +25
        CMP      R0,#+0
        BNE      ??DecodeRSS_5
        LDR      R7,[R7, #+4]
        CMP      R7,#+0
        BEQ      ??DecodeRSS_2
??DecodeRSS_6:
        LDR      R0,[R7, #+8]
        ADD      R1,R6,#+28
        SWI      +25
        CMP      R0,#+0
        BNE      ??DecodeRSS_7
        LDR      R11,[R7, #+4]
        MOV      R9,#+0
        MOV      R10,#+0
        MOV      R0,#+12
        SWI      +20
        MOV      R8,R0
        MOV      R1,#+12
        SWI      +285
        CMP      R11,#+0
        BEQ      ??DecodeRSS_8
??DecodeRSS_9:
        LDR      R0,[R11, #+8]
        ADD      R1,R6,#+8
        SWI      +25
        CMP      R0,#+0
        LDR      R0,[R11, #+8]
        LDREQ    R9,[R11, #+16]
        ADD      R1,R6,#+16
        SWI      +25
        CMP      R0,#+0
        LDREQ    R10,[R11, #+16]
        LDR      R11,[R11, #+0]
        CMP      R11,#+0
        BNE      ??DecodeRSS_9
        CMP      R9,#+0
        BEQ      ??DecodeRSS_10
        MOV      R0,R9
        SWI      +27
        ADD      R0,R0,#+1
        SWI      +20
        STR      R0,[R8, #+4]
        MOV      R1,R9
        SWI      +26
??DecodeRSS_10:
        CMP      R10,#+0
        BEQ      ??DecodeRSS_8
        MOV      R0,R10
        BL       html_decode
        STR      R0,[R8, #+8]
??DecodeRSS_8:
        LDR      R0,[R4, #+28]
        CMP      R0,#+0
        BNE      ??DecodeRSS_11
        STR      R8,[R4, #+28]
        MOV      R0,R8
        STR      R0,[R4, #+32]
        B        ??DecodeRSS_7
??DecodeRSS_11:
        LDR      R0,[R4, #+32]
        STR      R8,[R0, #+0]
        STR      R8,[R4, #+32]
??DecodeRSS_7:
        LDR      R7,[R7, #+0]
        CMP      R7,#+0
        BNE      ??DecodeRSS_6
??DecodeRSS_2:
        MOV      R0,R5
        _BLF     DestroyTree,??DestroyTree??rA
        POP      {R4-R11,PC}      ;; return
        DATA
??DecodeRSS_3:
        DC8      "rss"
        DC32     `?<Constant "channel">`
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE OnRedraw

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function OnRedraw
        ARM
OnRedraw:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        LDR      R6,??DataTable14  ;; sock
        SUB      SP,SP,#+8
        CFI CFA R13+44
        MOV      R4,R0
        SWI      +33160
        MOV      R5,R0
        SWI      +33161
        LDR      R1,[R6, #+20]
        MOV      R11,R0
        STR      R1,[SP, #+0]
        LDR      R1,[R6, #+24]
        MOV      R8,#+0
        STR      R1,[SP, #+4]
        ADD      R0,R6,#+28
        B        ??OnRedraw_0
??OnRedraw_1:
        ADD      R8,R8,#+1
??OnRedraw_0:
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BNE      ??OnRedraw_1
        MOV      R0,#+1
        SWI      +302
        MOV      R9,R0
        MOV      R0,#+4
        SWI      +302
        MOV      R10,R0
        SWI      +33161
        MOV      R7,R0
        SWI      +33160
        PUSH     {R9}
        CFI CFA R13+48
        PUSH     {R10}
        CFI CFA R13+52
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+56
        PUSH     {R1}
        CFI CFA R13+60
        PUSH     {R1}
        CFI CFA R13+64
        SUB      R3,R7,#+1
        LDR      R7,??OnRedraw_2+0x4  ;; `?<Constant "State: %d\\nRx: %db, Tx...">`
        SUB      R2,R0,#+1
        MOV      R1,#+24
        MOV      R0,#+0
        SWI      +336
        PUSH     {R8}
        CFI CFA R13+68
        ADD      R0,R6,#+64
        PUSH     {R0}
        CFI CFA R13+72
        LDR      R0,[R6, #+48]
        MOV      R1,R7
        PUSH     {R0}
        CFI CFA R13+76
        LDR      R0,[SP, #+36]
        SUB      R10,R5,#+4
        PUSH     {R0}
        CFI CFA R13+80
        LDR      R3,[SP, #+36]
        LDR      R2,[R6, #+4]
        LDR      R0,[R4, #+52]
        SUB      R11,R11,#+4
        SWI      +292
        ADD      SP,SP,#+36
        CFI CFA R13+44
        MOV      R0,#+23
        SWI      +302
        MOV      R8,R0
        MOV      R0,#+0
        SWI      +302
        MOV      R9,R0
        MOV      R0,#+5
        SWI      +453
        PUSH     {R8}
        CFI CFA R13+48
        PUSH     {R9}
        CFI CFA R13+52
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+56
        SUB      R0,R11,R0
        MOV      R3,R10
        MOV      R2,#+27
        MOV      R1,#+8
        PUSH     {R1}
        CFI CFA R13+60
        PUSH     {R0}
        CFI CFA R13+64
        LDR      R0,[R4, #+52]
        MOV      R1,#+3
        ASR      R5,R5,#+1
        SWI      +332
        LDR      R0,[R6, #+28]
        ADD      SP,SP,#+20
        CFI CFA R13+44
        CMP      R0,#+0
        LDR      R0,[R4, #+52]
        ADDNE    R1,R7,#+68
        ADREQ    R1,??OnRedraw_2  ;; ""
        SWI      +292
        MOV      R0,#+23
        SWI      +302
        MOV      R6,R0
        MOV      R0,#+0
        SWI      +302
        MOV      R8,R0
        MOV      R0,#+5
        SWI      +453
        PUSH     {R6}
        CFI CFA R13+48
        PUSH     {R8}
        CFI CFA R13+52
        MOV      R1,#+4
        PUSH     {R1}
        CFI CFA R13+56
        MOV      R3,R10
        SUB      R2,R11,R0
        MOV      R1,#+5
        PUSH     {R1}
        CFI CFA R13+60
        MOV      R1,R11
        PUSH     {R1}
        CFI CFA R13+64
        LDR      R0,[R4, #+52]
        MOV      R1,R5
        SWI      +332
        LDR      R0,[R4, #+52]
        ADD      R1,R7,#+60
        SWI      +292
        MOV      R0,#+23
        SWI      +302
        MOV      R6,R0
        MOV      R0,#+0
        SWI      +302
        MOV      R7,R0
        MOV      R0,#+5
        SWI      +453
        PUSH     {R6}
        CFI CFA R13+68
        PUSH     {R7}
        CFI CFA R13+72
        MOV      R1,#+1
        PUSH     {R1}
        CFI CFA R13+76
        MOV      R3,R5
        SUB      R2,R11,R0
        MOV      R1,#+5
        PUSH     {R1}
        CFI CFA R13+80
        MOV      R1,R11
        PUSH     {R1}
        CFI CFA R13+84
        LDR      R0,[R4, #+52]
        MOV      R1,#+3
        SWI      +332
        ADD      SP,SP,#+40
        CFI CFA R13+44
        POP      {R0,R1,R4-R11,PC}  ;; return
        DATA
??OnRedraw_2:
        DC8      "",+0,+0,+0
        DC32     `?<Constant "State: %d\\nRx: %db, Tx...">`
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE onCreate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function onCreate
        ARM
onCreate:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        MOV      R0,#+256
        SWI      +293
        STR      R0,[R4, #+52]
        MOV      R0,#+1
        STRB     R0,[R4, #+12]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE onClose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function onClose
        ARM
onClose:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,#+0
        STRB     R1,[R0, #+12]
        LDR      R0,[R0, #+52]
        SWI      +297
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        THUMB
??onFocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock32
        REQUIRE onFocus

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function onFocus
        ARM
onFocus:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,#+2
        STRB     R1,[R0, #+12]
        SWI      +383
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUnfocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock34
        REQUIRE onUnfocus

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function onUnfocus
        ARM
onUnfocus:
        LDRB     R1,[R0, #+12]
        CMP      R1,#+2
        MOVEQ    R1,#+1
        STRBEQ   R1,[R0, #+12]
        BX       LR               ;; return
        CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock36
        REQUIRE OnKey

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function OnKey
        ARM
OnKey:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R1, #+4]
        MOV      R2,#+147
        LDR      R1,[R0, #+4]
        ORR      R2,R2,#0x100
        CMP      R1,R2
        BNE      ??OnKey_0
        LDR      R0,[R0, #+8]
        LDR      R1,??DataTable14  ;; sock
        SUBS     R0,R0,#+1
        BEQ      ??OnKey_1
        SUBS     R0,R0,#+3
        BEQ      ??OnKey_2
        SUBS     R0,R0,#+7
        BNE      ??OnKey_0
        MOV      R0,#+3
        STR      R0,[R1, #+12]
        LDR      R0,??DataTable18  ;; create_connect
        SWI      +369
        SWI      +370
??OnKey_0:
        MOV      R0,#+0
        POP      {PC}             ;; return
??OnKey_1:
        LDR      R0,[R1, #+28]
        CMP      R0,#+0
        POPEQ    {PC}
        _BLF     create_rssitems_menu,??create_rssitems_menu??rA
        MOV      R0,#+0
        POP      {PC}
??OnKey_2:
        MOV      R0,#+1
        POP      {PC}
        CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable14:
        DC32     sock

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock38
        REQUIRE method8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI Function method8
        ARM
method8:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon0
        CFI NoFunction
        THUMB
??method9??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock40
        REQUIRE method9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI Function method9
        ARM
method9:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock41

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock42
        REQUIRE maincsm_oncreate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
maincsm_oncreate:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R0,#+56
        SWI      +20
        MOV      R5,R0
        MOV      R1,#+56
        SWI      +285
        SWI      +33161
        MOV      R6,R0
        SWI      +33160
        LDR      R2,??maincsm_oncreate_0  ;; ??Canvas
        SUB      R1,R6,#+1
        SUB      R0,R0,#+1
        MOV      R6,#+0
        STRH     R6,[R2, #+0]
        MOV      R3,#+24
        STRH     R3,[R2, #+2]
        STRH     R0,[R2, #+4]
        STRH     R1,[R2, #+6]
        STR      R2,[R5, #+0]
        MOV      R0,#+2
        STR      R0,[R5, #+48]
        ADD      R0,R2,#+8
        STR      R0,[R5, #+4]
        SWI      +32789
        STR      R0,[R5, #+32]
        STR      R6,[R4, #+16]
        STR      R6,[R4, #+20]
        MOV      R0,R5
        SWI      +311
        STR      R0,[R4, #+40]
        POP      {R4-R6,PC}       ;; return
        DATA
??maincsm_oncreate_0:
        DC32     ??Canvas
        CFI EndBlock cfiBlock43

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock44 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock44
        REQUIRE ElfKiller

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock45 Using cfiCommon1
        CFI Function ElfKiller
        ARM
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     SFB(ELFBEGIN)
        CFI EndBlock cfiBlock45

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock46 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock46
        REQUIRE maincsm_onclose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock47 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
maincsm_onclose:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        _BLF     PrintLibFree,??PrintLibFree??rA
        LDR      R0,??DataTable19  ;; free_socket
        SWI      +369
        LDR      R0,??maincsm_onclose_0  ;; free_xml_buf
        SWI      +369
        BL       FreeRssItems
        LDR      R0,??maincsm_onclose_0+0x4  ;; mytmr
        SWI      +396
        LDR      R0,??maincsm_onclose_0+0x8  ;; ElfKiller
        SWI      +369
        POP      {PC}             ;; return
        DATA
??maincsm_onclose_0:
        DC32     free_xml_buf
        DC32     mytmr
        DC32     ElfKiller
        CFI EndBlock cfiBlock47

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock48 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock48
        REQUIRE maincsm_onmessage

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock49 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
maincsm_onmessage:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+8
        CFI CFA R13+24
        MOV      R4,R1
        LDR      R1,[R4, #+4]
        MOV      R2,#+14
        ORR      R2,R2,#0x6400
        CMP      R1,R2
        BNE      ??maincsm_onmessage_1
        LDR      R1,[R4, #+12]
        LDR      R2,[R0, #+40]
        CMP      R1,R2
        BNE      ??maincsm_onmessage_2
        MVN      R1,#+2
        STR      R1,[R0, #+16]
??maincsm_onmessage_1:
        LDR      R0,[R4, #+4]
        LDR      R5,??maincsm_onmessage_3  ;; `?<Constant "NRSS config updated!">`
        MOV      R1,#+175
        ORR      R1,R1,#0xDE00
        CMP      R0,R1
        BNE      ??maincsm_onmessage_4
        LDR      R0,??maincsm_onmessage_3+0x4  ;; successed_config_filename
        LDR      R1,[R4, #+12]
        LDR      R0,[R0, #+0]
        _BLF     strcmp_nocase,??strcmp_nocase??rA
        CMP      R0,#+0
        BNE      ??maincsm_onmessage_4
        MOV      R1,R5
        MOV      R0,#+1
        SWI      +328
        _BLF     InitConfig,??InitConfig??rA
??maincsm_onmessage_4:
        LDR      R0,[R4, #+4]
        MOV      R1,#+174
        ORR      R1,R1,#0xDE00
        CMP      R0,R1
        BNE      ??maincsm_onmessage_2
        LDR      R1,[R4, #+12]
        LDR      R0,[R4, #+16]
        LDR      R4,??DataTable17  ;; sock
        MOV      R6,#+0
        SUBS     R2,R1,#+128
        BEQ      ??maincsm_onmessage_5
        SUBS     R2,R2,#+2
        BEQ      ??maincsm_onmessage_6
        SUBS     R2,R2,#+18
        BEQ      ??maincsm_onmessage_7
        B        ??maincsm_onmessage_8
??maincsm_onmessage_6:
        STR      R6,[R4, #+8]
        B        ??maincsm_onmessage_9
??maincsm_onmessage_5:
        MOV      R0,#+1
        STR      R0,[R4, #+8]
        POP      {R1,R2,R4-R6,PC}
??maincsm_onmessage_7:
        LDR      R1,[R4, #+16]
        CMP      R0,R1
        BNE      ??maincsm_onmessage_2
        LDR      R0,[R4, #+12]
        CMP      R0,#+0
        BEQ      ??maincsm_onmessage_2
        LDR      R0,??DataTable18  ;; create_connect
??maincsm_onmessage_10:
        SWI      +369
??maincsm_onmessage_2:
        MOV      R0,#+1
        POP      {R1,R2,R4-R6,PC}
??maincsm_onmessage_8:
        LDR      R2,[R4, #+0]
        CMP      R0,R2
        BNE      ??maincsm_onmessage_2
        SUB      R1,R1,#+138
        CMP      R1,#+5
        BHI      ??maincsm_onmessage_2
        ADR      R0,??maincsm_onmessage_0
        LDRSB    R0,[R0, R1]
        ADD      PC,PC,R0, LSL #+2
        DATA
??maincsm_onmessage_0:
        DC8      +16,+16,+11,+1
        DC8      +24,+22,+0,+0
        ARM
??maincsm_onmessage_11:
        BL       free_recv_buf
        BL       free_send_buf
        LDR      R0,[R4, #+4]
        CMP      R0,#+1
        BNE      ??maincsm_onmessage_2
        STR      R6,[R4, #+60]
        MOV      R0,#+2
        STR      R0,[R4, #+4]
        LDR      R0,??maincsm_onmessage_3+0x8  ;; send_req
        B        ??maincsm_onmessage_10
??maincsm_onmessage_12:
        LDR      R0,[R4, #+4]
        CMP      R0,#+2
        BLT      ??maincsm_onmessage_2
        LDR      R0,??maincsm_onmessage_3+0xC  ;; get_answer
        B        ??maincsm_onmessage_10
??maincsm_onmessage_13:
        LDR      R0,??maincsm_onmessage_3+0x10  ;; send_answer
        MOV      R2,#+0
        MOV      R1,R2
        SWI      +369
??maincsm_onmessage_9:
        MOV      R0,#+1
        POP      {R1,R2,R4-R6,PC}
??maincsm_onmessage_14:
        ADD      R1,R5,#+24
        B        ??maincsm_onmessage_15
??maincsm_onmessage_16:
        ADD      R1,R5,#+40
??maincsm_onmessage_15:
        ADD      R0,R4,#+64
        SWI      +22
        LDR      R0,[R4, #+4]
        CMP      R0,#+0
        BEQ      ??maincsm_onmessage_2
        CMN      R0,#+1
        BNE      ??maincsm_onmessage_17
        STR      R6,[R4, #+4]
        BL       DecodeRSS
        LDR      R0,??DataTable19  ;; free_socket
        B        ??maincsm_onmessage_10
??maincsm_onmessage_17:
        MVN      R0,R6
        STR      R0,[R4, #+4]
        LDR      R0,??maincsm_onmessage_3+0x14  ;; end_socket
        B        ??maincsm_onmessage_10
        DATA
??maincsm_onmessage_3:
        DC32     `?<Constant "NRSS config updated!">`
        DC32     successed_config_filename
        DC32     send_req
        DC32     get_answer
        DC32     send_answer
        DC32     end_socket
        CFI EndBlock cfiBlock49

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable17:
        DC32     sock

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable18:
        DC32     create_connect

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable19:
        DC32     free_socket

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock50 Using cfiCommon0
        CFI NoFunction
        THUMB
??UpdateCSMname??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock50
        REQUIRE UpdateCSMname

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
maincsm_name_body:
        DS8 280

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "GET %s HTTP/1.0\\r\\nHost...">`:
        DATA
        DC8 "GET %s HTTP/1.0\015\012Host: %s\015\012\015\012"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 "br>"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "br />">`:
        DATA
        DC8 "br />"
        DC8 0, 0
        DC8 "quote;"
        DC8 0
        DC8 "nbsp;"
        DC8 0, 0
        DC8 "/td>"
        DC8 0, 0, 0
        DC8 "amp;"
        DC8 0, 0, 0
        DC8 "copy;"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
        DATA
        DC8 "p>"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 "lt;"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 "gt;"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 "rss"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "channel">`:
        DATA
        DC8 "channel"
        DC8 "title"
        DC8 0, 0
        DC8 "description"
        DC8 "item"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "State: %d\\nRx: %db, Tx...">`:
        DATA
        DC8 53H, 74H, 61H, 74H, 65H, 3AH, 20H, 25H
        DC8 64H, 0AH, 52H, 78H, 3AH, 20H, 25H, 64H
        DC8 62H, 2CH, 20H, 54H, 78H, 3AH, 20H, 25H
        DC8 64H, 62H, 0AH, 51H, 75H, 65H, 75H, 65H
        DC8 3AH, 20H, 25H, 64H, 62H, 0AH, 25H, 74H
        DC8 0AH, 54H, 6FH, 74H, 61H, 6CH, 20H, 69H
        DC8 74H, 65H, 6DH, 73H, 3AH, 20H, 25H, 64H
        DC8 0
        DC8 0, 0, 0
        DC8 "Exit"
        DC8 0, 0, 0
        DC8 "List"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
        DATA
        DC8 ""

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "NRSS config updated!">`:
        DATA
        DC8 "NRSS config updated!"
        DC8 0, 0, 0
        DC8 "Remote closed!"
        DC8 0
        DC8 "Local closed!"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "DNR ok!">`:
        DATA
        DC8 "DNR ok!"
        DC8 "Connect to: %s Using port: %d"
        DC8 0, 0
        DC8 "Wait DNR"
        DC8 0, 0, 0
        DC8 "DNR error %d"
        DC8 0, 0, 0
        DC8 "Connect fault"
        DC8 0, 0
        DC8 "Error Create Socket"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "NRSS">`:
        DATA
        DC8 "NRSS"
        DC8 0, 0, 0
        DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
        DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
        DC16 139
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\313\\345\\342">`:
        DATA
        DC8 "\313\345\342"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\317\\360\\340\\342">`:
        DATA
        DC8 "\317\360\340\342"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\r\\n\\r\\n">`:
        DATA
        DC8 "\015\012\015\012"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
??Canvas:
        DATA
        DC16 0, 0, 0, 0
gui_methods:
        DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
        DC32 kill_data, method8, method9, 0H

        RSEG DATA_C:CONST:SORT:NOROOT(2)
minus11:
        DATA
        DC32 -11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock51 Using cfiCommon1
        CFI Function UpdateCSMname
        ARM
UpdateCSMname:
        LDR      R0,??UpdateCSMname_0  ;; `?<Constant "NRSS">`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,R0
        ADD      R0,R0,#+48
        SWI      +292
        POP      {PC}             ;; return
        DATA
??UpdateCSMname_0:
        DC32     `?<Constant "NRSS">`
        CFI EndBlock cfiBlock51

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock52 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock52
        REQUIRE main

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock53 Using cfiCommon1
        CFI Function main
        ARM
main:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+44
        CFI CFA R13+48
        _BLF     InitConfig,??InitConfig??rA
        SWI      +326
        BL       UpdateCSMname
        LDR      R0,??main_0      ;; `?<Constant "NRSS">` + 8
        MOV      R2,#+0
        MOV      R1,SP
        SWI      +263
        SWI      +327
        MOV      R0,#+1
        _BLF     PrintLibInit,??PrintLibInit??rA
        MOV      R0,#+1
        _BLF     SetCanvasFlag,??SetCanvasFlag??rA
        MOV      R0,#+0
        ADD      SP,SP,#+44
        CFI CFA R13+4
        POP      {PC}             ;; return
        DATA
??main_0:
        DC32     `?<Constant "NRSS">` + 8
        CFI EndBlock cfiBlock53

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock54 Using cfiCommon1
        CFI NoFunction
        ARM
??XMLDecode??rA:
        LDR      R12,??Subroutine27_0  ;; XMLDecode
        BX       R12
        DATA
??Subroutine27_0:
        DC32     XMLDecode
        CFI EndBlock cfiBlock54

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock55 Using cfiCommon1
        CFI NoFunction
        ARM
??DestroyTree??rA:
        LDR      R12,??Subroutine28_0  ;; DestroyTree
        BX       R12
        DATA
??Subroutine28_0:
        DC32     DestroyTree
        CFI EndBlock cfiBlock55

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock56 Using cfiCommon1
        CFI NoFunction
        ARM
??create_rssitems_menu??rA:
        LDR      R12,??Subroutine29_0  ;; create_rssitems_menu
        BX       R12
        DATA
??Subroutine29_0:
        DC32     create_rssitems_menu
        CFI EndBlock cfiBlock56

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock57 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine30_0  ;; kill_data
        BX       R12
        DATA
??Subroutine30_0:
        DC32     kill_data
        CFI EndBlock cfiBlock57

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock58 Using cfiCommon1
        CFI NoFunction
        ARM
??PrintLibFree??rA:
        LDR      R12,??Subroutine31_0  ;; PrintLibFree
        BX       R12
        DATA
??Subroutine31_0:
        DC32     PrintLibFree
        CFI EndBlock cfiBlock58

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock59 Using cfiCommon1
        CFI NoFunction
        ARM
??strcmp_nocase??rA:
        LDR      R12,??Subroutine32_0  ;; strcmp_nocase
        BX       R12
        DATA
??Subroutine32_0:
        DC32     strcmp_nocase
        CFI EndBlock cfiBlock59

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock60 Using cfiCommon1
        CFI NoFunction
        ARM
??InitConfig??rA:
        LDR      R12,??Subroutine33_0  ;; InitConfig
        BX       R12
        DATA
??Subroutine33_0:
        DC32     InitConfig
        CFI EndBlock cfiBlock60

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock61 Using cfiCommon1
        CFI NoFunction
        ARM
??PrintLibInit??rA:
        LDR      R12,??Subroutine34_0  ;; PrintLibInit
        BX       R12
        DATA
??Subroutine34_0:
        DC32     PrintLibInit
        CFI EndBlock cfiBlock61

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock62 Using cfiCommon1
        CFI NoFunction
        ARM
??SetCanvasFlag??rA:
        LDR      R12,??Subroutine35_0  ;; SetCanvasFlag
        BX       R12
        DATA
??Subroutine35_0:
        DC32     SetCanvasFlag
        CFI EndBlock cfiBlock62

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for menu_sk>`:
        DATA
        DC16 24, 0
        DC32 `?<Constant "\\313\\345\\342">`
        DC16 1, 0
        DC32 `?<Constant "\\317\\360\\340\\342">`
        DC16 61, 0
        DC32 2147467515

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for menu_skt>`:
        DATA
        DC32 menu_sk, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        END
// 
// 4 308 bytes in segment CODE
//   516 bytes in segment DATA_C
//    32 bytes in segment DATA_I
//    32 bytes in segment DATA_ID
//   616 bytes in segment DATA_Z
//    24 bytes in segment INITTAB
// 
// 4 092 bytes of CODE  memory (+ 240 bytes shared)
//   548 bytes of CONST memory
//   648 bytes of DATA  memory
//
//Errors: none
//Warnings: none
