##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    29/Jun/2008  17:09:18 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\_MY_PROJECT_\naticq_mod\configs.c       #
#    Command line    =  D:\Pasha\elf\_MY_PROJECT_\naticq_mod\configs.c -D    #
#                       NEWSGOLD -D UIN_WRITE -D ole64 --preprocess          #
#                       D:\Pasha\elf\_MY_PROJECT_\naticq_mod\ole64\List\     #
#                       -lC D:\Pasha\elf\_MY_PROJECT_\naticq_mod\ole64\List\ #
#                        -o D:\Pasha\elf\_MY_PROJECT_\naticq_mod\ole64\Obj\  #
#                       -s9 --no_unroll --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "D:\Pasha\Embedded          #
#                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I  #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\Pasha\elf\_MY_PROJECT_\naticq_mod\ole64\List\conf #
#                       igs.lst                                              #
#    Object file     =  D:\Pasha\elf\_MY_PROJECT_\naticq_mod\ole64\Obj\confi #
#                       gs.r79                                               #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\_MY_PROJECT_\naticq_mod\configs.c
      1          #include "../inc/swilib.h"
      2          #include "../inc/cfg_items.h"
      3          #include "../inc/pnglist.h"
      4          #include "configs.h"
      5          #include "NatICQ.h"
      6          #include "conf_loader.h"
      7          
      8          //Теперь конфиги делаются отдельно!!!!как в экстраинфо! прикладываю два проекта 1stconfig && 2ndconfig
      9          //должны находится в папке с исходником натаси в своих папках!чтобы конфиг можно было удоьно редактировать
     10          //если изменили какой то из конфигов,то так же нужно изменить структуры в таком же порядке,
     11          //как зменили конфиг с темиже данными!и поправить функцию UpdateConfig(),и потом скомпилить отдельно эльфы 1stconfig && 2ndconfig,
     12          //чтобы получить разные конфиги...по другому пока не знаю как сделать...
     13          //та и короче...теперь меняется тока конфиг мода...оригинальный конфиг не трогать!
     14          //понятнее хз как объяснить....;)
     15          // by kluchnik 31.03.08 
     16          
     17          
     18          //--------------------------------------------------------------------//
     19          //------------------------  ORIGINAL CONFIG  -------------------------//
     20          //--------------------------------------------------------------------//
     21          
     22          typedef struct 
     23          {
     24            
     25            CFG_HDR cfghdr0;
     26            unsigned int UIN;
     27            
     28            CFG_HDR cfghdr1;
     29            char PASS[9];
     30          
     31            
     32          //--- NETWORK SETTING ---//
     33            
     34          CFG_HDR cfghdr2;
     35            CFG_HDR cfghdr2_1;
     36            char NATICQ_HOST[128];
     37          
     38            CFG_HDR cfghdr2_2;
     39            unsigned int NATICQ_PORT;
     40          
     41            CFG_HDR cfghdr2_3;
     42            unsigned int RECONNECT_TIME;
     43            
     44            CFG_HDR cfghdr2_4;
     45            char HIST_PATH[64];
     46          
     47            CFG_HDR cfghdr2_5;
     48            char SMILE_FILE[64];
     49          
     50            CFG_HDR cfghdr2_6;
     51            char SMILE_PATH[64];
     52          
     53            CFG_HDR cfghdr2_7;
     54            char ICON_PATH[64];
     55          
     56            CFG_HDR cfghdr2_8;
     57            char XSTATUSES_PATH[64];
     58          
     59            CFG_HDR cfghdr2_9;
     60            char TEMPLATES_PATH[64];
     61          CFG_HDR cfghdr3;//NETWORK SETTING
     62          
     63          
     64          //---  INTERFACE ---//
     65          
     66          CFG_HDR cfghdr4;
     67          //Status icon on mainscreen position
     68            CFG_HDR cfghdr4_1;
     69            unsigned int IDLEICON_X;
     70            unsigned int IDLEICON_Y;
     71            
     72          //Popup chat
     73            CFG_HDR cfghdr4_2;
     74            int DEVELOP_IF;
     75            CFG_CBOX_ITEM cfgcbox4_2[3];
     76            
     77          //Sorting
     78            CFG_HDR cfghdr4_3;
     79            int SORT_CLIST;
     80            CFG_CBOX_ITEM cfgcbox4_3[2];
     81          
     82          //First letter when typing
     83            CFG_HDR cfghdr4_4;
     84            int FIRST_LETTER;
     85            CFG_CBOX_ITEM cfgcbox4_4[2];
     86          
     87          
     88            
     89          //--- FONT AND COLOR ---//
     90            
     91           CFG_HDR cfghdr4_5;
     92              CFG_HDR cfghdr4_5_1;
     93              unsigned int I_COLOR;
     94            
     95              CFG_HDR cfghdr4_5_2;
     96              unsigned int TO_COLOR;
     97            
     98              CFG_HDR cfghdr4_5_3;
     99              unsigned int X_COLOR;
    100            
    101              CFG_HDR cfghdr4_5_4;
    102              unsigned int ED_FONT_SIZE;
    103            
    104              CFG_HDR cfghdr4_5_5;
    105              unsigned int ED_H_FONT_SIZE;
    106            
    107              CFG_HDR cfghdr4_5_6;
    108              unsigned int ED_X_FONT_SIZE;
    109            
    110              CFG_HDR cfghdr4_5_7;
    111              unsigned int O_I_COLOR;
    112            
    113              CFG_HDR cfghdr4_5_8;
    114              unsigned int O_TO_COLOR;
    115              
    116              CFG_HDR cfghdr4_5_9;
    117              unsigned int O_X_COLOR;
    118            
    119              CFG_HDR cfghdr4_5_10;
    120              unsigned int O_ED_FONT_SIZE;
    121            
    122              CFG_HDR cfghdr4_5_11;
    123              unsigned int O_ED_H_FONT_SIZE;
    124            
    125              CFG_HDR cfghdr4_5_12;
    126              unsigned int O_ED_X_FONT_SIZE;
    127            
    128              CFG_HDR cfghdr4_5_13;
    129              unsigned int ACK_COLOR;
    130            
    131              CFG_HDR cfghdr4_5_14;
    132              unsigned int UNACK_COLOR;
    133            CFG_HDR cfghdr4_6;//FONT & COLOR  
    134          
    135            
    136          //--- ILLUMINATION ---//
    137          //Illumination by BoBa 19.04.2007
    138            
    139            CFG_HDR cfghdr4_7;
    140              CFG_HDR cfghdr4_7_1;
    141              unsigned int ILL_DISP_RECV;
    142            
    143              CFG_HDR cfghdr4_7_2;
    144              unsigned int ILL_KEYS_RECV;
    145            
    146              CFG_HDR cfghdr4_7_3;
    147              unsigned int ILL_RECV_TMR;
    148            
    149              CFG_HDR cfghdr4_7_4;
    150              unsigned int ILL_RECV_FADE;
    151            
    152              CFG_HDR cfghdr4_7_5;
    153              unsigned int ILL_DISP_SEND;
    154            
    155              CFG_HDR cfghdr4_7_6;
    156              unsigned int ILL_KEYS_SEND;
    157            
    158              CFG_HDR cfghdr4_7_7;
    159              unsigned int ILL_SEND_TMR;
    160            
    161              CFG_HDR cfghdr4_7_8;
    162              unsigned int ILL_SEND_FADE;
    163            
    164              CFG_HDR cfghdr4_7_9;
    165              unsigned int ILL_OFF_FADE;
    166            CFG_HDR cfghdr4_8;  //ILLUMINATION
    167           
    168          CFG_HDR cfghdr5;//INTERFACE
    169          
    170          
    171          
    172          //---------------------//
    173          //       HISTORY       //
    174          //---------------------//
    175          
    176          //History
    177          CFG_HDR cfghdr6;
    178          
    179          //Enable history logging
    180              CFG_HDR cfghdr6_1;
    181              int LOG_ALL;
    182              CFG_CBOX_ITEM cfgcbox6_1[2];
    183          
    184          //History type
    185              CFG_HDR cfghdr6_2;
    186              int HISTORY_TYPE;
    187              CFG_CBOX_ITEM cfgcbox6_2[2];
    188            
    189          //Enable status logging
    190              CFG_HDR cfghdr6_3;
    191              int LOG_STATCH;
    192              CFG_CBOX_ITEM cfgcbox6_3[2];
    193          
    194          //Enable X-status logging
    195              CFG_HDR cfghdr6_4;
    196              int LOG_XTXT;
    197              CFG_CBOX_ITEM cfgcbox6_4[2];
    198            
    199          //Auto request X-status if entering to chat
    200              CFG_HDR cfghdr6_5;
    201              int ENA_AUTO_XTXT;
    202              CFG_CBOX_ITEM cfgcbox6_5[2];
    203          
    204          //Don't log X-status, if it same as prevision
    205              CFG_HDR cfghdr6_6;
    206              int NOT_LOG_SAME_XTXT;
    207              CFG_CBOX_ITEM cfgcbox6_6[2];
    208          
    209          //Buffer for fill from history
    210              CFG_HDR cfghdr6_7;
    211              int HISTORY_BUFFER;
    212              CFG_CBOX_ITEM cfgcbox6_7[6];
    213            
    214          CFG_HDR cfghdr7;//HISTORY
    215          
    216          
    217          //---------------------//
    218          //    NOTYFY POWER     //
    219          //---------------------//
    220          
    221          CFG_HDR cfghdr8;
    222          
    223            CFG_HDR cfghdr8_1;
    224            unsigned int sndVolume;
    225          
    226            CFG_HDR cfghdr8_2;
    227            unsigned int vibraPower;
    228          
    229            CFG_HDR cfghdr8_3;
    230            int VIBR_TYPE;
    231            CFG_CBOX_ITEM cfgcbox8_3[2];
    232          
    233            CFG_HDR cfghdr8_4;
    234            int VIBR_ON_CONNECT;
    235            CFG_CBOX_ITEM cfgcbox8_4[2];
    236          
    237            
    238          //--- SOUND SETUP ---//
    239            
    240            CFG_HDR cfghdr8_5;
    241          
    242              CFG_HDR cfghdr8_5_1;
    243              char sndStartup[64];
    244            
    245              CFG_HDR cfghdr8_5_2;
    246              char sndSrvMsg[64];
    247            
    248              CFG_HDR cfghdr8_5_3;
    249              char sndGlobal[64];
    250            
    251              CFG_HDR cfghdr8_5_4;
    252              char sndMsg[64];
    253            
    254              CFG_HDR cfghdr8_5_5;
    255              char sndMsgSent[64];
    256            CFG_HDR cfghdr8_6;//SOUND SETUP
    257            
    258          CFG_HDR cfghdr9;//NOTYFY POWER
    259          }myConfig;
    260          
    261          
    262          
    263          
    264          //----------------------------------------------//
    265          //                  MOD CONFIG                  //
    266          //----------------------------------------------//
    267          
    268          typedef struct
    269          {
    270            CFG_HDR cfghdr0;
    271            CFG_HDR cfghdr31;//={CFG_LEVEL,"Оригинальные настройки",1,0};
    272          
    273          //Popup chat
    274            CFG_HDR cfghdr4_2;//={CFG_CBOX,"Popup",0,2};
    275            int DEVELOP_IF_MOD;
    276            CFG_CBOX_ITEM cfgcbox15_1[2];//={"Use set orig.config", "After unlock"};
    277            
    278          //history
    279            CFG_HDR cfghdr6_8;//"Show Active contact"
    280            int SHOW_ACTIVE;
    281            CFG_CBOX_ITEM cfgcbox6_8[2];//={"No","Yes"};
    282          
    283            CFG_HDR cfghdr6_10;//={CFG_CBOX,"Save history with name",0,2};
    284            int HISTORY_SAVE_TYPE;// = 1;
    285            CFG_CBOX_ITEM cfgcbox6_9[2];//={"No","Yes"};
    286              
    287          //Buffer for fill from history
    288            CFG_HDR cfghdr6_7;//={CFG_CBOX,"History read buffer",0,2};
    289            int HISTORY_BUFFER_MOD;
    290            CFG_CBOX_ITEM cfgcbox6_7[2];//={"Use set orig.conf.","4 kbyte"};    
    291              
    292          
    293            CFG_HDR cfghdr181;//={CFG_CBOX,"Extended sounds",0,2};
    294            unsigned int extended_sounds;
    295            CFG_CBOX_ITEM cfgcbox18_3_2[2];//={"No","Yes"};
    296              
    297            CFG_HDR cfghdr15;//={CFG_STR_UTF8,"add online msg path",0,63};
    298            char sndGlobal2[64];
    299            
    300            CFG_HDR cfghdr161;//={CFG_STR_UTF8,"add new msg path",0,63};
    301            char sndMsg2[64];
    302              
    303            CFG_HDR cfghdr16r1;//={CFG_STR_UTF8,"ping sound",0,63};
    304            char pingsnd[64];
    305              
    306          CFG_HDR cfghdr30;
    307          
    308          
    309          //----------- НАСТРОЙКА КЛАВИШ -----------//
    310          
    311          
    312          //View settings
    313            CFG_HDR cfghdr23_4;
    314            
    315          //Long press right in chat
    316            CFG_HDR cfghdr4_67;
    317            int LongRightAction;
    318            CFG_CBOX_ITEM cfgcbox4_56[3];
    319          
    320          //Long press right in chat
    321            CFG_HDR cfghdr34_64;
    322            int LongLeftAction ;
    323            CFG_CBOX_ITEM cfgcbox444_56[2];
    324            
    325          
    326            CFG_HDR cfghdr23_1;
    327            int LongVolUpAction;
    328            CFG_CBOX_ITEM cfgcbox23_2[2];
    329          
    330            CFG_HDR cfghdr23_3;
    331            int LongVolDownAction ;
    332            CFG_CBOX_ITEM cfgcbox23_4[2];
    333          
    334          //Action on # button in contact list
    335            CFG_HDR cfghdr78_4520;
    336            int ActionResh;
    337            CFG_CBOX_ITEM cfgcbox_668_z[2];
    338            
    339          
    340          //Press vol up or vol down button in CL
    341            CFG_HDR cfghdr34_642;
    342            int isVolDownButton;
    343            CFG_CBOX_ITEM cfgcbox434_56[2];
    344            
    345            CFG_HDR cfghdr34_6342;
    346            int isVolUpButton;
    347            CFG_CBOX_ITEM cfgcbox4134_56[2];
    348          
    349          CFG_HDR cfghdr223_5; //НАСТРОКА КЛАВИШ
    350          	
    351          	
    352          //----------- STATUS SETTING -----------//
    353            
    354          
    355          CFG_HDR cfghdr_45;
    356          #ifdef NEWSGOLD
    357          //Status icon on mainscreen position
    358              CFG_HDR cfghdr467_1;
    359              int ShowStatusIcon;
    360              CFG_CBOX_ITEM cfgcbox9_1[5];
    361          #endif
    362          #ifdef NEWSGOLD
    363          //Show x-status on iconbar or mainscreen
    364              CFG_HDR cfghdrz_68;
    365              int show_xstatus;
    366              CFG_CBOX_ITEM cfgcbox_8z[4];
    367          #else
    368              CFG_HDR cfghdrz_68;
    369              int show_xstatus;
    370              CFG_CBOX_ITEM cfgcbox_8z[2];
    371          #endif
    372          //Xstatus idle position
    373              CFG_HDR cfghdrz_1;
    374              unsigned int IDLEICON_XX;
    375              unsigned int IDLEICON_YX;
    376          
    377              CFG_HDR cfghdr780_1;
    378              int ind_set_xstatus;
    379              CFG_CBOX_ITEM cfgcbox8_z2[2];
    380              
    381          #ifdef NEWSGOLD
    382          //Number first pic status in folder img for show in iconbar
    383              CFG_HDR cfghdr19_22;
    384              unsigned int NumStatusToIconBar;  
    385          
    386          //Number first pic x-status in folder img for show in iconbar    
    387              CFG_HDR cfghdr19_242;
    388              unsigned int NumXStatusToIconBar;  
    389          #endif    
    390          CFG_HDR cfghdr_4;//STATUS SETTINGS
    391            
    392            
    393          //----------- PNGFONT SETTING -----------//     
    394            
    395          CFG_HDR cfghdr1_45;
    396             
    397          //Nember png-font or system
    398             CFG_HDR cfghdr65z;
    399             unsigned int fonto;
    400              
    401          //Path to png-font
    402             CFG_HDR cfghdr98;
    403             char fontpath[64];
    404          
    405          //Coordinates for message on idle
    406             CFG_HDR cfghd83;
    407             unsigned int msg_d_x ;
    408             unsigned int msg_d_y ;   
    409             
    410             CFG_HDR cfghdrs19_1;
    411             unsigned int main_msg_timer;
    412             
    413            CFG_HDR cfghdr60_2;
    414            char fontColor[4];
    415            
    416            CFG_HDR cfghdr60_3;
    417            char bgrColor[4];
    418          
    419          //Max show symbol on idle
    420            CFG_HDR cfghdr19a_1;
    421            unsigned int main_lenght;
    422                
    423            CFG_HDR cfghdr9z9;
    424            int use_cutter;
    425            CFG_CBOX_ITEM cfgcbox18a_4[2];
    426          
    427            CFG_HDR cfghdr65y;
    428            unsigned int spaco1;
    429                
    430          CFG_HDR cfghdrss_45;//PNGFONT SETTING
    431          
    432          
    433          //-------------------------------------------------------//
    434          //                SMILES COLOR SETTING                   //
    435          //-------------------------------------------------------//
    436          
    437          
    438          CFG_HDR cfghdr41;//={CFG_LEVEL,"Цвета выбора смайлов",1,0};
    439          
    440           CFG_HDR cfghdr40_1;//={CFG_COLOR,"Цвет фона",0,0};
    441           char SmBGcolor[4];
    442            
    443           CFG_HDR cfghdr40_2;//={CFG_COLOR,"Цвет курсора",0,0};
    444           char SmSelectColor[4];
    445            
    446           CFG_HDR cfghdr40_3;//={CFG_COLOR,"Цвет текста стат.",0,0};
    447           char SmFontColor[4];
    448          
    449          CFG_HDR cfghdr40;
    450            
    451          
    452          //-------------------------------------------------------//
    453          //                     ONLINE TIME                       //
    454          //-------------------------------------------------------//
    455          
    456          CFG_HDR cfghdr_m71;
    457          
    458              CFG_HDR cfghdr699;
    459              unsigned int onlineTime_x;
    460              unsigned int onlineTime_y;
    461          
    462              CFG_HDR cfghdr698;
    463              int Pause_Time;
    464              CFG_CBOX_ITEM cfgcbox85[2];
    465          
    466          CFG_HDR cfghdr_m70;
    467          
    468          
    469          //-------------------------------------------------------//
    470          //                   AUTO PING/UNREAD                    //
    471          //-------------------------------------------------------//
    472          
    473          
    474          CFG_HDR cfghdr_m91;
    475          
    476              CFG_HDR cfghd66;
    477              unsigned int Ping_X ;
    478              unsigned int Ping_Y ;
    479              
    480              CFG_HDR cfghdr1z9a_1;
    481              unsigned int ping_time_config ;
    482              
    483              CFG_HDR cfghdr298;
    484              int Is_Unread_On;
    485              CFG_CBOX_ITEM cfgcbox86[2];
    486              
    487              CFG_HDR cfghd67;
    488              unsigned int unread_X;
    489              unsigned int unread_Y;
    490          
    491          CFG_HDR cfghdr_m90;
    492          
    493          
    494          //-------------------------------------------------------//
    495          //                     AUTO STATUS                       //
    496          //-------------------------------------------------------//
    497          
    498          
    499          CFG_HDR cfghdr_m61;
    500          
    501              CFG_HDR cfghdr668;
    502              int Auto_Status;
    503              CFG_CBOX_ITEM cfgcbox89[2];
    504              
    505              CFG_HDR cfghdr6678;// = {CFG_CBOX,"Включить автоматически при",0,2};
    506              int isAutoStatusOn;// = 0;
    507              CFG_CBOX_ITEM cfgcboxa1_153[13];//={"Выключен","В сети", "Отошел", "Недоступен", "Не беспокоить", "Занят", "Готов болтать", "Невидимый", "Депрессия", "Злой", "Дома", "Жру","На работе"};
    508          
    509              
    510              CFG_HDR cfghdr667;
    511              unsigned int AUTO_ENGADE;
    512              
    513              CFG_HDR cfghdr61_8;//={CFG_UINT,"Количество ответов",0,150};
    514              unsigned int automsgcount;//=3;
    515              
    516              CFG_HDR cfghdr_13;
    517              int time_zone;
    518              CFG_CBOX_ITEM cfgcbox_13[33];
    519              
    520              CFG_HDR cfghdrzz_8;
    521              char awayHelloMsg[24];
    522              
    523              CFG_HDR cfghdrzz_9;
    524              char awayMsg[256];
    525              
    526              CFG_HDR cfghdr66_2;
    527              int Reset_timer;
    528              CFG_CBOX_ITEM cfgcbox90[2];
    529            
    530          //Show away time on idle
    531              CFG_HDR cfghdr663;
    532              int showAwayIdle ;
    533              CFG_CBOX_ITEM cfgcbox82[2];
    534              
    535              CFG_HDR cfghd6_7;
    536              unsigned int auto_x;
    537              unsigned int auto_y;
    538            
    539          CFG_HDR cfghdr_m60;
    540          
    541          
    542          
    543          //-------------------------------------------------------//
    544          //                   AUTO CHANGE STATUS                  //
    545          //-------------------------------------------------------//
    546          
    547          
    548          CFG_HDR cfghdra1;
    549          
    550              CFG_HDR cfghdra1_3;
    551              int status_1;
    552              CFG_CBOX_ITEM cfgcboxa1_13[13];
    553          
    554              CFG_HDR cfghdra1_2;
    555              TTime tm_status_1;     
    556          
    557              CFG_HDR cfghdra1_1;
    558              int status_2;
    559              CFG_CBOX_ITEM cfgcboxa1_14[13];
    560          
    561              CFG_HDR cfghdra1_4;
    562              TTime tm_status_2;
    563          
    564              CFG_HDR cfghdra1_5;
    565              int status_3;
    566              CFG_CBOX_ITEM cfgcboxa1_15[13];
    567              
    568              CFG_HDR cfghdra1_6;
    569              TTime tm_status_3;
    570          
    571              CFG_HDR cfghdra1_7;
    572              int status_4;
    573              CFG_CBOX_ITEM cfgcboxa1_16[13];
    574              
    575              CFG_HDR cfghdra1_8;
    576              TTime tm_status_4;
    577          
    578              CFG_HDR cfghdra1_9;
    579              int status_5 ;
    580              CFG_CBOX_ITEM cfgcboxa1_17[13];
    581              
    582              CFG_HDR cfghdra1_14;
    583              TTime tm_status_5;
    584              
    585          CFG_HDR cfghdra0;
    586          
    587          //-------------------------------------------------------//
    588          //                    SCREEN SAVER                       //
    589          //-------------------------------------------------------//
    590          #ifdef NEWSGOLD
    591          
    592          CFG_HDR cfghdr_91;//={CFG_LEVEL,"Заставка",1,0};
    593          
    594              CFG_HDR cfghdr9_1;// = {CFG_CBOX,"Включить заставку",0,2};
    595              int isScreenSaverEna;
    596              CFG_CBOX_ITEM cfgcbox9_2[2];
    597              
    598              CFG_HDR cfghdr9_3;//={CFG_UINT,"Время до срабатывания(12=1мин)",0,1000};
    599              unsigned int screenSaverTime;
    600          CFG_HDR cfghdr_90;
    601          
    602          #endif
    603          
    604          //-------------------------------------------------------//
    605          //                     POPUP MESSAGE                     //
    606          //-------------------------------------------------------//
    607          
    608          CFG_HDR cfghdr_51;//={CFG_LEVEL,"Всплывающие сообщ.",1,0};
    609          
    610             CFG_HDR cfghdr51_0;// = {CFG_CBOX,"Показывать",0,4};
    611             int PopupShow;
    612             CFG_CBOX_ITEM cfgcbox51_2[4];//={"Ничего","Вход.сообш.","Подкл.конт.","Все"};
    613              
    614             CFG_HDR cfghdr51_1;//={CFG_STR_UTF8,"Формат входящ.сооб.",0,8};
    615             char PopupMsgString[9];//="%s";
    616              
    617             CFG_HDR cfghdr51_2;//={CFG_STR_UTF8,"Формат подкл.контакта",0,8};
    618             char PopupOnlineString[9];//=">%s<";  
    619              
    620             CFG_HDR cfghdr51_3;//={CFG_UINT,"Шрифт всплыв.сообщ",0,1000};
    621             unsigned int PopupFont;
    622             
    623             CFG_HDR cfghdr51_6;//={CFG_COLOR,"Фон всплыв.сообщ.",0,0};
    624             char PopupBGCl[4];
    625          
    626             CFG_HDR cfghdr51_4;//={CFG_COLOR,"Цвет подкл.контакта",0,0};
    627             char PopupOnlineCl[4];
    628              
    629             CFG_HDR cfghdr51_5;//={CFG_COLOR,"Цвет входящ.сообщ.",0,0};
    630             char PopupMsgCl[4];
    631             
    632          CFG_HDR cfghdr_50;//={CFG_LEVEL,"",0,0};
    633          
    634          
    635          
    636          //-------------------------------------------------------//
    637          //              SETTING CONTACTLIST HEADER               //
    638          //-------------------------------------------------------//
    639          
    640          CFG_HDR cfghdr_s1;//={CFG_LEVEL,"Настройка заголовка КЛ",1,0};
    641          
    642          //Show contact header with...
    643              CFG_HDR cfghdrs1_3;// = {CFG_CBOX,"Показывать в заголовке КЛ",0,6};
    644              int TIME_OR_MSG;
    645              CFG_CBOX_ITEM cfgcboxs2[6];//={"Время","Сообщения","Контакты","Все","Пнг шрифт(все)","Ничего"};
    646          
    647              CFG_HDR cfghdrs1_15;
    648              int ShowTraff;
    649              CFG_CBOX_ITEM cfgcboxs15[2];
    650              
    651              CFG_HDR cfghdrs1_11;//={CFG_CBOX,"Отображать кол-во контактов",0,2};
    652              int isShowCont;
    653              CFG_CBOX_ITEM cfgcboxs11[2];
    654          
    655              CFG_HDR cfghdrs1_12;//={CFG_CBOX,"Отображать кол-во непрочит.",0,2};
    656              int isShowUnread;
    657              CFG_CBOX_ITEM cfgcboxs12[2];
    658          
    659              CFG_HDR cfghdrs1_4;//={CFG_CBOX,"Отображать вибру [R] ",0,2};
    660              int isShowV ;
    661              CFG_CBOX_ITEM cfgcboxs3[2];
    662              
    663              CFG_HDR cfghdrs1_5;//={CFG_CBOX,"Отображать звук [S]",0,2};
    664              int isShowS ;
    665              CFG_CBOX_ITEM cfgcboxs5[2];
    666              
    667              CFG_HDR cfghdrs1_6;//={CFG_CBOX,"Отображать автостатус [A]",0,2};
    668              int isShowA ;
    669              CFG_CBOX_ITEM cfgcboxs6[2];
    670              
    671              CFG_HDR cfghdrs1_7;//={CFG_CBOX,"Отображать напоминалку [R]",0,2};
    672              int isShowR ;
    673              CFG_CBOX_ITEM cfgcboxs7[2];
    674              
    675              CFG_HDR cfghdrs1_8;//={CFG_CBOX,"Отображать статус/время [Tm/Xs]",0,2};
    676              int isShowTmXs ;
    677              CFG_CBOX_ITEM cfgcboxs8[2];
    678              
    679              CFG_HDR cfghdrs1_13;//={CFG_CBOX,"Отображать инвиз [I]",0,2};
    680              int isShowI;
    681              CFG_CBOX_ITEM cfgcboxs13[2];
    682              
    683              CFG_HDR cfghdrs1_9;//={CFG_CBOX,"Отображать заряд батареи",0,2};
    684              int isShowBat ;
    685              CFG_CBOX_ITEM cfgcboxs9[2];
    686              
    687              CFG_HDR cfghdrs1_10;//={CFG_CBOX,"Отображать время",0,2};
    688              int isShowTime;
    689              CFG_CBOX_ITEM cfgcboxs10[2];
    690              
    691          CFG_HDR cfghdr_s0;
    692          
    693          
    694          
    695          //-------------------------------------------------------//
    696          //                      EXTRA CONFIG                     //
    697          //-------------------------------------------------------//
    698          
    699          CFG_HDR cfghdr_m51;
    700          
    701           
    702          //Vibra count in vibra remaider
    703              CFG_HDR cfghdr65;
    704              unsigned int Vibra_cc;
    705          #ifdef NEWSGOLD
    706          //CSM for player
    707              CFG_HDR cfghdr66;
    708              char CsmAdr[9];  
    709              
    710          //Text before name track
    711              CFG_HDR cfghdr67;
    712              char playing[13];
    713          #endif
    714          //Show command sending    
    715              CFG_HDR cfghdr780;
    716              int show_send_info;
    717              CFG_CBOX_ITEM cfgcbox8_z[2];
    718              
    719          //Show changr status contact
    720              CFG_HDR cfghdr7_80;
    721              int isLogStatusChange;
    722              CFG_CBOX_ITEM cfgcbox8df_z[2];
    723          
    724          //Show Loopback contact in CL
    725              CFG_HDR cfghdr71_30;
    726              int IsShowLoopback;
    727              CFG_CBOX_ITEM cfgcbox_3z[2];
    728          
    729          CFG_HDR cfghdr_m50;//level
    730          
    731          CFG_HDR cfghdr11_10;
    732          char myName[256];
    733          
    734          CFG_HDR cfghdr11_9;//level
    735          char ignor_list[256];
    736          
    737          }myConfigMod;
    738          
    739          
    740          #ifdef NEWSGOLD
    741          #define DEFAULT_DISK "4"
    742          #else
    743          #define DEFAULT_DISK "0"
    744          #endif
    745          
    746          //------------ origin setting ---------------//
    747          

   \                                 In segment DATA_I, align 4, align-sorted
    748          int DEVELOP_IF_MOD;
    749          int SHOW_ACTIVE;
    750          int HISTORY_SAVE_TYPE;
    751          int HISTORY_BUFFER_MOD;
    752          unsigned int extended_sounds;
    753          char sndGlobal2[64];
    754          char sndMsg2[64];
    755          char pingsnd[64];
    756          
    757          
    758          //------------ SETTING BUTTON -------------//
    759          
    760          int LongRightAction;
    761          int LongLeftAction;
    762          int ActionResh;
    763          int LongVolUpAction;
    764          int LongVolDownAction ;
    765          int isVolUpButton;//If action vol up && vol down button on elka
    766          int isVolDownButton;
    767          
    768            
    769          
    770          //------------ STATUS SETTING --------------//
    771          
    772          #ifdef NEWSGOLD
    773          int ShowStatusIcon;
    774          #endif
    775          int show_xstatus;
    776          unsigned int IDLEICON_XX;
    777          unsigned int IDLEICON_YX;
    778          int ind_set_xstatus;
    779          #ifdef NEWSGOLD
    780          unsigned int NumStatusToIconBar;
    781          unsigned int NumXStatusToIconBar;
    782          #endif
    783          
    784          
    785          //----------- PNG FONT SETTING -------------//
    786          
    787          unsigned int fonto;
    788          char fontpath[64];
    789          unsigned int msg_d_x;
    790          unsigned int msg_d_y;
    791          unsigned int main_msg_timer;//Кол-во секунд сколько показывать сообщения на идле
    792          char fontColor[];//Цвет для системного шрифта
    793          char bgrColor[];
    794          unsigned int main_lenght;
    795          int use_cutter;
    796          unsigned int spaco1;
    797          unsigned int spaco2;
    798            
    799          
    800          //------------ smiles color -----------------//
    801          
    802          char SmBGcolor[4];
    803          char SmSelectColor[4];
    804          char SmFontColor[4];
    805          
    806          
    807          //-------------- online time ----------------//
    808          
    809          //Online time on idle
    810          unsigned int onlineTime_x;
    811          unsigned int onlineTime_y;
    812          int Pause_Time;  
    813          
    814          
    815          //-------------  AUTO PING/UNREAD -----------// 
    816          
    817          unsigned int Ping_X;
    818          unsigned int Ping_Y;
    819          unsigned int ping_time_config;
    820          int Is_Unread_On;
    821          unsigned int unread_X;
    822          unsigned int unread_Y;
    823          
    824          
    825          //---------------- AUTO STATUS ---------------//
    826          
    827          int Auto_Status;//Включен автостатус или нет 
    828          int isAutoStatusOn;// = 0;
    829          unsigned int AUTO_ENGADE;
    830          unsigned int automsgcount;
    831          int time_zone;
    832          char awayHelloMsg[24];//hello msg
    833          char awayMsg[256];//message
    834          int showAwayIdle;  
    835          unsigned int auto_x;
    836          unsigned int auto_y;
    837          int Reset_timer;  
    838          
    839          
    840          //------------- AUTO CHANGE STATUS ------------//
    841          
    842          TTime tm_status_1;
   \                     tm_status_1:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for tm_status_1>`
    843          unsigned int status_1;
    844          TTime tm_status_2;
   \                     tm_status_2:
   \   00000008                      DS8 8
   \   00000010                      REQUIRE `?<Initializer for tm_status_2>`
    845          unsigned int status_2;
    846          TTime tm_status_3;
   \                     tm_status_3:
   \   00000010                      DS8 8
   \   00000018                      REQUIRE `?<Initializer for tm_status_3>`
    847          unsigned int status_3;
    848          TTime tm_status_4;
   \                     tm_status_4:
   \   00000018                      DS8 8
   \   00000020                      REQUIRE `?<Initializer for tm_status_4>`
    849          unsigned int status_4;
    850          TTime tm_status_5;
   \                     tm_status_5:
   \   00000020                      DS8 8
   \   00000028                      REQUIRE `?<Initializer for tm_status_5>`
   \                     DEVELOP_IF_MOD:
   \   00000028                      DS8 4
   \   0000002C                      REQUIRE `?<Initializer for DEVELOP_IF_MOD>`
   \                     HISTORY_SAVE_TYPE:
   \   0000002C                      DS8 4
   \   00000030                      REQUIRE `?<Initializer for HISTORY_SAVE_TYPE>`
   \                     HISTORY_BUFFER_MOD:
   \   00000030                      DS8 4
   \   00000034                      REQUIRE `?<Initializer for HISTORY_BUFFER_MOD>`
   \                     extended_sounds:
   \   00000034                      DS8 4
   \   00000038                      REQUIRE `?<Initializer for extended_sounds>`
   \                     LongRightAction:
   \   00000038                      DS8 4
   \   0000003C                      REQUIRE `?<Initializer for LongRightAction>`
   \                     LongLeftAction:
   \   0000003C                      DS8 4
   \   00000040                      REQUIRE `?<Initializer for LongLeftAction>`
   \                     ActionResh:
   \   00000040                      DS8 4
   \   00000044                      REQUIRE `?<Initializer for ActionResh>`
   \                     LongVolUpAction:
   \   00000044                      DS8 4
   \   00000048                      REQUIRE `?<Initializer for LongVolUpAction>`
   \                     LongVolDownAction:
   \   00000048                      DS8 4
   \   0000004C                      REQUIRE `?<Initializer for LongVolDownAction>`
   \                     isVolUpButton:
   \   0000004C                      DS8 4
   \   00000050                      REQUIRE `?<Initializer for isVolUpButton>`
   \                     isVolDownButton:
   \   00000050                      DS8 4
   \   00000054                      REQUIRE `?<Initializer for isVolDownButton>`
   \                     ShowStatusIcon:
   \   00000054                      DS8 4
   \   00000058                      REQUIRE `?<Initializer for ShowStatusIcon>`
   \                     show_xstatus:
   \   00000058                      DS8 4
   \   0000005C                      REQUIRE `?<Initializer for show_xstatus>`
   \                     IDLEICON_XX:
   \   0000005C                      DS8 4
   \   00000060                      REQUIRE `?<Initializer for IDLEICON_XX>`
   \                     IDLEICON_YX:
   \   00000060                      DS8 4
   \   00000064                      REQUIRE `?<Initializer for IDLEICON_YX>`
   \                     ind_set_xstatus:
   \   00000064                      DS8 4
   \   00000068                      REQUIRE `?<Initializer for ind_set_xstatus>`
   \                     NumStatusToIconBar:
   \   00000068                      DS8 4
   \   0000006C                      REQUIRE `?<Initializer for NumStatusToIconBar>`
   \                     NumXStatusToIconBar:
   \   0000006C                      DS8 4
   \   00000070                      REQUIRE `?<Initializer for NumXStatusToIconBar>`
   \                     fonto:
   \   00000070                      DS8 4
   \   00000074                      REQUIRE `?<Initializer for fonto>`
   \                     msg_d_x:
   \   00000074                      DS8 4
   \   00000078                      REQUIRE `?<Initializer for msg_d_x>`
   \                     msg_d_y:
   \   00000078                      DS8 4
   \   0000007C                      REQUIRE `?<Initializer for msg_d_y>`
   \                     main_msg_timer:
   \   0000007C                      DS8 4
   \   00000080                      REQUIRE `?<Initializer for main_msg_timer>`
   \                     main_lenght:
   \   00000080                      DS8 4
   \   00000084                      REQUIRE `?<Initializer for main_lenght>`
   \                     use_cutter:
   \   00000084                      DS8 4
   \   00000088                      REQUIRE `?<Initializer for use_cutter>`
   \                     spaco1:
   \   00000088                      DS8 4
   \   0000008C                      REQUIRE `?<Initializer for spaco1>`
   \                     spaco2:
   \   0000008C                      DS8 4
   \   00000090                      REQUIRE `?<Initializer for spaco2>`
   \                     onlineTime_x:
   \   00000090                      DS8 4
   \   00000094                      REQUIRE `?<Initializer for onlineTime_x>`
   \                     onlineTime_y:
   \   00000094                      DS8 4
   \   00000098                      REQUIRE `?<Initializer for onlineTime_y>`
   \                     Pause_Time:
   \   00000098                      DS8 4
   \   0000009C                      REQUIRE `?<Initializer for Pause_Time>`
   \                     Ping_X:
   \   0000009C                      DS8 4
   \   000000A0                      REQUIRE `?<Initializer for Ping_X>`
   \                     Ping_Y:
   \   000000A0                      DS8 4
   \   000000A4                      REQUIRE `?<Initializer for Ping_Y>`
   \                     ping_time_config:
   \   000000A4                      DS8 4
   \   000000A8                      REQUIRE `?<Initializer for ping_time_config>`
   \                     Is_Unread_On:
   \   000000A8                      DS8 4
   \   000000AC                      REQUIRE `?<Initializer for Is_Unread_On>`
   \                     unread_X:
   \   000000AC                      DS8 4
   \   000000B0                      REQUIRE `?<Initializer for unread_X>`
   \                     unread_Y:
   \   000000B0                      DS8 4
   \   000000B4                      REQUIRE `?<Initializer for unread_Y>`
   \                     Auto_Status:
   \   000000B4                      DS8 4
   \   000000B8                      REQUIRE `?<Initializer for Auto_Status>`
   \                     isAutoStatusOn:
   \   000000B8                      DS8 4
   \   000000BC                      REQUIRE `?<Initializer for isAutoStatusOn>`
   \                     AUTO_ENGADE:
   \   000000BC                      DS8 4
   \   000000C0                      REQUIRE `?<Initializer for AUTO_ENGADE>`
   \                     automsgcount:
   \   000000C0                      DS8 4
   \   000000C4                      REQUIRE `?<Initializer for automsgcount>`
   \                     time_zone:
   \   000000C4                      DS8 4
   \   000000C8                      REQUIRE `?<Initializer for time_zone>`
   \                     showAwayIdle:
   \   000000C8                      DS8 4
   \   000000CC                      REQUIRE `?<Initializer for showAwayIdle>`
   \                     auto_x:
   \   000000CC                      DS8 4
   \   000000D0                      REQUIRE `?<Initializer for auto_x>`
   \                     auto_y:
   \   000000D0                      DS8 4
   \   000000D4                      REQUIRE `?<Initializer for auto_y>`
   \                     Reset_timer:
   \   000000D4                      DS8 4
   \   000000D8                      REQUIRE `?<Initializer for Reset_timer>`
   \                     status_1:
   \   000000D8                      DS8 4
   \   000000DC                      REQUIRE `?<Initializer for status_1>`
   \                     status_2:
   \   000000DC                      DS8 4
   \   000000E0                      REQUIRE `?<Initializer for status_2>`
   \                     status_3:
   \   000000E0                      DS8 4
   \   000000E4                      REQUIRE `?<Initializer for status_3>`
   \                     status_4:
   \   000000E4                      DS8 4
   \   000000E8                      REQUIRE `?<Initializer for status_4>`
    851          unsigned int status_5;    
   \                     status_5:
   \   000000E8                      DS8 4
   \   000000EC                      REQUIRE `?<Initializer for status_5>`
    852              
    853          
    854          //---------------  SCREEN SAVER ---------------//
    855          
    856          #ifdef NEWSGOLD
    857          unsigned int screenSaverTime;
   \                     screenSaverTime:
   \   000000EC                      DS8 4
   \   000000F0                      REQUIRE `?<Initializer for screenSaverTime>`
    858          int isScreenSaverEna;
   \                     isScreenSaverEna:
   \   000000F0                      DS8 4
   \   000000F4                      REQUIRE `?<Initializer for isScreenSaverEna>`
    859          #endif
    860          
    861          //------------ popup message -----------------//
    862          
    863          int PopupShow;// = 3;
   \                     PopupShow:
   \   000000F4                      DS8 4
   \   000000F8                      REQUIRE `?<Initializer for PopupShow>`
    864          char PopupMsgString[9];//="%s";
    865          char PopupOnlineString[9];//=">%s<";  
    866          unsigned int PopupFont;//=FONT_SMALL;
   \                     PopupFont:
   \   000000F8                      DS8 4
   \   000000FC                      REQUIRE `?<Initializer for PopupFont>`
    867          char PopupBGCl[4];
    868          char PopupOnlineCl[4];    
    869          char PopupMsgCl[4];
    870          
    871          
    872          //------------ CL HEADER SETTING -------------//
    873          
    874          int TIME_OR_MSG;
   \                     TIME_OR_MSG:
   \   000000FC                      DS8 4
   \   00000100                      REQUIRE `?<Initializer for TIME_OR_MSG>`
    875          int ShowTraff;
   \                     ShowTraff:
   \   00000100                      DS8 4
   \   00000104                      REQUIRE `?<Initializer for ShowTraff>`
    876          int isShowCont;
   \                     isShowCont:
   \   00000104                      DS8 4
   \   00000108                      REQUIRE `?<Initializer for isShowCont>`
    877          int isShowUnread;
   \                     isShowUnread:
   \   00000108                      DS8 4
   \   0000010C                      REQUIRE `?<Initializer for isShowUnread>`
    878          int isShowI;
   \                     isShowI:
   \   0000010C                      DS8 4
   \   00000110                      REQUIRE `?<Initializer for isShowI>`
    879          int isShowV;
   \                     isShowV:
   \   00000110                      DS8 4
   \   00000114                      REQUIRE `?<Initializer for isShowV>`
    880          int isShowS;
   \                     isShowS:
   \   00000114                      DS8 4
   \   00000118                      REQUIRE `?<Initializer for isShowS>`
    881          int isShowR;
   \                     isShowR:
   \   00000118                      DS8 4
   \   0000011C                      REQUIRE `?<Initializer for isShowR>`
    882          int isShowA;
   \                     isShowA:
   \   0000011C                      DS8 4
   \   00000120                      REQUIRE `?<Initializer for isShowA>`
    883          int isShowTmXs;
   \                     isShowTmXs:
   \   00000120                      DS8 4
   \   00000124                      REQUIRE `?<Initializer for isShowTmXs>`
    884          int isShowTime;
   \                     isShowTime:
   \   00000124                      DS8 4
   \   00000128                      REQUIRE `?<Initializer for isShowTime>`
    885          int isShowBat;
   \                     isShowBat:
   \   00000128                      DS8 4
   \   0000012C                      REQUIRE `?<Initializer for isShowBat>`
    886          
    887          
    888          //-------------  EXTRA CONFIG ---------------//
    889          
    890          unsigned int Vibra_cc;
   \                     Vibra_cc:
   \   0000012C                      DS8 4
   \   00000130                      REQUIRE `?<Initializer for Vibra_cc>`
    891          #ifdef NEWSGOLD
    892          char playing[13];
    893          char CsmAdr[9];
    894          #endif
    895          int show_send_info;  
   \                     show_send_info:
   \   00000130                      DS8 4
   \   00000134                      REQUIRE `?<Initializer for show_send_info>`
    896          int isLogStatusChange;
   \                     isLogStatusChange:
   \   00000134                      DS8 4
   \   00000138                      REQUIRE `?<Initializer for isLogStatusChange>`
    897          int IsShowLoopback;//Show Loopback contact in CL
   \                     IsShowLoopback:
   \   00000138                      DS8 4
   \   0000013C                      REQUIRE `?<Initializer for IsShowLoopback>`
    898          
    899          
    900          
    901          char ignor_list[256];
    902          //char myName[256];
    903          char I_str[32];
    904          
    905          //------------ ORIGINAL SETTING -------------//  
    906          
    907          unsigned int UIN;
   \                     UIN:
   \   0000013C                      DS8 4
   \   00000140                      REQUIRE `?<Initializer for UIN>`
    908          char PASS[9];
    909          
    910          int VIBR_ON_CONNECT;
   \                     VIBR_ON_CONNECT:
   \   00000140                      DS8 4
   \   00000144                      REQUIRE `?<Initializer for VIBR_ON_CONNECT>`
    911          int SHOW_ACTIVE;
   \                     SHOW_ACTIVE:
   \   00000144                      DS8 4
   \   00000148                      REQUIRE `?<Initializer for SHOW_ACTIVE>`
    912          int VIBR_TYPE;
   \                     VIBR_TYPE:
   \   00000148                      DS8 4
   \   0000014C                      REQUIRE `?<Initializer for VIBR_TYPE>`
    913          int DEVELOP_IF;
   \                     DEVELOP_IF:
   \   0000014C                      DS8 4
   \   00000150                      REQUIRE `?<Initializer for DEVELOP_IF>`
    914          
    915          int LOG_ALL;
   \                     LOG_ALL:
   \   00000150                      DS8 4
   \   00000154                      REQUIRE `?<Initializer for LOG_ALL>`
    916          int LOG_STATCH;
   \                     LOG_STATCH:
   \   00000154                      DS8 4
   \   00000158                      REQUIRE `?<Initializer for LOG_STATCH>`
    917          int FIRST_LETTER;
   \                     FIRST_LETTER:
   \   00000158                      DS8 4
   \   0000015C                      REQUIRE `?<Initializer for FIRST_LETTER>`
    918          int SORT_CLIST;
   \                     SORT_CLIST:
   \   0000015C                      DS8 4
   \   00000160                      REQUIRE `?<Initializer for SORT_CLIST>`
    919          
    920          
    921          int HISTORY_TYPE;
   \                     HISTORY_TYPE:
   \   00000160                      DS8 4
   \   00000164                      REQUIRE `?<Initializer for HISTORY_TYPE>`
    922          unsigned int vibraPower;
   \                     vibraPower:
   \   00000164                      DS8 4
   \   00000168                      REQUIRE `?<Initializer for vibraPower>`
    923          
    924          unsigned int IDLEICON_X;
   \                     IDLEICON_X:
   \   00000168                      DS8 4
   \   0000016C                      REQUIRE `?<Initializer for IDLEICON_X>`
    925          unsigned int IDLEICON_Y;
   \                     IDLEICON_Y:
   \   0000016C                      DS8 4
   \   00000170                      REQUIRE `?<Initializer for IDLEICON_Y>`
    926            
    927          unsigned int I_COLOR;
   \                     I_COLOR:
   \   00000170                      DS8 4
   \   00000174                      REQUIRE `?<Initializer for I_COLOR>`
    928          unsigned int TO_COLOR;
   \                     TO_COLOR:
   \   00000174                      DS8 4
   \   00000178                      REQUIRE `?<Initializer for TO_COLOR>`
    929          unsigned int X_COLOR;
   \                     X_COLOR:
   \   00000178                      DS8 4
   \   0000017C                      REQUIRE `?<Initializer for X_COLOR>`
    930          unsigned int O_I_COLOR;
   \                     O_I_COLOR:
   \   0000017C                      DS8 4
   \   00000180                      REQUIRE `?<Initializer for O_I_COLOR>`
    931          unsigned int O_TO_COLOR;
   \                     O_TO_COLOR:
   \   00000180                      DS8 4
   \   00000184                      REQUIRE `?<Initializer for O_TO_COLOR>`
    932          unsigned int O_X_COLOR;
   \                     O_X_COLOR:
   \   00000184                      DS8 4
   \   00000188                      REQUIRE `?<Initializer for O_X_COLOR>`
    933            
    934          unsigned int ED_FONT_SIZE;
   \                     ED_FONT_SIZE:
   \   00000188                      DS8 4
   \   0000018C                      REQUIRE `?<Initializer for ED_FONT_SIZE>`
    935          unsigned int ED_H_FONT_SIZE;
   \                     ED_H_FONT_SIZE:
   \   0000018C                      DS8 4
   \   00000190                      REQUIRE `?<Initializer for ED_H_FONT_SIZE>`
    936          unsigned int ED_X_FONT_SIZE;
   \                     ED_X_FONT_SIZE:
   \   00000190                      DS8 4
   \   00000194                      REQUIRE `?<Initializer for ED_X_FONT_SIZE>`
    937          unsigned int O_ED_FONT_SIZE;
   \                     O_ED_FONT_SIZE:
   \   00000194                      DS8 4
   \   00000198                      REQUIRE `?<Initializer for O_ED_FONT_SIZE>`
    938          unsigned int O_ED_H_FONT_SIZE;
   \                     O_ED_H_FONT_SIZE:
   \   00000198                      DS8 4
   \   0000019C                      REQUIRE `?<Initializer for O_ED_H_FONT_SIZE>`
    939          unsigned int O_ED_X_FONT_SIZE;
   \                     O_ED_X_FONT_SIZE:
   \   0000019C                      DS8 4
   \   000001A0                      REQUIRE `?<Initializer for O_ED_X_FONT_SIZE>`
    940            
    941          unsigned int ACK_COLOR;
   \                     ACK_COLOR:
   \   000001A0                      DS8 4
   \   000001A4                      REQUIRE `?<Initializer for ACK_COLOR>`
    942          unsigned int UNACK_COLOR;
   \                     UNACK_COLOR:
   \   000001A4                      DS8 4
   \   000001A8                      REQUIRE `?<Initializer for UNACK_COLOR>`
    943            
    944          int ENA_AUTO_XTXT;
   \                     ENA_AUTO_XTXT:
   \   000001A8                      DS8 4
   \   000001AC                      REQUIRE `?<Initializer for ENA_AUTO_XTXT>`
    945          int NOT_LOG_SAME_XTXT;
   \                     NOT_LOG_SAME_XTXT:
   \   000001AC                      DS8 4
   \   000001B0                      REQUIRE `?<Initializer for NOT_LOG_SAME_XTXT>`
    946          int LOG_XTXT;
   \                     LOG_XTXT:
   \   000001B0                      DS8 4
   \   000001B4                      REQUIRE `?<Initializer for LOG_XTXT>`
    947          int HISTORY_BUFFER;  
   \                     HISTORY_BUFFER:
   \   000001B4                      DS8 4
   \   000001B8                      REQUIRE `?<Initializer for HISTORY_BUFFER>`
    948            
    949          //Illumination by BoBa 19.04.2007
    950          ///////////
    951          unsigned int ILL_DISP_RECV;
   \                     ILL_DISP_RECV:
   \   000001B8                      DS8 4
   \   000001BC                      REQUIRE `?<Initializer for ILL_DISP_RECV>`
    952          unsigned int ILL_KEYS_RECV;
   \                     ILL_KEYS_RECV:
   \   000001BC                      DS8 4
   \   000001C0                      REQUIRE `?<Initializer for ILL_KEYS_RECV>`
    953          unsigned int ILL_RECV_TMR;
   \                     ILL_RECV_TMR:
   \   000001C0                      DS8 4
   \   000001C4                      REQUIRE `?<Initializer for ILL_RECV_TMR>`
    954          unsigned int ILL_DISP_SEND;
   \                     ILL_DISP_SEND:
   \   000001C4                      DS8 4
   \   000001C8                      REQUIRE `?<Initializer for ILL_DISP_SEND>`
    955          unsigned int ILL_KEYS_SEND;
   \                     ILL_KEYS_SEND:
   \   000001C8                      DS8 4
   \   000001CC                      REQUIRE `?<Initializer for ILL_KEYS_SEND>`
    956          unsigned int ILL_SEND_TMR;
   \                     ILL_SEND_TMR:
   \   000001CC                      DS8 4
   \   000001D0                      REQUIRE `?<Initializer for ILL_SEND_TMR>`
    957          unsigned int ILL_SEND_FADE;
   \                     ILL_SEND_FADE:
   \   000001D0                      DS8 4
   \   000001D4                      REQUIRE `?<Initializer for ILL_SEND_FADE>`
    958          unsigned int ILL_RECV_FADE;
   \                     ILL_RECV_FADE:
   \   000001D4                      DS8 4
   \   000001D8                      REQUIRE `?<Initializer for ILL_RECV_FADE>`
    959          unsigned int ILL_OFF_FADE;
   \                     ILL_OFF_FADE:
   \   000001D8                      DS8 4
   \   000001DC                      REQUIRE `?<Initializer for ILL_OFF_FADE>`
    960          
    961          char sndStartup[64];
    962          char sndSrvMsg[64];
    963          char sndGlobal[64];
    964          char sndGlobal2[64];
    965          char sndMsg[64];
    966          char sndMsgSent[64];
    967          unsigned int sndVolume;
   \                     sndVolume:
   \   000001DC                      DS8 4
   \   000001E0                      REQUIRE `?<Initializer for sndVolume>`
    968            
    969          char SMILE_FILE[64];
    970          char TEMPLATES_PATH[64];
    971          char ICON_PATH[64];
    972          char SMILE_PATH[64];
    973          char XSTATUSES_PATH[64];
    974          char HIST_PATH[64];
    975          char NATICQ_HOST[128];
    976          unsigned int NATICQ_PORT;
   \                     NATICQ_PORT:
   \   000001E0                      DS8 4
   \   000001E4                      REQUIRE `?<Initializer for NATICQ_PORT>`
    977          unsigned int RECONNECT_TIME;
   \                     RECONNECT_TIME:
   \   000001E4                      DS8 4
   \   000001E8                      REQUIRE `?<Initializer for RECONNECT_TIME>`
   \                     fontColor:
   \   000001E8                      DS8 1
   \   000001E9                      REQUIRE `?<Initializer for fontColor>`
   \                     bgrColor:
   \   000001E9                      DS8 1
   \   000001EA                      REQUIRE `?<Initializer for bgrColor>`
   \   000001EA                      DS8 2
   \                     SmBGcolor:
   \   000001EC                      DS8 4
   \   000001F0                      REQUIRE `?<Initializer for SmBGcolor>`
   \                     SmSelectColor:
   \   000001F0                      DS8 4
   \   000001F4                      REQUIRE `?<Initializer for SmSelectColor>`
   \                     SmFontColor:
   \   000001F4                      DS8 4
   \   000001F8                      REQUIRE `?<Initializer for SmFontColor>`
   \                     PopupBGCl:
   \   000001F8                      DS8 4
   \   000001FC                      REQUIRE `?<Initializer for PopupBGCl>`
   \                     PopupOnlineCl:
   \   000001FC                      DS8 4
   \   00000200                      REQUIRE `?<Initializer for PopupOnlineCl>`
   \                     PopupMsgCl:
   \   00000200                      DS8 4
   \   00000204                      REQUIRE `?<Initializer for PopupMsgCl>`
    978          
    979          
    980          
    981          //--------------------------------------------------------//
    982          //                      INIT CONFIGS                      //
    983          //--------------------------------------------------------//
    984          
    985          char per_s[]="%s";
   \                     per_s:
   \   00000204                      DS8 3
   \   00000207                      REQUIRE `?<Initializer for per_s>`
   \   00000207                      DS8 1
   \                     sndMsg2:
   \   00000208                      DS8 64
   \   00000248                      REQUIRE `?<Initializer for sndMsg2>`
   \                     pingsnd:
   \   00000248                      DS8 64
   \   00000288                      REQUIRE `?<Initializer for pingsnd>`
   \                     fontpath:
   \   00000288                      DS8 64
   \   000002C8                      REQUIRE `?<Initializer for fontpath>`
   \                     awayHelloMsg:
   \   000002C8                      DS8 24
   \   000002E0                      REQUIRE `?<Initializer for awayHelloMsg>`
   \                     awayMsg:
   \   000002E0                      DS8 256
   \   000003E0                      REQUIRE `?<Initializer for awayMsg>`
   \                     PopupMsgString:
   \   000003E0                      DS8 12
   \   000003EC                      REQUIRE `?<Initializer for PopupMsgString>`
   \                     PopupOnlineString:
   \   000003EC                      DS8 12
   \   000003F8                      REQUIRE `?<Initializer for PopupOnlineString>`
   \                     playing:
   \   000003F8                      DS8 16
   \   00000408                      REQUIRE `?<Initializer for playing>`
   \                     CsmAdr:
   \   00000408                      DS8 12
   \   00000414                      REQUIRE `?<Initializer for CsmAdr>`
   \                     ignor_list:
   \   00000414                      DS8 256
   \   00000514                      REQUIRE `?<Initializer for ignor_list>`
   \                     I_str:
   \   00000514                      DS8 32
   \   00000534                      REQUIRE `?<Initializer for I_str>`
   \                     PASS:
   \   00000534                      DS8 12
   \   00000540                      REQUIRE `?<Initializer for PASS>`
   \                     sndStartup:
   \   00000540                      DS8 64
   \   00000580                      REQUIRE `?<Initializer for sndStartup>`
   \                     sndSrvMsg:
   \   00000580                      DS8 64
   \   000005C0                      REQUIRE `?<Initializer for sndSrvMsg>`
   \                     sndGlobal:
   \   000005C0                      DS8 64
   \   00000600                      REQUIRE `?<Initializer for sndGlobal>`
   \                     sndGlobal2:
   \   00000600                      DS8 64
   \   00000640                      REQUIRE `?<Initializer for sndGlobal2>`
   \                     sndMsg:
   \   00000640                      DS8 64
   \   00000680                      REQUIRE `?<Initializer for sndMsg>`
   \                     sndMsgSent:
   \   00000680                      DS8 64
   \   000006C0                      REQUIRE `?<Initializer for sndMsgSent>`
   \                     SMILE_FILE:
   \   000006C0                      DS8 64
   \   00000700                      REQUIRE `?<Initializer for SMILE_FILE>`
   \                     TEMPLATES_PATH:
   \   00000700                      DS8 64
   \   00000740                      REQUIRE `?<Initializer for TEMPLATES_PATH>`
   \                     ICON_PATH:
   \   00000740                      DS8 64
   \   00000780                      REQUIRE `?<Initializer for ICON_PATH>`
   \                     SMILE_PATH:
   \   00000780                      DS8 64
   \   000007C0                      REQUIRE `?<Initializer for SMILE_PATH>`
   \                     XSTATUSES_PATH:
   \   000007C0                      DS8 64
   \   00000800                      REQUIRE `?<Initializer for XSTATUSES_PATH>`
   \                     HIST_PATH:
   \   00000800                      DS8 64
   \   00000840                      REQUIRE `?<Initializer for HIST_PATH>`
   \                     NATICQ_HOST:
   \   00000840                      DS8 128
   \   000008C0                      REQUIRE `?<Initializer for NATICQ_HOST>`
    986          
    987          char suc_config_name[64];
   \                     suc_config_name:
   \   000008C0                      DS8 64
   \   00000900                      REQUIRE `?<Initializer for suc_config_name>`
    988          char suc_config_name_mod[64];
   \                     suc_config_name_mod:
   \   00000900                      DS8 64
   \   00000940                      REQUIRE `?<Initializer for suc_config_name_mod>`
    989          

   \                                 In segment CODE, align 4, keep-with-next
    990          int UpdateConfig()
    991          { 
   \                     UpdateConfig:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    992            int myConfigSize = sizeof(myConfig);
    993            myConfig* myConf = (myConfig*)malloc(myConfigSize);
    994            int newCfgFile;
    995            int myConfigModSize = sizeof(myConfigMod);
    996            myConfigMod* myConfMod = (myConfigMod*)malloc(myConfigModSize);
    997            int newCfgModFile;// = InitConfig(myConfMod, myConfigModSize, "NATICQMod",disk);
    998            
    999          #ifdef kluchnik
   1000            newCfgFile= InitConfig(myConf, myConfigSize, "NATICQ_2747093",4);
   1001            newCfgModFile = InitConfig(myConfMod, myConfigModSize, "NATICQMod_2747093",4);  
   1002            sprintf(suc_config_name,"4:\\zbin\\etc\\NATICQ_2747093.bcfg");      
   1003            sprintf(suc_config_name_mod,"4:\\zbin\\etc\\NATICQMod_2747093.bcfg");      
   1004          #else
   1005            if((newCfgFile= InitConfig(myConf, myConfigSize, "NATICQ",4))!=-1)
   \   00000004   DC679FE5           LDR      R6,??UpdateConfig_0  ;; `?<Constant "4:\\\\zbin\\\\etc\\\\NATICQ.bcfg">`
   \   00000008   DC579FE5           LDR      R5,??UpdateConfig_0+0x4  ;; tm_status_1
   \   0000000C   4400A0E3           MOV      R0,#+68
   \   00000010   4C0D80E3           ORR      R0,R0,#0x1300
   \   00000014   140000EF           SWI      +20
   \   00000018   0090A0E1           MOV      R9,R0
   \   0000001C   4CB0A0E3           MOV      R11,#+76
   \   00000020   C8BD8BE3           ORR      R11,R11,#0x3200
   \   00000024   0B00A0E1           MOV      R0,R11
   \   00000028   140000EF           SWI      +20
   \   0000002C   0040A0E1           MOV      R4,R0
   \   00000030   0430A0E3           MOV      R3,#+4
   \   00000034   642086E2           ADD      R2,R6,#+100
   \   00000038   4D1D83E3           ORR      R1,R3,#0x1340
   \   0000003C   0900A0E1           MOV      R0,R9
   \   00000040   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000044   0080A0E1           MOV      R8,R0
   \   00000048   0070E0E3           MVN      R7,#+0
   \   0000004C   070058E1           CMP      R8,R7
   1006            { 
   1007              sprintf(suc_config_name,"4:\\zbin\\etc\\NATICQ.bcfg"); 
   \   00000050   0610A011           MOVNE    R1,R6
   \   00000054   0700001A           BNE      ??UpdateConfig_1
   1008            }
   1009            else
   1010            {
   1011               newCfgFile= InitConfig(myConf, myConfigSize, "NATICQ",0);
   \   00000058   0030A0E3           MOV      R3,#+0
   \   0000005C   642086E2           ADD      R2,R6,#+100
   \   00000060   4410A0E3           MOV      R1,#+68
   \   00000064   4C1D81E3           ORR      R1,R1,#0x1300
   \   00000068   0900A0E1           MOV      R0,R9
   \   0000006C   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000070   0080A0E1           MOV      R8,R0
   1012               sprintf(suc_config_name,"0:\\zbin\\etc\\NATICQ.bcfg");
   \   00000074   6C1086E2           ADD      R1,R6,#+108
   \                     ??UpdateConfig_1:
   \   00000078   8C0E85E2           ADD      R0,R5,#+2240
   \   0000007C   160000EF           SWI      +22
   1013            }
   1014            
   1015            if((newCfgModFile = InitConfig(myConfMod, myConfigModSize, "NATICQMod",4))!=-1)
   \   00000080   0430A0E3           MOV      R3,#+4
   \   00000084   A02086E2           ADD      R2,R6,#+160
   \   00000088   0B10A0E1           MOV      R1,R11
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000094   00A0A0E1           MOV      R10,R0
   \   00000098   07005AE1           CMP      R10,R7
   1016            {
   1017              sprintf(suc_config_name_mod,"4:\\zbin\\etc\\NATICQMod.bcfg");      
   \   0000009C   84108612           ADDNE    R1,R6,#+132
   \   000000A0   0600001A           BNE      ??UpdateConfig_2
   1018            }
   1019            else
   1020            {
   1021               newCfgModFile = InitConfig(myConfMod, myConfigModSize, "NATICQMod",0);
   \   000000A4   0030A0E3           MOV      R3,#+0
   \   000000A8   A02086E2           ADD      R2,R6,#+160
   \   000000AC   0B10A0E1           MOV      R1,R11
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   ........           _BLF     InitConfig,??InitConfig??rA
   \   000000B8   00A0A0E1           MOV      R10,R0
   1022               sprintf(suc_config_name_mod,"0:\\zbin\\etc\\NATICQMod.bcfg");      
   \   000000BC   2C1086E2           ADD      R1,R6,#+44
   \                     ??UpdateConfig_2:
   \   000000C0   900E85E2           ADD      R0,R5,#+2304
   \   000000C4   160000EF           SWI      +22
   1023            }
   1024          #endif
   1025          
   1026          if(get_file_size(suc_config_name_mod)!=sizeof(myConfigMod) || get_file_size(suc_config_name)!=sizeof(myConfig))
   \   000000C8   900E85E2           ADD      R0,R5,#+2304
   \   000000CC   ........           _BLF     get_file_size,??get_file_size??rA
   \   000000D0   0B0050E1           CMP      R0,R11
   \   000000D4   0500001A           BNE      ??UpdateConfig_3
   \   000000D8   8C0E85E2           ADD      R0,R5,#+2240
   \   000000DC   ........           _BLF     get_file_size,??get_file_size??rA
   \   000000E0   4410A0E3           MOV      R1,#+68
   \   000000E4   4C1D81E3           ORR      R1,R1,#0x1300
   \   000000E8   010050E1           CMP      R0,R1
   \   000000EC   0300000A           BEQ      ??UpdateConfig_4
   1027          {
   1028             LockSched();
   \                     ??UpdateConfig_3:
   \   000000F0   460100EF           SWI      +326
   1029             ShowMSG(2,(int)"Config mod not correct!!!");
   \   000000F4   481086E2           ADD      R1,R6,#+72
   \   000000F8   0200A0E3           MOV      R0,#+2
   \   000000FC   B50100EA           B        ??UpdateConfig_5
   1030             UnlockSched();
   1031           //  void ElfKiller(void);
   1032             //SUBPROC((void *)ElfKiller);
   1033             return 1;
   1034          }
   1035            
   1036          if(newCfgFile!=-1 && newCfgModFile!=-1)//Если конфиги есть
   \                     ??UpdateConfig_4:
   \   00000100   070058E1           CMP      R8,R7
   \   00000104   07005A11           CMPNE    R10,R7
   \   00000108   AF01000A           BEQ      ??UpdateConfig_6
   \   0000010C   FF0E4BE2           SUB      R0,R11,#+4080
   \   00000110   046080E0           ADD      R6,R0,R4
   \   00000114   8C0596E5           LDR      R0,[R6, #+1420]
   1037          {
   1038            
   1039          //-------------------- MOD CONFIG ---------------------//
   1040            
   1041          //-------------- setting interface ---------------//
   1042            
   1043            TIME_OR_MSG=myConfMod->TIME_OR_MSG;  
   1044            IsShowLoopback=myConfMod->IsShowLoopback;//Show Loopback contact in CL  
   1045            SHOW_ACTIVE=myConfMod->SHOW_ACTIVE;
   \   00000118   847084E2           ADD      R7,R4,#+132
   \   0000011C   FC0085E5           STR      R0,[R5, #+252]
   \   00000120   280D96E5           LDR      R0,[R6, #+3368]
   1046            HISTORY_SAVE_TYPE=myConfMod->HISTORY_SAVE_TYPE;
   1047            
   1048          //-------------- log status change ---------------//
   1049            
   1050            isLogStatusChange=myConfMod->isLogStatusChange;
   1051            
   1052            
   1053          //-------------- setting png font ----------------//
   1054            
   1055            sprintf(fontpath,per_s,myConfMod->fontpath);
   \   00000124   818FA0E3           MOV      R8,#+516
   \   00000128   380185E5           STR      R0,[R5, #+312]
   \   0000012C   700097E5           LDR      R0,[R7, #+112]
   \   00000130   440185E5           STR      R0,[R5, #+324]
   \   00000134   E00097E5           LDR      R0,[R7, #+224]
   \   00000138   2C0085E5           STR      R0,[R5, #+44]
   \   0000013C   B80C96E5           LDR      R0,[R6, #+3256]
   \   00000140   340185E5           STR      R0,[R5, #+308]
   \   00000144   860E41E2           SUB      R0,R1,#+2144
   \   00000148   042080E0           ADD      R2,R0,R4
   \   0000014C   051088E0           ADD      R1,R8,R5
   \   00000150   A20F85E2           ADD      R0,R5,#+648
   \   00000154   160000EF           SWI      +22
   1056            fonto=myConfMod->fonto;
   \   00000158   300A97E5           LDR      R0,[R7, #+2608]
   \   0000015C   700085E5           STR      R0,[R5, #+112]
   1057            spaco1=myConfMod->spaco1;
   \   00000160   300C97E5           LDR      R0,[R7, #+3120]
   \   00000164   880085E5           STR      R0,[R5, #+136]
   1058            spaco2=myConfMod->spaco1;//так нада
   \   00000168   300C97E5           LDR      R0,[R7, #+3120]
   \   0000016C   8C0085E5           STR      R0,[R5, #+140]
   1059            
   1060            
   1061          //---------- Цвет для системного шрифта ----------//
   1062            
   1063            for(int i=0;i<4;i++)
   \   00000170   0000A0E3           MOV      R0,#+0
   1064            {
   1065              fontColor[i]=myConfMod->fontColor[i];
   \                     ??UpdateConfig_7:
   \   00000174   042080E0           ADD      R2,R0,R4
   \   00000178   B42BD2E5           LDRB     R2,[R2, #+2996]
   \   0000017C   051080E0           ADD      R1,R0,R5
   \   00000180   E821C1E5           STRB     R2,[R1, #+488]
   1066              bgrColor[i]=myConfMod->bgrColor[i];
   \   00000184   042080E0           ADD      R2,R0,R4
   \   00000188   E42BD2E5           LDRB     R2,[R2, #+3044]
   1067            }
   \   0000018C   010080E2           ADD      R0,R0,#+1
   \   00000190   040050E3           CMP      R0,#+4
   \   00000194   E921C1E5           STRB     R2,[R1, #+489]
   \   00000198   F5FFFFBA           BLT      ??UpdateConfig_7
   1068            
   1069            Is_Unread_On=myConfMod->Is_Unread_On;
   \   0000019C   000F97E5           LDR      R0,[R7, #+3840]
   \   000001A0   42AD84E2           ADD      R10,R4,#+4224
   \   000001A4   A80085E5           STR      R0,[R5, #+168]
   \   000001A8   40029AE5           LDR      R0,[R10, #+576]
   1070            
   1071            
   1072          //------------- automessage setting --------------//
   1073            
   1074            AUTO_ENGADE=myConfMod->AUTO_ENGADE;//time to away
   1075            isAutoStatusOn=myConfMod->isAutoStatusOn;
   1076            automsgcount=myConfMod->automsgcount;
   1077            Auto_Status=myConfMod->Auto_Status;//Включен автостатус или нет
   1078            time_zone=myConfMod->time_zone;
   1079            auto_x=myConfMod->auto_x;
   1080            auto_y=myConfMod->auto_y;
   1081            showAwayIdle=myConfMod->showAwayIdle;
   1082            sprintf(awayHelloMsg,per_s,myConfMod->awayHelloMsg);//hello msg
   \   000001AC   051088E0           ADD      R1,R8,R5
   \   000001B0   BC0085E5           STR      R0,[R5, #+188]
   \   000001B4   70009AE5           LDR      R0,[R10, #+112]
   \   000001B8   B80085E5           STR      R0,[R5, #+184]
   \   000001BC   70029AE5           LDR      R0,[R10, #+624]
   \   000001C0   C00085E5           STR      R0,[R5, #+192]
   \   000001C4   00009AE5           LDR      R0,[R10, #+0]
   \   000001C8   B40085E5           STR      R0,[R5, #+180]
   \   000001CC   A0029AE5           LDR      R0,[R10, #+672]
   \   000001D0   C40085E5           STR      R0,[R5, #+196]
   \   000001D4   40099AE5           LDR      R0,[R10, #+2368]
   \   000001D8   CC0085E5           STR      R0,[R5, #+204]
   \   000001DC   44099AE5           LDR      R0,[R10, #+2372]
   \   000001E0   D00085E5           STR      R0,[R5, #+208]
   \   000001E4   D0089AE5           LDR      R0,[R10, #+2256]
   \   000001E8   C80085E5           STR      R0,[R5, #+200]
   \   000001EC   7000A0E3           MOV      R0,#+112
   \   000001F0   5C0D80E3           ORR      R0,R0,#0x1700
   \   000001F4   042080E0           ADD      R2,R0,R4
   \   000001F8   B20F85E2           ADD      R0,R5,#+712
   \   000001FC   160000EF           SWI      +22
   1083            snprintf(awayMsg,256,per_s,myConfMod->awayMsg);//message
   \   00000200   B400A0E3           MOV      R0,#+180
   \   00000204   5C0D80E3           ORR      R0,R0,#0x1700
   \   00000208   043080E0           ADD      R3,R0,R4
   \   0000020C   052088E0           ADD      R2,R8,R5
   \   00000210   401FA0E3           MOV      R1,#+256
   \   00000214   B80F85E2           ADD      R0,R5,#+736
   \   00000218   1B0100EF           SWI      +283
   1084            Reset_timer=myConfMod->Reset_timer;//reset away timer on send message or key down
   \   0000021C   60089AE5           LDR      R0,[R10, #+2144]
   1085            
   1086          
   1087          //------------- AUTO CHANGE STATUS ------------//
   1088          
   1089            tm_status_1=myConfMod->tm_status_1;
   1090            status_1=myConfMod->status_1;
   1091            
   1092            tm_status_2=myConfMod->tm_status_2;
   1093            status_2=myConfMod->status_2;
   1094            
   1095            tm_status_3=myConfMod->tm_status_3;
   1096            status_3=myConfMod->status_3;
   1097            
   1098            tm_status_4=myConfMod->tm_status_4;
   1099            status_4=myConfMod->status_4;
   1100            
   1101            tm_status_5=myConfMod->tm_status_5;
   1102            status_5=myConfMod->status_5;    
   1103          
   1104          
   1105          //------------- Online time on idle --------------//
   1106            
   1107            onlineTime_x=myConfMod->onlineTime_x;
   1108            onlineTime_y=myConfMod->onlineTime_y;
   1109            Pause_Time=myConfMod->Pause_Time;
   1110          
   1111            
   1112          //----------------- setting ping -----------------//
   1113            
   1114            Ping_X=myConfMod->Ping_X;
   1115            Ping_Y=myConfMod->Ping_Y;
   1116            sprintf(pingsnd,per_s,myConfMod->pingsnd);
   \   00000220   E32F84E2           ADD      R2,R4,#+908
   \   00000224   D40085E5           STR      R0,[R5, #+212]
   \   00000228   1C00A0E3           MOV      R0,#+28
   \   0000022C   700D80E3           ORR      R0,R0,#0x1C00
   \   00000230   040080E0           ADD      R0,R0,R4
   \   00000234   030090E8           LDM      R0,{R0,R1}
   \   00000238   030085E8           STM      R5,{R0,R1}
   \   0000023C   CC099AE5           LDR      R0,[R10, #+2508]
   \   00000240   D80085E5           STR      R0,[R5, #+216]
   \   00000244   2000A0E3           MOV      R0,#+32
   \   00000248   780D80E3           ORR      R0,R0,#0x1E00
   \   0000024C   040080E0           ADD      R0,R0,R4
   \   00000250   030090E8           LDM      R0,{R0,R1}
   \   00000254   080085E5           STR      R0,[R5, #+8]
   \   00000258   0C1085E5           STR      R1,[R5, #+12]
   \   0000025C   D00B9AE5           LDR      R0,[R10, #+3024]
   \   00000260   DC0085E5           STR      R0,[R5, #+220]
   \   00000264   2400A0E3           MOV      R0,#+36
   \   00000268   800D80E3           ORR      R0,R0,#0x2000
   \   0000026C   040080E0           ADD      R0,R0,R4
   \   00000270   030090E8           LDM      R0,{R0,R1}
   \   00000274   100085E5           STR      R0,[R5, #+16]
   \   00000278   141085E5           STR      R1,[R5, #+20]
   \   0000027C   D40D9AE5           LDR      R0,[R10, #+3540]
   \   00000280   E00085E5           STR      R0,[R5, #+224]
   \   00000284   2800A0E3           MOV      R0,#+40
   \   00000288   880D80E3           ORR      R0,R0,#0x2200
   \   0000028C   040080E0           ADD      R0,R0,R4
   \   00000290   030090E8           LDM      R0,{R0,R1}
   \   00000294   180085E5           STR      R0,[R5, #+24]
   \   00000298   1C1085E5           STR      R1,[R5, #+28]
   \   0000029C   D80F9AE5           LDR      R0,[R10, #+4056]
   \   000002A0   E40085E5           STR      R0,[R5, #+228]
   \   000002A4   E20E4BE2           SUB      R0,R11,#+3616
   \   000002A8   040080E0           ADD      R0,R0,R4
   \   000002AC   030090E8           LDM      R0,{R0,R1}
   \   000002B0   200085E5           STR      R0,[R5, #+32]
   \   000002B4   241085E5           STR      R1,[R5, #+36]
   \   000002B8   000096E5           LDR      R0,[R6, #+0]
   \   000002BC   051088E0           ADD      R1,R8,R5
   \   000002C0   E80085E5           STR      R0,[R5, #+232]
   \   000002C4   A00D97E5           LDR      R0,[R7, #+3488]
   \   000002C8   900085E5           STR      R0,[R5, #+144]
   \   000002CC   A40D97E5           LDR      R0,[R7, #+3492]
   \   000002D0   940085E5           STR      R0,[R5, #+148]
   \   000002D4   D40D97E5           LDR      R0,[R7, #+3540]
   \   000002D8   980085E5           STR      R0,[R5, #+152]
   \   000002DC   9C0E97E5           LDR      R0,[R7, #+3740]
   \   000002E0   9C0085E5           STR      R0,[R5, #+156]
   \   000002E4   A00E97E5           LDR      R0,[R7, #+3744]
   \   000002E8   A00085E5           STR      R0,[R5, #+160]
   \   000002EC   920F85E2           ADD      R0,R5,#+584
   \   000002F0   160000EF           SWI      +22
   1117            ping_time_config=myConfMod->ping_time_config;
   \   000002F4   D00E97E5           LDR      R0,[R7, #+3792]
   1118          
   1119            
   1120          //------- setting last 5 message on idle ---------//
   1121            
   1122            main_msg_timer=myConfMod->main_msg_timer;
   1123            msg_d_x=myConfMod->msg_d_x;
   1124            msg_d_y=myConfMod->msg_d_y;
   1125            main_lenght=myConfMod->main_lenght;
   1126            use_cutter=myConfMod->use_cutter;
   1127            
   1128            
   1129          //----------------- player setting ---------------//
   1130          
   1131          #ifdef NEWSGOLD
   1132            sprintf(CsmAdr,per_s,myConfMod->CsmAdr);//csm mediaplayer
   \   000002F8   051088E0           ADD      R1,R8,R5
   \   000002FC   A40085E5           STR      R0,[R5, #+164]
   \   00000300   000B97E5           LDR      R0,[R7, #+2816]
   \   00000304   7C0085E5           STR      R0,[R5, #+124]
   \   00000308   CC0A97E5           LDR      R0,[R7, #+2764]
   \   0000030C   740085E5           STR      R0,[R5, #+116]
   \   00000310   D00A97E5           LDR      R0,[R7, #+2768]
   \   00000314   780085E5           STR      R0,[R5, #+120]
   \   00000318   900B97E5           LDR      R0,[R7, #+2960]
   \   0000031C   800085E5           STR      R0,[R5, #+128]
   \   00000320   C00B97E5           LDR      R0,[R7, #+3008]
   \   00000324   840085E5           STR      R0,[R5, #+132]
   \   00000328   3000A0E3           MOV      R0,#+48
   \   0000032C   B80D80E3           ORR      R0,R0,#0x2E00
   \   00000330   042080E0           ADD      R2,R0,R4
   \   00000334   810F88E2           ADD      R0,R8,#+516
   \   00000338   050080E0           ADD      R0,R0,R5
   \   0000033C   160000EF           SWI      +22
   1133            sprintf(playing,per_s,myConfMod->playing);//text before name song
   \   00000340   F90F4BE2           SUB      R0,R11,#+996
   \   00000344   042080E0           ADD      R2,R0,R4
   \   00000348   051088E0           ADD      R1,R8,R5
   \   0000034C   FE0F85E2           ADD      R0,R5,#+1016
   \   00000350   160000EF           SWI      +22
   1134          #endif
   1135            
   1136          //----------- number status to iconbar -----------//
   1137            
   1138          #ifdef NEWSGOLD
   1139            NumStatusToIconBar=myConfMod->NumStatusToIconBar;
   \   00000354   780997E5           LDR      R0,[R7, #+2424]
   \   00000358   680085E5           STR      R0,[R5, #+104]
   1140            NumXStatusToIconBar=myConfMod->NumXStatusToIconBar;
   \   0000035C   A80997E5           LDR      R0,[R7, #+2472]
   \   00000360   6C0085E5           STR      R0,[R5, #+108]
   1141            ShowStatusIcon=myConfMod->ShowStatusIcon;
   \   00000364   540797E5           LDR      R0,[R7, #+1876]
   \   00000368   540085E5           STR      R0,[R5, #+84]
   1142          #endif
   1143            
   1144            
   1145          //--------------- setting xstatus ----------------//
   1146            
   1147            show_xstatus=myConfMod->show_xstatus;
   \   0000036C   240897E5           LDR      R0,[R7, #+2084]
   \   00000370   580085E5           STR      R0,[R5, #+88]
   1148            IDLEICON_XX=myConfMod->IDLEICON_XX;
   \   00000374   D40897E5           LDR      R0,[R7, #+2260]
   \   00000378   5C0085E5           STR      R0,[R5, #+92]
   1149            IDLEICON_YX=myConfMod->IDLEICON_YX;
   \   0000037C   D80897E5           LDR      R0,[R7, #+2264]
   \   00000380   600085E5           STR      R0,[R5, #+96]
   1150            ind_set_xstatus=myConfMod->ind_set_xstatus;;
   \   00000384   080997E5           LDR      R0,[R7, #+2312]
   \   00000388   640085E5           STR      R0,[R5, #+100]
   1151            
   1152          //------------------ setting keys ----------------//
   1153            
   1154            LongRightAction=myConfMod->LongRightAction;
   \   0000038C   CC0397E5           LDR      R0,[R7, #+972]
   \   00000390   380085E5           STR      R0,[R5, #+56]
   1155            LongLeftAction=myConfMod->LongLeftAction;  
   \   00000394   5C0497E5           LDR      R0,[R7, #+1116]
   \   00000398   3C0085E5           STR      R0,[R5, #+60]
   1156            ActionResh=myConfMod->ActionResh;//действие на # в контакт листе
   \   0000039C   AC0597E5           LDR      R0,[R7, #+1452]
   1157              
   1158          //-  If action vol up && vol down button on elka -//
   1159            
   1160            LongVolUpAction=myConfMod->LongVolUpAction;
   1161            LongVolDownAction=myConfMod->LongVolDownAction;
   1162            isVolUpButton=myConfMod->isVolUpButton;
   1163            isVolDownButton=myConfMod->isVolDownButton;
   1164          
   1165            
   1166            
   1167          //---------------- other setting -----------------//
   1168            
   1169            sprintf(ignor_list,per_s,myConfMod->ignor_list);
   \   000003A0   051088E0           ADD      R1,R8,R5
   \   000003A4   400085E5           STR      R0,[R5, #+64]
   \   000003A8   CC0497E5           LDR      R0,[R7, #+1228]
   \   000003AC   440085E5           STR      R0,[R5, #+68]
   \   000003B0   3C0597E5           LDR      R0,[R7, #+1340]
   \   000003B4   480085E5           STR      R0,[R5, #+72]
   \   000003B8   8C0697E5           LDR      R0,[R7, #+1676]
   \   000003BC   4C0085E5           STR      R0,[R5, #+76]
   \   000003C0   1C0697E5           LDR      R0,[R7, #+1564]
   \   000003C4   500085E5           STR      R0,[R5, #+80]
   \   000003C8   400F4BE2           SUB      R0,R11,#+256
   \   000003CC   042080E0           ADD      R2,R0,R4
   \   000003D0   840F88E2           ADD      R0,R8,#+528
   \   000003D4   050080E0           ADD      R0,R0,R5
   \   000003D8   160000EF           SWI      +22
   1170            sprintf(I_str,per_s,myConfMod->myName);
   \   000003DC   8B0F4BE2           SUB      R0,R11,#+556
   \   000003E0   042080E0           ADD      R2,R0,R4
   \   000003E4   051088E0           ADD      R1,R8,R5
   \   000003E8   C40F88E2           ADD      R0,R8,#+784
   \   000003EC   050080E0           ADD      R0,R0,R5
   \   000003F0   160000EF           SWI      +22
   1171            show_send_info=myConfMod->show_send_info;
   \   000003F4   480C96E5           LDR      R0,[R6, #+3144]
   \   000003F8   300185E5           STR      R0,[R5, #+304]
   1172            
   1173            Vibra_cc=myConfMod->Vibra_cc;//vibra remainder
   \   000003FC   A40B96E5           LDR      R0,[R6, #+2980]
   \   00000400   2C0185E5           STR      R0,[R5, #+300]
   1174            
   1175            unread_X=myConfMod->unread_X;
   \   00000404   700F97E5           LDR      R0,[R7, #+3952]
   \   00000408   AC0085E5           STR      R0,[R5, #+172]
   1176            unread_Y=myConfMod->unread_Y;
   \   0000040C   740F97E5           LDR      R0,[R7, #+3956]
   \   00000410   B00085E5           STR      R0,[R5, #+176]
   1177            
   1178            
   1179          //------------- Screen Saver setting -------------//
   1180            
   1181          #ifdef NEWSGOLD
   1182            screenSaverTime=myConfMod->screenSaverTime;
   \   00000414   CC0296E5           LDR      R0,[R6, #+716]
   \   00000418   EC0085E5           STR      R0,[R5, #+236]
   1183            isScreenSaverEna=myConfMod->isScreenSaverEna;
   \   0000041C   5C0296E5           LDR      R0,[R6, #+604]
   \   00000420   F00085E5           STR      R0,[R5, #+240]
   1184          #endif
   1185            
   1186          //------------ smiles && popup color -------------//
   1187          
   1188            for(int i=0;i<4;i++)
   \   00000424   0000A0E3           MOV      R0,#+0
   1189            {
   1190              SmBGcolor[i]=myConfMod->SmBGcolor[i];
   \                     ??UpdateConfig_8:
   \   00000428   3C10A0E3           MOV      R1,#+60
   \   0000042C   D01E81E3           ORR      R1,R1,#0xD00
   \   00000430   042080E0           ADD      R2,R0,R4
   \   00000434   021081E0           ADD      R1,R1,R2
   \   00000438   0030D1E5           LDRB     R3,[R1, #+0]
   \   0000043C   052080E0           ADD      R2,R0,R5
   \   00000440   EC31C2E5           STRB     R3,[R2, #+492]
   1191              SmSelectColor[i]=myConfMod->SmSelectColor[i];
   \   00000444   3030D1E5           LDRB     R3,[R1, #+48]
   \   00000448   F031C2E5           STRB     R3,[R2, #+496]
   1192              SmFontColor[i]=myConfMod->SmFontColor[i];
   \   0000044C   6010D1E5           LDRB     R1,[R1, #+96]
   \   00000450   F411C2E5           STRB     R1,[R2, #+500]
   1193              
   1194              PopupBGCl[i]=myConfMod->PopupBGCl[i];;
   \   00000454   041080E0           ADD      R1,R0,R4
   \   00000458   9C1D81E2           ADD      R1,R1,#+9984
   \   0000045C   0030D1E5           LDRB     R3,[R1, #+0]
   1195              PopupOnlineCl[i]=myConfMod->PopupOnlineCl[i];    
   1196              PopupMsgCl[i]=myConfMod->PopupMsgCl[i];
   1197            }
   \   00000460   010080E2           ADD      R0,R0,#+1
   \   00000464   040050E3           CMP      R0,#+4
   \   00000468   F831C2E5           STRB     R3,[R2, #+504]
   \   0000046C   3030D1E5           LDRB     R3,[R1, #+48]
   \   00000470   FC31C2E5           STRB     R3,[R2, #+508]
   \   00000474   6010D1E5           LDRB     R1,[R1, #+96]
   \   00000478   0012C2E5           STRB     R1,[R2, #+512]
   \   0000047C   E9FFFFBA           BLT      ??UpdateConfig_8
   1198          
   1199            
   1200          //----------------- popup message ----------------//
   1201          
   1202            PopupShow=myConfMod->PopupShow;
   \   00000480   540396E5           LDR      R0,[R6, #+852]
   1203            sprintf(PopupMsgString,per_s,myConfMod->PopupMsgString);
   \   00000484   051088E0           ADD      R1,R8,R5
   \   00000488   F40085E5           STR      R0,[R5, #+244]
   \   0000048C   6000A0E3           MOV      R0,#+96
   \   00000490   980D80E3           ORR      R0,R0,#0x2600
   \   00000494   042080E0           ADD      R2,R0,R4
   \   00000498   F80F85E2           ADD      R0,R5,#+992
   \   0000049C   160000EF           SWI      +22
   1204            sprintf(PopupOnlineString,per_s,myConfMod->PopupOnlineString);
   \   000004A0   9800A0E3           MOV      R0,#+152
   \   000004A4   980D80E3           ORR      R0,R0,#0x2600
   \   000004A8   042080E0           ADD      R2,R0,R4
   \   000004AC   051088E0           ADD      R1,R8,R5
   \   000004B0   FB0F85E2           ADD      R0,R5,#+1004
   \   000004B4   160000EF           SWI      +22
   1205            PopupFont=myConfMod->PopupFont;
   \   000004B8   740496E5           LDR      R0,[R6, #+1140]
   1206            
   1207            
   1208            
   1209          //--------------- CL HEADER SETTING --------------//
   1210          
   1211            isShowCont=myConfMod->isShowCont;
   1212            ShowTraff=myConfMod->ShowTraff;
   1213            isShowUnread=myConfMod->isShowUnread;
   1214            isShowI=myConfMod->isShowI;
   1215            isShowV=myConfMod->isShowV;
   1216            isShowS=myConfMod->isShowS;
   1217            isShowR=myConfMod->isShowR;
   1218            isShowA=myConfMod->isShowA;
   1219            isShowTmXs=myConfMod->isShowTmXs;
   1220            isShowTime=myConfMod->isShowTime;
   1221            isShowBat=myConfMod->isShowBat;
   1222          
   1223          
   1224          //------------------ ORIGINAL CONFIG --------------------//
   1225            
   1226            UIN=myConf->UIN;
   1227            sprintf(PASS,per_s,myConf->PASS);
   \   000004BC   5C2089E2           ADD      R2,R9,#+92
   \   000004C0   F80085E5           STR      R0,[R5, #+248]
   \   000004C4   EC0696E5           LDR      R0,[R6, #+1772]
   \   000004C8   051088E0           ADD      R1,R8,R5
   \   000004CC   040185E5           STR      R0,[R5, #+260]
   \   000004D0   7C0696E5           LDR      R0,[R6, #+1660]
   \   000004D4   000185E5           STR      R0,[R5, #+256]
   \   000004D8   5C0796E5           LDR      R0,[R6, #+1884]
   \   000004DC   080185E5           STR      R0,[R5, #+264]
   \   000004E0   FC0996E5           LDR      R0,[R6, #+2556]
   \   000004E4   0C0185E5           STR      R0,[R5, #+268]
   \   000004E8   CC0796E5           LDR      R0,[R6, #+1996]
   \   000004EC   100185E5           STR      R0,[R5, #+272]
   \   000004F0   3C0896E5           LDR      R0,[R6, #+2108]
   \   000004F4   140185E5           STR      R0,[R5, #+276]
   \   000004F8   1C0996E5           LDR      R0,[R6, #+2332]
   \   000004FC   180185E5           STR      R0,[R5, #+280]
   \   00000500   AC0896E5           LDR      R0,[R6, #+2220]
   \   00000504   1C0185E5           STR      R0,[R5, #+284]
   \   00000508   8C0996E5           LDR      R0,[R6, #+2444]
   \   0000050C   200185E5           STR      R0,[R5, #+288]
   \   00000510   DC0A96E5           LDR      R0,[R6, #+2780]
   \   00000514   240185E5           STR      R0,[R5, #+292]
   \   00000518   6C0A96E5           LDR      R0,[R6, #+2668]
   \   0000051C   2C6089E2           ADD      R6,R9,#+44
   \   00000520   280185E5           STR      R0,[R5, #+296]
   \   00000524   000096E5           LDR      R0,[R6, #+0]
   \   00000528   3C0185E5           STR      R0,[R5, #+316]
   \   0000052C   CC0F88E2           ADD      R0,R8,#+816
   \   00000530   050080E0           ADD      R0,R0,R5
   \   00000534   160000EF           SWI      +22
   1228            
   1229            SORT_CLIST=myConf->SORT_CLIST;
   \   00000538   440596E5           LDR      R0,[R6, #+1348]
   1230            LOG_ALL=myConf->LOG_ALL;
   1231            LOG_STATCH=myConf->LOG_STATCH;
   1232            VIBR_TYPE=myConf->VIBR_TYPE;
   1233            VIBR_ON_CONNECT=myConf->VIBR_ON_CONNECT;
   1234          
   1235            DEVELOP_IF_MOD=myConfMod->DEVELOP_IF_MOD;
   1236            if(!DEVELOP_IF_MOD)
   1237              DEVELOP_IF=myConf->DEVELOP_IF;
   1238            else
   1239              DEVELOP_IF=3;
   1240            FIRST_LETTER=myConf->FIRST_LETTER;    
   1241          
   1242            HISTORY_TYPE=myConf->HISTORY_TYPE;
   1243            
   1244           
   1245            sprintf(HIST_PATH,per_s,myConf->HIST_PATH);
   \   0000053C   732F89E2           ADD      R2,R9,#+460
   \   00000540   5C0185E5           STR      R0,[R5, #+348]
   \   00000544   7C0B96E5           LDR      R0,[R6, #+2940]
   \   00000548   051088E0           ADD      R1,R8,R5
   \   0000054C   500185E5           STR      R0,[R5, #+336]
   \   00000550   5C0C96E5           LDR      R0,[R6, #+3164]
   \   00000554   540185E5           STR      R0,[R5, #+340]
   \   00000558   C40F96E5           LDR      R0,[R6, #+4036]
   \   0000055C   480185E5           STR      R0,[R5, #+328]
   \   00000560   6000A0E3           MOV      R0,#+96
   \   00000564   400D80E3           ORR      R0,R0,#0x1000
   \   00000568   090090E7           LDR      R0,[R0, +R9]
   \   0000056C   400185E5           STR      R0,[R5, #+320]
   \   00000570   000097E5           LDR      R0,[R7, #+0]
   \   00000574   280085E5           STR      R0,[R5, #+40]
   \   00000578   000050E3           CMP      R0,#+0
   \   0000057C   B4049605           LDREQ    R0,[R6, #+1204]
   \   00000580   0300A013           MOVNE    R0,#+3
   \   00000584   4C0185E5           STR      R0,[R5, #+332]
   \   00000588   B40596E5           LDR      R0,[R6, #+1460]
   \   0000058C   580185E5           STR      R0,[R5, #+344]
   \   00000590   EC0B96E5           LDR      R0,[R6, #+3052]
   \   00000594   600185E5           STR      R0,[R5, #+352]
   \   00000598   800E85E2           ADD      R0,R5,#+2048
   \   0000059C   160000EF           SWI      +22
   1246            sprintf(NATICQ_HOST,per_s,myConf->NATICQ_HOST);
   \   000005A0   C02089E2           ADD      R2,R9,#+192
   \   000005A4   051088E0           ADD      R1,R8,R5
   \   000005A8   840E85E2           ADD      R0,R5,#+2112
   \   000005AC   160000EF           SWI      +22
   1247            NATICQ_PORT=myConf->NATICQ_PORT;
   \   000005B0   400196E5           LDR      R0,[R6, #+320]
   \   000005B4   E00185E5           STR      R0,[R5, #+480]
   1248            RECONNECT_TIME=myConf->RECONNECT_TIME; //2058
   \   000005B8   700196E5           LDR      R0,[R6, #+368]
   \   000005BC   E40185E5           STR      R0,[R5, #+484]
   1249            
   1250            vibraPower=myConf->vibraPower;  
   \   000005C0   940F96E5           LDR      R0,[R6, #+3988]
   \   000005C4   640185E5           STR      R0,[R5, #+356]
   1251            
   1252            IDLEICON_X=myConf->IDLEICON_X;
   \   000005C8   800496E5           LDR      R0,[R6, #+1152]
   \   000005CC   680185E5           STR      R0,[R5, #+360]
   1253            IDLEICON_Y=myConf->IDLEICON_Y;
   \   000005D0   840496E5           LDR      R0,[R6, #+1156]
   \   000005D4   6C0185E5           STR      R0,[R5, #+364]
   1254            
   1255            I_COLOR=myConf->I_COLOR;
   \   000005D8   500696E5           LDR      R0,[R6, #+1616]
   \   000005DC   700185E5           STR      R0,[R5, #+368]
   1256            TO_COLOR=myConf->TO_COLOR;
   \   000005E0   800696E5           LDR      R0,[R6, #+1664]
   \   000005E4   740185E5           STR      R0,[R5, #+372]
   1257            X_COLOR=myConf->X_COLOR;
   \   000005E8   B00696E5           LDR      R0,[R6, #+1712]
   \   000005EC   780185E5           STR      R0,[R5, #+376]
   1258            O_I_COLOR=myConf->O_I_COLOR;
   \   000005F0   700796E5           LDR      R0,[R6, #+1904]
   \   000005F4   7C0185E5           STR      R0,[R5, #+380]
   1259            O_TO_COLOR=myConf->O_TO_COLOR;
   \   000005F8   A00796E5           LDR      R0,[R6, #+1952]
   \   000005FC   800185E5           STR      R0,[R5, #+384]
   1260            O_X_COLOR=myConf->O_X_COLOR;
   \   00000600   D00796E5           LDR      R0,[R6, #+2000]
   \   00000604   840185E5           STR      R0,[R5, #+388]
   1261            
   1262            ED_FONT_SIZE=myConf->ED_FONT_SIZE;
   \   00000608   E00696E5           LDR      R0,[R6, #+1760]
   \   0000060C   880185E5           STR      R0,[R5, #+392]
   1263            ED_H_FONT_SIZE=myConf->ED_H_FONT_SIZE;
   \   00000610   100796E5           LDR      R0,[R6, #+1808]
   \   00000614   8C0185E5           STR      R0,[R5, #+396]
   1264            ED_X_FONT_SIZE=myConf->ED_X_FONT_SIZE;
   \   00000618   400796E5           LDR      R0,[R6, #+1856]
   \   0000061C   900185E5           STR      R0,[R5, #+400]
   1265            O_ED_FONT_SIZE=myConf->O_ED_FONT_SIZE;
   \   00000620   000896E5           LDR      R0,[R6, #+2048]
   \   00000624   940185E5           STR      R0,[R5, #+404]
   1266            O_ED_H_FONT_SIZE=myConf->O_ED_H_FONT_SIZE;
   \   00000628   300896E5           LDR      R0,[R6, #+2096]
   \   0000062C   980185E5           STR      R0,[R5, #+408]
   1267            O_ED_X_FONT_SIZE=myConf->O_ED_X_FONT_SIZE;
   \   00000630   600896E5           LDR      R0,[R6, #+2144]
   \   00000634   9C0185E5           STR      R0,[R5, #+412]
   1268            
   1269            ACK_COLOR=myConf->ACK_COLOR;
   \   00000638   900896E5           LDR      R0,[R6, #+2192]
   \   0000063C   A00185E5           STR      R0,[R5, #+416]
   1270            UNACK_COLOR=myConf->UNACK_COLOR;
   \   00000640   C00896E5           LDR      R0,[R6, #+2240]
   \   00000644   A40185E5           STR      R0,[R5, #+420]
   1271            
   1272            ENA_AUTO_XTXT=myConf->ENA_AUTO_XTXT;
   \   00000648   3C0D96E5           LDR      R0,[R6, #+3388]
   \   0000064C   A80185E5           STR      R0,[R5, #+424]
   1273            NOT_LOG_SAME_XTXT=myConf->NOT_LOG_SAME_XTXT;
   \   00000650   AC0D96E5           LDR      R0,[R6, #+3500]
   \   00000654   AC0185E5           STR      R0,[R5, #+428]
   1274            LOG_XTXT=myConf->LOG_XTXT;
   \   00000658   CC0C96E5           LDR      R0,[R6, #+3276]
   \   0000065C   B00185E5           STR      R0,[R5, #+432]
   1275            HISTORY_BUFFER_MOD=myConfMod->HISTORY_BUFFER_MOD;  
   \   00000660   500197E5           LDR      R0,[R7, #+336]
   \   00000664   300085E5           STR      R0,[R5, #+48]
   1276            if(!HISTORY_BUFFER_MOD)
   \   00000668   000050E3           CMP      R0,#+0
   1277               HISTORY_BUFFER=myConf->HISTORY_BUFFER;  
   \   0000066C   1C0E9605           LDREQ    R0,[R6, #+3612]
   1278            else
   1279              HISTORY_BUFFER=5;
   \   00000670   0500A013           MOVNE    R0,#+5
   \   00000674   B40185E5           STR      R0,[R5, #+436]
   1280            
   1281          //Illumination by BoBa 19.04.2007
   1282          ///////////
   1283            ILL_DISP_RECV=myConf->ILL_DISP_RECV;
   \   00000678   480996E5           LDR      R0,[R6, #+2376]
   \   0000067C   B80185E5           STR      R0,[R5, #+440]
   1284            ILL_KEYS_RECV=myConf->ILL_KEYS_RECV;
   \   00000680   780996E5           LDR      R0,[R6, #+2424]
   1285            ILL_DISP_SEND=myConf->ILL_DISP_SEND;
   1286            ILL_KEYS_SEND=myConf->ILL_KEYS_SEND;
   1287            ILL_SEND_TMR=myConf->ILL_SEND_TMR;
   1288            ILL_SEND_FADE=myConf->ILL_SEND_FADE;
   1289            ILL_RECV_TMR=myConf->ILL_RECV_TMR;
   1290            ILL_RECV_FADE=myConf->ILL_RECV_FADE;
   1291            ILL_OFF_FADE=myConf->ILL_OFF_FADE;
   1292            
   1293          //=============================Проигрывание звука=======================
   1294            
   1295            sprintf(sndStartup,per_s,myConf->sndStartup);
   \   00000684   051088E0           ADD      R1,R8,R5
   \   00000688   BC0185E5           STR      R0,[R5, #+444]
   \   0000068C   080A96E5           LDR      R0,[R6, #+2568]
   \   00000690   C40185E5           STR      R0,[R5, #+452]
   \   00000694   380A96E5           LDR      R0,[R6, #+2616]
   \   00000698   C80185E5           STR      R0,[R5, #+456]
   \   0000069C   680A96E5           LDR      R0,[R6, #+2664]
   \   000006A0   CC0185E5           STR      R0,[R5, #+460]
   \   000006A4   980A96E5           LDR      R0,[R6, #+2712]
   \   000006A8   D00185E5           STR      R0,[R5, #+464]
   \   000006AC   A80996E5           LDR      R0,[R6, #+2472]
   \   000006B0   C00185E5           STR      R0,[R5, #+448]
   \   000006B4   D80996E5           LDR      R0,[R6, #+2520]
   \   000006B8   D40185E5           STR      R0,[R5, #+468]
   \   000006BC   C80A96E5           LDR      R0,[R6, #+2760]
   \   000006C0   D80185E5           STR      R0,[R5, #+472]
   \   000006C4   FC00A0E3           MOV      R0,#+252
   \   000006C8   400D80E3           ORR      R0,R0,#0x1000
   \   000006CC   092080E0           ADD      R2,R0,R9
   \   000006D0   540E85E2           ADD      R0,R5,#+1344
   \   000006D4   160000EF           SWI      +22
   1296            sprintf(sndSrvMsg,per_s,myConf->sndSrvMsg);
   \   000006D8   6800A0E3           MOV      R0,#+104
   \   000006DC   440D80E3           ORR      R0,R0,#0x1100
   \   000006E0   092080E0           ADD      R2,R0,R9
   \   000006E4   051088E0           ADD      R1,R8,R5
   \   000006E8   580E85E2           ADD      R0,R5,#+1408
   \   000006EC   160000EF           SWI      +22
   1297            sprintf(sndGlobal,per_s,myConf->sndGlobal);
   \   000006F0   FD0E88E2           ADD      R0,R8,#+4048
   \   000006F4   092080E0           ADD      R2,R0,R9
   \   000006F8   051088E0           ADD      R1,R8,R5
   \   000006FC   5C0E85E2           ADD      R0,R5,#+1472
   \   00000700   160000EF           SWI      +22
   1298            sprintf(sndGlobal2,per_s,myConfMod->sndGlobal2);
   \   00000704   AD2F84E2           ADD      R2,R4,#+692
   \   00000708   051088E0           ADD      R1,R8,R5
   \   0000070C   600E85E2           ADD      R0,R5,#+1536
   \   00000710   160000EF           SWI      +22
   1299            sprintf(sndMsg,per_s,myConf->sndMsg);
   \   00000714   492D89E2           ADD      R2,R9,#+4672
   \   00000718   051088E0           ADD      R1,R8,R5
   \   0000071C   640E85E2           ADD      R0,R5,#+1600
   \   00000720   160000EF           SWI      +22
   1300            sprintf(sndMsg2,per_s,myConfMod->sndMsg2);
   \   00000724   C82F84E2           ADD      R2,R4,#+800
   \   00000728   051088E0           ADD      R1,R8,R5
   \   0000072C   820F85E2           ADD      R0,R5,#+520
   \   00000730   160000EF           SWI      +22
   1301            extended_sounds=myConfMod->extended_sounds;
   \   00000734   C00197E5           LDR      R0,[R7, #+448]
   1302            sprintf(sndMsgSent,per_s,myConf->sndMsgSent);
   \   00000738   051088E0           ADD      R1,R8,R5
   \   0000073C   340085E5           STR      R0,[R5, #+52]
   \   00000740   AC00A0E3           MOV      R0,#+172
   \   00000744   480D80E3           ORR      R0,R0,#0x1200
   \   00000748   092080E0           ADD      R2,R0,R9
   \   0000074C   680E85E2           ADD      R0,R5,#+1664
   \   00000750   160000EF           SWI      +22
   1303            sndVolume=myConf->sndVolume; 
   \   00000754   640F96E5           LDR      R0,[R6, #+3940]
   1304          
   1305          //-----------------------------------------
   1306            
   1307            vibraPower=myConf->vibraPower;
   1308               
   1309            sprintf(TEMPLATES_PATH,per_s,myConf->TEMPLATES_PATH);
   \   00000758   FA2F89E2           ADD      R2,R9,#+1000
   \   0000075C   DC0185E5           STR      R0,[R5, #+476]
   \   00000760   940F96E5           LDR      R0,[R6, #+3988]
   \   00000764   051088E0           ADD      R1,R8,R5
   \   00000768   640185E5           STR      R0,[R5, #+356]
   \   0000076C   700E85E2           ADD      R0,R5,#+1792
   \   00000770   160000EF           SWI      +22
   1310            sprintf(ICON_PATH,per_s,myConf->ICON_PATH);
   \   00000774   C42F89E2           ADD      R2,R9,#+784
   \   00000778   051088E0           ADD      R1,R8,R5
   \   0000077C   740E85E2           ADD      R0,R5,#+1856
   \   00000780   160000EF           SWI      +22
   1311            sprintf(SMILE_FILE,per_s,myConf->SMILE_FILE);
   \   00000784   8E2F89E2           ADD      R2,R9,#+568
   \   00000788   051088E0           ADD      R1,R8,R5
   \   0000078C   6C0E85E2           ADD      R0,R5,#+1728
   \   00000790   160000EF           SWI      +22
   1312            sprintf(SMILE_PATH,per_s,myConf->SMILE_PATH);
   \   00000794   A92F89E2           ADD      R2,R9,#+676
   \   00000798   051088E0           ADD      R1,R8,R5
   \   0000079C   780E85E2           ADD      R0,R5,#+1920
   \   000007A0   160000EF           SWI      +22
   1313            sprintf(XSTATUSES_PATH,per_s,myConf->XSTATUSES_PATH);
   \   000007A4   DF2F89E2           ADD      R2,R9,#+892
   \   000007A8   051088E0           ADD      R1,R8,R5
   \   000007AC   7C0E85E2           ADD      R0,R5,#+1984
   \   000007B0   160000EF           SWI      +22
   1314            
   1315            
   1316          //-----------------------------------------
   1317            
   1318            mfree(myConf);
   \   000007B4   0900A0E1           MOV      R0,R9
   \   000007B8   150000EF           SWI      +21
   1319            mfree(myConfMod);
   \   000007BC   0400A0E1           MOV      R0,R4
   \   000007C0   150000EF           SWI      +21
   1320          }
   1321          else
   1322            {
   1323             LockSched();
   1324             ShowMSG(1,(int)"Can't open configs!");
   1325             UnlockSched();
   1326          //   void ElfKiller(void);
   1327            // SUBPROC((void *)ElfKiller);
   1328             return 1;
   1329            }
   1330            return 0;
   \   000007C4   0000A0E3           MOV      R0,#+0
   \   000007C8   F08FBDE8           POP      {R4-R11,PC}
   \                     ??UpdateConfig_6:
   \   000007CC   460100EF           SWI      +326
   \   000007D0   181086E2           ADD      R1,R6,#+24
   \   000007D4   0100A0E3           MOV      R0,#+1
   \                     ??UpdateConfig_5:
   \   000007D8   480100EF           SWI      +328
   \   000007DC   470100EF           SWI      +327
   \   000007E0   0100A0E3           MOV      R0,#+1
   \   000007E4   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??UpdateConfig_0:
   \   000007E8   ........           DC32     `?<Constant "4:\\\\zbin\\\\etc\\\\NATICQ.bcfg">`
   \   000007EC   ........           DC32     tm_status_1
   1331          }

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for tm_status_1>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for tm_status_2>`:
   \   00000008   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for tm_status_3>`:
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for tm_status_4>`:
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for tm_status_5>`:
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for DEVELOP_IF_MOD>`:
   \   00000028   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HISTORY_SAVE_TYPE>`:
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HISTORY_BUFFER_MOD>`:
   \   00000030   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for extended_sounds>`:
   \   00000034   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LongRightAction>`:
   \   00000038   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LongLeftAction>`:
   \   0000003C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ActionResh>`:
   \   00000040   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LongVolUpAction>`:
   \   00000044   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LongVolDownAction>`:
   \   00000048   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isVolUpButton>`:
   \   0000004C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isVolDownButton>`:
   \   00000050   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ShowStatusIcon>`:
   \   00000054   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for show_xstatus>`:
   \   00000058   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IDLEICON_XX>`:
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IDLEICON_YX>`:
   \   00000060   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ind_set_xstatus>`:
   \   00000064   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for NumStatusToIconBar>`:
   \   00000068   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for NumXStatusToIconBar>`:
   \   0000006C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for fonto>`:
   \   00000070   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for msg_d_x>`:
   \   00000074   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for msg_d_y>`:
   \   00000078   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for main_msg_timer>`:
   \   0000007C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for main_lenght>`:
   \   00000080   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for use_cutter>`:
   \   00000084   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for spaco1>`:
   \   00000088   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for spaco2>`:
   \   0000008C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for onlineTime_x>`:
   \   00000090   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for onlineTime_y>`:
   \   00000094   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Pause_Time>`:
   \   00000098   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Ping_X>`:
   \   0000009C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Ping_Y>`:
   \   000000A0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ping_time_config>`:
   \   000000A4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Is_Unread_On>`:
   \   000000A8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for unread_X>`:
   \   000000AC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for unread_Y>`:
   \   000000B0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Auto_Status>`:
   \   000000B4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isAutoStatusOn>`:
   \   000000B8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for AUTO_ENGADE>`:
   \   000000BC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for automsgcount>`:
   \   000000C0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for time_zone>`:
   \   000000C4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for showAwayIdle>`:
   \   000000C8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for auto_x>`:
   \   000000CC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for auto_y>`:
   \   000000D0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Reset_timer>`:
   \   000000D4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for status_1>`:
   \   000000D8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for status_2>`:
   \   000000DC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for status_3>`:
   \   000000E0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for status_4>`:
   \   000000E4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for status_5>`:
   \   000000E8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for screenSaverTime>`:
   \   000000EC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isScreenSaverEna>`:
   \   000000F0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PopupShow>`:
   \   000000F4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PopupFont>`:
   \   000000F8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for TIME_OR_MSG>`:
   \   000000FC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ShowTraff>`:
   \   00000100   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowCont>`:
   \   00000104   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowUnread>`:
   \   00000108   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowI>`:
   \   0000010C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowV>`:
   \   00000110   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowS>`:
   \   00000114   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowR>`:
   \   00000118   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowA>`:
   \   0000011C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowTmXs>`:
   \   00000120   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowTime>`:
   \   00000124   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowBat>`:
   \   00000128   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Vibra_cc>`:
   \   0000012C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for show_send_info>`:
   \   00000130   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isLogStatusChange>`:
   \   00000134   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IsShowLoopback>`:
   \   00000138   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for UIN>`:
   \   0000013C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for VIBR_ON_CONNECT>`:
   \   00000140   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for SHOW_ACTIVE>`:
   \   00000144   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for VIBR_TYPE>`:
   \   00000148   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for DEVELOP_IF>`:
   \   0000014C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LOG_ALL>`:
   \   00000150   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LOG_STATCH>`:
   \   00000154   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for FIRST_LETTER>`:
   \   00000158   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for SORT_CLIST>`:
   \   0000015C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HISTORY_TYPE>`:
   \   00000160   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for vibraPower>`:
   \   00000164   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IDLEICON_X>`:
   \   00000168   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IDLEICON_Y>`:
   \   0000016C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for I_COLOR>`:
   \   00000170   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for TO_COLOR>`:
   \   00000174   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for X_COLOR>`:
   \   00000178   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_I_COLOR>`:
   \   0000017C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_TO_COLOR>`:
   \   00000180   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_X_COLOR>`:
   \   00000184   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ED_FONT_SIZE>`:
   \   00000188   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ED_H_FONT_SIZE>`:
   \   0000018C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ED_X_FONT_SIZE>`:
   \   00000190   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_ED_FONT_SIZE>`:
   \   00000194   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_ED_H_FONT_SIZE>`:
   \   00000198   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_ED_X_FONT_SIZE>`:
   \   0000019C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ACK_COLOR>`:
   \   000001A0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for UNACK_COLOR>`:
   \   000001A4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ENA_AUTO_XTXT>`:
   \   000001A8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for NOT_LOG_SAME_XTXT>`:
   \   000001AC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LOG_XTXT>`:
   \   000001B0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HISTORY_BUFFER>`:
   \   000001B4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_DISP_RECV>`:
   \   000001B8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_KEYS_RECV>`:
   \   000001BC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_RECV_TMR>`:
   \   000001C0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_DISP_SEND>`:
   \   000001C4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_KEYS_SEND>`:
   \   000001C8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_SEND_TMR>`:
   \   000001CC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_SEND_FADE>`:
   \   000001D0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_RECV_FADE>`:
   \   000001D4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_OFF_FADE>`:
   \   000001D8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sndVolume>`:
   \   000001DC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for NATICQ_PORT>`:
   \   000001E0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for RECONNECT_TIME>`:
   \   000001E4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for fontColor>`:
   \   000001E8   00                 DC8 0
   \                     `?<Initializer for bgrColor>`:
   \   000001E9   00                 DC8 0
   \   000001EA   0000               DC8 0, 0
   \                     `?<Initializer for SmBGcolor>`:
   \   000001EC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for SmSelectColor>`:
   \   000001F0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for SmFontColor>`:
   \   000001F4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PopupBGCl>`:
   \   000001F8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PopupOnlineCl>`:
   \   000001FC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PopupMsgCl>`:
   \   00000200   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for per_s>`:
   \   00000204   257300             DC8 "%s"
   \   00000207   00                 DC8 0
   \                     `?<Initializer for sndMsg2>`:
   \   00000208   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000218   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000228   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000238   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for pingsnd>`:
   \   00000248   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000258   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000268   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000278   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for fontpath>`:
   \   00000288   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000298   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for awayHelloMsg>`:
   \   000002C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for awayMsg>`:
   \   000002E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000300   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000310   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000320   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000330   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000340   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000350   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000360   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000370   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000380   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000390   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for PopupMsgString>`:
   \   000003E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for PopupOnlineString>`:
   \   000003EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for playing>`:
   \   000003F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for CsmAdr>`:
   \   00000408   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for ignor_list>`:
   \   00000414   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000424   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000434   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000444   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000454   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000464   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000474   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000484   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000494   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000504   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for I_str>`:
   \   00000514   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000524   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for PASS>`:
   \   00000534   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for sndStartup>`:
   \   00000540   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000550   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000560   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000570   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for sndSrvMsg>`:
   \   00000580   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000590   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for sndGlobal>`:
   \   000005C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for sndGlobal2>`:
   \   00000600   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000610   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000620   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000630   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for sndMsg>`:
   \   00000640   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000650   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000660   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000670   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for sndMsgSent>`:
   \   00000680   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000690   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for SMILE_FILE>`:
   \   000006C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for TEMPLATES_PATH>`:
   \   00000700   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000710   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000720   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000730   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for ICON_PATH>`:
   \   00000740   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000750   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000760   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000770   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for SMILE_PATH>`:
   \   00000780   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000790   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for XSTATUSES_PATH>`:
   \   000007C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for HIST_PATH>`:
   \   00000800   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000810   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000820   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000830   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for NATICQ_HOST>`:
   \   00000840   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000850   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000860   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000870   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000880   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000890   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for suc_config_name>`:
   \   000008C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for suc_config_name_mod>`:
   \   00000900   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000910   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000920   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000930   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "4:\\\\zbin\\\\etc\\\\NATICQ.bcfg">`:
   \   00000000   343A5C7A6269       DC8 "4:\\zbin\\etc\\NATICQ.bcfg"
   \              6E5C6574635C
   \              4E4154494351
   \              2E6263666700
   \   00000018   43616E277420       DC8 "Can't open configs!"
   \              6F70656E2063
   \              6F6E66696773
   \              2100        
   \   0000002C   303A5C7A6269       DC8 "0:\\zbin\\etc\\NATICQMod.bcfg"
   \              6E5C6574635C
   \              4E4154494351
   \              4D6F642E6263
   \              666700      
   \   00000047   00                 DC8 0
   \   00000048   436F6E666967       DC8 "Config mod not correct!!!"
   \              206D6F64206E
   \              6F7420636F72
   \              726563742121
   \              2100        
   \   00000062   0000               DC8 0, 0
   \   00000064   4E4154494351       DC8 "NATICQ"
   \              00          
   \   0000006B   00                 DC8 0
   \   0000006C   303A5C7A6269       DC8 "0:\\zbin\\etc\\NATICQ.bcfg"
   \              6E5C6574635C
   \              4E4154494351
   \              2E6263666700
   \   00000084   343A5C7A6269       DC8 "4:\\zbin\\etc\\NATICQMod.bcfg"
   \              6E5C6574635C
   \              4E4154494351
   \              4D6F642E6263
   \              666700      
   \   0000009F   00                 DC8 0
   \   000000A0   4E4154494351       DC8 "NATICQMod"
   \              4D6F6400    
   \   000000AA   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function     CSTACK
     --------     ------
     UpdateConfig    36


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     tm_status_1                    2368
     UpdateConfig                   2032
     ?<Initializer for tm_status_1> 2368
     ?<Constant "4:\\zbin\\etc\\NATICQ.bcfg">
                                     172
      Others                          40

 
 2 060 bytes in segment CODE
   172 bytes in segment DATA_C
 2 368 bytes in segment DATA_I
 2 368 bytes in segment DATA_ID
    12 bytes in segment INITTAB
 
 2 032 bytes of CODE  memory (+ 40 bytes shared)
 2 540 bytes of CONST memory
 2 368 bytes of DATA  memory

Errors: none
Warnings: none
