##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    29/Jun/2008  17:08:55 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\_MY_PROJECT_\naticq_mod\history.c       #
#    Command line    =  D:\Pasha\elf\_MY_PROJECT_\naticq_mod\history.c -D    #
#                       NEWSGOLD -D UIN_WRITE -D ole64 --preprocess          #
#                       D:\Pasha\elf\_MY_PROJECT_\naticq_mod\ole64\List\     #
#                       -lC D:\Pasha\elf\_MY_PROJECT_\naticq_mod\ole64\List\ #
#                        -o D:\Pasha\elf\_MY_PROJECT_\naticq_mod\ole64\Obj\  #
#                       -s9 --no_unroll --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "D:\Pasha\Embedded          #
#                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I  #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\Pasha\elf\_MY_PROJECT_\naticq_mod\ole64\List\hist #
#                       ory.lst                                              #
#    Object file     =  D:\Pasha\elf\_MY_PROJECT_\naticq_mod\ole64\Obj\histo #
#                       ry.r79                                               #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\_MY_PROJECT_\naticq_mod\history.c
      1          #include "../inc/swilib.h"
      2          #include "naticq.h"
      3          #include "history.h"
      4          #include "language.h"
      5          //#include "decode.h"
      6          #include "strings.h"
      7          //#include "strings3.h"
      8          
      9          
     10          extern char HIST_PATH[];
     11          extern int LOG_ALL;
     12          extern int HISTORY_TYPE;
     13          extern unsigned int UIN;
     14          extern int HISTORY_SAVE_TYPE;
     15          /*
     16            Добавлет строку в историю контакта CLIST
     17          */
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          static do_logwrite(const char *name, unsigned int u_i_n, char *text)
     20          {
     21            volatile int hFile;
     22            unsigned int io_error = 0;
     23            unsigned int ul;
     24            char error[36];
     25            char fullname[128];
     26            char hist_path[128];
     27            if(HISTORY_TYPE)
   \                     do_logwrite:
   \   00000000   ........           LDR      R3,??DataTable6  ;; HIST_PATH
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
   \   00000008   ........           LDR      R7,??DataTable5  ;; `?<Constant "%s\\\\%u">`
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   ........           LDR      R0,??DataTable7  ;; HISTORY_TYPE
   \   00000014   4CDF4DE2           SUB      SP,SP,#+304
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   0150A0E1           MOV      R5,R1
   \   00000020   0260A0E1           MOV      R6,R2
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   00108DE5           STR      R1,[SP, #+0]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0800000A           BEQ      ??do_logwrite_0
     28              snprintf(hist_path,127,"%s\\%u",HIST_PATH, UIN);
   \   00000034   ........           LDR      R0,??DataTable10  ;; UIN
   \   00000038   0720A0E1           MOV      R2,R7
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   7F10A0E3           MOV      R1,#+127
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   90008DE2           ADD      R0,SP,#+144
   \   0000004C   1B0100EF           SWI      +283
   \   00000050   04D08DE2           ADD      SP,SP,#+4
   \   00000054   030000EA           B        ??do_logwrite_1
     29            else
     30              snprintf(hist_path,127,"%s",HIST_PATH);
   \                     ??do_logwrite_0:
   \   00000058   402F8FE2           ADR      R2,??do_logwrite_2  ;; "%s"
   \   0000005C   7F10A0E3           MOV      R1,#+127
   \   00000060   8C008DE2           ADD      R0,SP,#+140
   \   00000064   1B0100EF           SWI      +283
     31            if (!isdir(hist_path,&ul))
   \                     ??do_logwrite_1:
   \   00000068   08108DE2           ADD      R1,SP,#+8
   \   0000006C   8C008DE2           ADD      R0,SP,#+140
   \   00000070   910000EF           SWI      +145
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0200001A           BNE      ??do_logwrite_3
     32            {
     33              mkdir(hist_path,&ul);
   \   0000007C   08108DE2           ADD      R1,SP,#+8
   \   00000080   8C008DE2           ADD      R0,SP,#+140
   \   00000084   100000EF           SWI      +16
     34            }
     35            if(HISTORY_SAVE_TYPE)
   \                     ??do_logwrite_3:
   \   00000088   ........           LDR      R0,??DataTable8  ;; HISTORY_SAVE_TYPE
   \   0000008C   000090E5           LDR      R0,[R0, #+0]
   \   00000090   20002DE9           PUSH     {R5}
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   0700000A           BEQ      ??do_logwrite_4
     36            {
     37              snprintf(fullname,127,"%s\\%s(%d).txt", hist_path, name, u_i_n);
   \   0000009C   10002DE9           PUSH     {R4}
   \   000000A0   94308DE2           ADD      R3,SP,#+148
   \   000000A4   082087E2           ADD      R2,R7,#+8
   \   000000A8   7F10A0E3           MOV      R1,#+127
   \   000000AC   14008DE2           ADD      R0,SP,#+20
   \   000000B0   1B0100EF           SWI      +283
   \   000000B4   08D08DE2           ADD      SP,SP,#+8
   \   000000B8   050000EA           B        ??do_logwrite_5
     38            }     
     39            else
     40            {
     41              snprintf(fullname,127,"%s\\%d.txt", hist_path, u_i_n); 
   \                     ??do_logwrite_4:
   \   000000BC   90308DE2           ADD      R3,SP,#+144
   \   000000C0   182087E2           ADD      R2,R7,#+24
   \   000000C4   7F10A0E3           MOV      R1,#+127
   \   000000C8   10008DE2           ADD      R0,SP,#+16
   \   000000CC   1B0100EF           SWI      +283
   \   000000D0   04D08DE2           ADD      SP,SP,#+4
     42            }
     43            //snprintf(fullname,127,"%s\\%s(%d).txt", hist_path, n_a_m_e_z, u_i_n);
     44          //  mfree(buf);
     45            // Открываем файл на дозапись и создаём в случае неудачи
     46            hFile = fopen(fullname,A_ReadWrite + A_Create + A_Append + A_BIN,P_READ+P_WRITE, &io_error);
   \                     ??do_logwrite_5:
   \   000000D4   0D30A0E1           MOV      R3,SP
   \   000000D8   602FA0E3           MOV      R2,#+384
   \   000000DC   0A10A0E3           MOV      R1,#+10
   \   000000E0   811C81E3           ORR      R1,R1,#0x8100
   \   000000E4   0C008DE2           ADD      R0,SP,#+12
   \   000000E8   0A0000EF           SWI      +10
   \   000000EC   04008DE5           STR      R0,[SP, #+4]
     47            if(hFile!=-1)
   \   000000F0   04009DE5           LDR      R0,[SP, #+4]
   \   000000F4   010070E3           CMN      R0,#+1
   \   000000F8   0A00000A           BEQ      ??do_logwrite_6
     48            {
     49              fwrite(hFile, text, strlen(text), &io_error);
   \   000000FC   0600A0E1           MOV      R0,R6
   \   00000100   1B0000EF           SWI      +27
   \   00000104   0D30A0E1           MOV      R3,SP
   \   00000108   0020A0E1           MOV      R2,R0
   \   0000010C   04009DE5           LDR      R0,[SP, #+4]
   \   00000110   0610A0E1           MOV      R1,R6
   \   00000114   0C0000EF           SWI      +12
     50              fclose(hFile, &io_error);
   \   00000118   04009DE5           LDR      R0,[SP, #+4]
   \   0000011C   0D10A0E1           MOV      R1,SP
   \   00000120   0D0000EF           SWI      +13
   \   00000124   090000EA           B        ??do_logwrite_7
     51            }
     52            else
     53            {
     54              snprintf(error,35, LG_HISTIOERR, io_error);
   \                     ??do_logwrite_6:
   \   00000128   00309DE5           LDR      R3,[SP, #+0]
   \   0000012C   242087E2           ADD      R2,R7,#+36
   \   00000130   2310A0E3           MOV      R1,#+35
   \   00000134   430F8DE2           ADD      R0,SP,#+268
   \   00000138   1B0100EF           SWI      +283
     55              LockSched();
   \   0000013C   460100EF           SWI      +326
     56              ShowMSG(1,(int)error); 
   \   00000140   431F8DE2           ADD      R1,SP,#+268
   \   00000144   0100A0E3           MOV      R0,#+1
   \   00000148   480100EF           SWI      +328
     57              UnlockSched();
   \   0000014C   470100EF           SWI      +327
     58            }
     59            mfree(text);
   \                     ??do_logwrite_7:
   \   00000150   0600A0E1           MOV      R0,R6
   \   00000154   150000EF           SWI      +21
     60          }
   \   00000158   4CDF8DE2           ADD      SP,SP,#+304
   \   0000015C   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??do_logwrite_2:
   \   00000160   25730000           DC8      "%s",+0
     61          /*
     62          static do_logwrite(unsigned int uin,char *text)
     63          {
     64            volatile int hFile;
     65            unsigned int io_error = 0;
     66            unsigned int ul;
     67            char error[36];
     68            char fullname[128];
     69            char hist_path[128];
     70            if(HISTORY_TYPE)
     71              snprintf(hist_path,127,"%s\\%u",HIST_PATH, UIN);
     72            else
     73              snprintf(hist_path,127,"%s",HIST_PATH);
     74            if (!isdir(hist_path,&ul))
     75            {
     76              mkdir(hist_path,&ul);
     77            }
     78            snprintf(fullname,127,"%s\\%u.txt", hist_path, uin);
     79          //  mfree(buf);
     80            // Открываем файл на дозапись и создаём в случае неудачи
     81            hFile = fopen(fullname,A_ReadWrite + A_Create + A_Append + A_BIN,P_READ+P_WRITE, &io_error);
     82            if(hFile!=-1)
     83            {
     84              fwrite(hFile, text, strlen(text), &io_error);
     85              fclose(hFile, &io_error);
     86            }
     87            else
     88            {
     89              snprintf(error,35, LG_HISTIOERR, io_error);
     90              LockSched();
     91              ShowMSG(1,(int)error); 
     92              UnlockSched();
     93            }
     94            mfree(text);
     95          }
     96          */

   \                                 In segment CODE, align 4, keep-with-next
     97          void Add2History(CLIST *CListEx, char *header, char *message, int direction)
     98          {
   \                     Add2History:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     99            static const char *delim = "\r\n--------------<>-%04d\r\n";
    100            int len;
    101            if (!LOG_ALL) return;
   \   00000008   80009FE5           LDR      R0,??Add2History_0  ;; LOG_ALL
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0370A0E1           MOV      R7,R3
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   F083BD08           POPEQ    {R4-R9,PC}
    102            len=strlen(delim)+strlen(header)+strlen(message);
   \   00000024   68809FE5           LDR      R8,??Add2History_0+0x4  ;; `?<Constant "\\r\\n--------------<>-%0...">`
   \   00000028   0800A0E1           MOV      R0,R8
   \   0000002C   1B0000EF           SWI      +27
   \   00000030   0090A0E1           MOV      R9,R0
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   1B0000EF           SWI      +27
   \   0000003C   099080E0           ADD      R9,R0,R9
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   1B0000EF           SWI      +27
   \   00000048   090080E0           ADD      R0,R0,R9
    103            char *text=malloc(len+1);
   \   0000004C   010080E2           ADD      R0,R0,#+1
   \   00000050   140000EF           SWI      +20
   \   00000054   0090A0E1           MOV      R9,R0
    104            sprintf(text,delim,direction);
   \   00000058   0720A0E1           MOV      R2,R7
   \   0000005C   0810A0E1           MOV      R1,R8
   \   00000060   160000EF           SWI      +22
    105            strcat(text,header);
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   0900A0E1           MOV      R0,R9
   \   0000006C   170000EF           SWI      +23
    106            strcat(text,message);
   \   00000070   0610A0E1           MOV      R1,R6
   \   00000074   0900A0E1           MOV      R0,R9
   \   00000078   170000EF           SWI      +23
    107            do_logwrite(CListEx->name, CListEx->uin, text);
   \   0000007C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000080   0920A0E1           MOV      R2,R9
   \   00000084   140084E2           ADD      R0,R4,#+20
   \   00000088   ........           BL       do_logwrite
    108          //  SUBPROC((void*)do_logwrite,CListEx->uin,text);
    109          //    SUBPROC((void*)do_logwrite2,CListEx->uin, text);
    110          }
   \   0000008C   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??Add2History_0:
   \   00000090   ........           DC32     LOG_ALL
   \   00000094   ........           DC32     `?<Constant "\\r\\n--------------<>-%0...">`
    111          
    112          extern LOGQ *NewLOGQ(const char *s);
    113          extern int AddLOGQ(LOGQ **queue, LOGQ *p);
    114          
    115          //Делает ярким последний икс-статус, а остальные тусклыми

   \                                 In segment CODE, align 4, keep-with-next
    116          void ActivateLastX(LOGQ *p)
    117          {
    118            LOGQ *q = p, *lastX = 0;
   \                     ActivateLastX:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   1EFF2F01           BXEQ     LR
    119            while(q)
    120            {
    121              if((q->type&0x0F) == 3)
   \                     ??ActivateLastX_0:
   \   0000000C   0C2090E5           LDR      R2,[R0, #+12]
   \   00000010   0F2002E2           AND      R2,R2,#0xF
   \   00000014   030052E3           CMP      R2,#+3
    122              {
    123                lastX = q;
   \   00000018   0010A001           MOVEQ    R1,R0
    124                q->type = 0x13;
   \   0000001C   1320A003           MOVEQ    R2,#+19
   \   00000020   0C208005           STREQ    R2,[R0, #+12]
    125              }
    126              q = q->next;
   \   00000024   000090E5           LDR      R0,[R0, #+0]
    127            }
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   F6FFFF1A           BNE      ??ActivateLastX_0
    128            if(lastX) lastX->type = 3;
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0300A013           MOVNE    R0,#+3
   \   00000038   0C008115           STRNE    R0,[R1, #+12]
    129          }
   \   0000003C   1EFF2FE1           BX       LR               ;; return
    130          
    131          //Добавить элемент в лог первым

   \                                 In segment CODE, align 4, keep-with-next
    132          void AddFirstLOGQ(CLIST *t, LOGQ *p)
    133          {
   \                     AddFirstLOGQ:
   \   00000000   00402DE9           PUSH     {LR}
    134            LOGQ *q = t->log;
   \   00000004   902090E5           LDR      R2,[R0, #+144]
    135            if(!p) return;
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0080BD08           POPEQ    {PC}
    136            t->log = p;
   \   00000010   901080E5           STR      R1,[R0, #+144]
   \   00000014   003091E5           LDR      R3,[R1, #+0]
   \   00000018   000053E3           CMP      R3,#+0
   \   0000001C   0300000A           BEQ      ??AddFirstLOGQ_0
    137            while(p->next)
    138              p = p->next;
   \                     ??AddFirstLOGQ_1:
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   003091E5           LDR      R3,[R1, #+0]
   \   00000028   000053E3           CMP      R3,#+0
   \   0000002C   FBFFFF1A           BNE      ??AddFirstLOGQ_1
    139            p->next = q;
   \                     ??AddFirstLOGQ_0:
   \   00000030   002081E5           STR      R2,[R1, #+0]
    140            ActivateLastX(t->log);
   \   00000034   900090E5           LDR      R0,[R0, #+144]
   \   00000038   ........           BL       ActivateLastX
    141          }
   \   0000003C   0080BDE8           POP      {PC}             ;; return
    142          
    143          //Удаляем лог с заданного элемента

   \                                 In segment CODE, align 4, keep-with-next
    144          void DeleteLOGQ(LOGQ *p)
    145          {
   \                     DeleteLOGQ:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    146            if(!p) return;
   \   00000008   1080BD08           POPEQ    {R4,PC}
    147            if(p->next) DeleteLOGQ(p->next);
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0000000A           BEQ      ??DeleteLOGQ_0
   \   00000018   F8FFFFEB           BL       DeleteLOGQ
    148            mfree(p);
   \                     ??DeleteLOGQ_0:
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   150000EF           SWI      +21
    149          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
    150          
    151          //Проверка что в логе не только иксстасусы

   \                                 In segment CODE, align 4, keep-with-next
    152          int CheckLOGQ(CLIST *t)
    153          {
   \                     CheckLOGQ:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    154            LOGQ *p = t->log;
   \   00000008   900094E5           LDR      R0,[R4, #+144]
   \   0000000C   0010B0E1           MOVS     R1,R0
    155            if(!p) return 0;
   \   00000010   0200001A           BNE      ??CheckLOGQ_0
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   1080BDE8           POP      {R4,PC}
    156            for(; p->next && (p->type&0x0F)==3; p=p->next);
   \                     ??CheckLOGQ_1:
   \   0000001C   0210A0E1           MOV      R1,R2
   \                     ??CheckLOGQ_0:
   \   00000020   002091E5           LDR      R2,[R1, #+0]
   \   00000024   000052E3           CMP      R2,#+0
   \   00000028   0300000A           BEQ      ??CheckLOGQ_2
   \   0000002C   0C3091E5           LDR      R3,[R1, #+12]
   \   00000030   0F3003E2           AND      R3,R3,#0xF
   \   00000034   030053E3           CMP      R3,#+3
   \   00000038   F7FFFF0A           BEQ      ??CheckLOGQ_1
    157            if(p->next)
   \                     ??CheckLOGQ_2:
   \   0000003C   000052E3           CMP      R2,#+0
   \   00000040   0400000A           BEQ      ??CheckLOGQ_3
    158              if((p->type&0x0F)!=3)
   \   00000044   0C1091E5           LDR      R1,[R1, #+12]
   \   00000048   0F1001E2           AND      R1,R1,#0xF
   \   0000004C   030051E3           CMP      R1,#+3
    159                return 1;
   \   00000050   0100A013           MOVNE    R0,#+1
   \   00000054   1080BD18           POPNE    {R4,PC}
    160            DeleteLOGQ(t->log);
   \                     ??CheckLOGQ_3:
   \   00000058   ........           BL       DeleteLOGQ
    161            t->log = 0;
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   900084E5           STR      R0,[R4, #+144]
    162            return 0;
   \   00000064   1080BDE8           POP      {R4,PC}          ;; return
    163          }
    164          
    165          extern int HISTORY_SAVE_TYPE;
    166          

   \                                 In segment CODE, align 4, keep-with-next
    167          int GetHistory(CLIST *t, int bufsize)
    168          {
   \                     GetHistory:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
    169            LOGQ *log, *head;
    170            static const char *delim = "\r\n--------------<>-000";
    171            volatile int hFile;
    172            unsigned int io_error = 0;
    173            char fullname[128], *s, *b, *e, *text, *str, *buf;
    174            int i, delimlen = strlen(delim)+3, direction;
   \   00000004   ........           LDR      R5,??DataTable5  ;; `?<Constant "%s\\\\%u">`
   \   00000008   90D04DE2           SUB      SP,SP,#+144
   \   0000000C   0180A0E1           MOV      R8,R1
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   08408DE5           STR      R4,[SP, #+8]
   \   00000018   640085E2           ADD      R0,R5,#+100
   \   0000001C   1B0000EF           SWI      +27
   \   00000020   036080E2           ADD      R6,R0,#+3
    175          //  unsigned uin = t->uin;
    176            
    177            if(CheckLOGQ(t)) return 0;
   \   00000024   90009DE5           LDR      R0,[SP, #+144]
   \   00000028   ........           BL       CheckLOGQ
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   9900001A           BNE      ??GetHistory_0
    178            
    179            buf = text = malloc(bufsize);
   \   00000034   0800A0E1           MOV      R0,R8
   \   00000038   140000EF           SWI      +20
    180            text[0] = 0;
    181            text[bufsize-1] = 0;
    182            if(HISTORY_SAVE_TYPE)
   \   0000003C   ........           LDR      R3,??DataTable6  ;; HIST_PATH
   \   00000040   ........           LDR      R1,??DataTable7  ;; HISTORY_TYPE
   \   00000044   0070A0E1           MOV      R7,R0
   \   00000048   0C708DE5           STR      R7,[SP, #+12]
   \   0000004C   0040C7E5           STRB     R4,[R7, #+0]
   \   00000050   070088E0           ADD      R0,R8,R7
   \   00000054   014040E5           STRB     R4,[R0, #-1]
   \   00000058   ........           LDR      R0,??DataTable8  ;; HISTORY_SAVE_TYPE
   \   0000005C   001091E5           LDR      R1,[R1, #+0]
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   90009DE5           LDR      R0,[SP, #+144]
   \   0000006C   0C0090E5           LDR      R0,[R0, #+12]
   \   00000070   1400000A           BEQ      ??GetHistory_1
    183            {
    184              if(HISTORY_TYPE)
   \   00000074   01002DE9           PUSH     {R0}
   \   00000078   94009DE5           LDR      R0,[SP, #+148]
   \   0000007C   000051E3           CMP      R1,#+0
   \   00000080   140080E2           ADD      R0,R0,#+20
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   0800000A           BEQ      ??GetHistory_2
    185                snprintf(fullname,127,"%s\\%u\\%s(%d).txt", HIST_PATH, UIN, t->name, t->uin);
   \   0000008C   ........           LDR      R0,??DataTable10  ;; UIN
   \   00000090   342085E2           ADD      R2,R5,#+52
   \   00000094   000090E5           LDR      R0,[R0, #+0]
   \   00000098   7F10A0E3           MOV      R1,#+127
   \   0000009C   01002DE9           PUSH     {R0}
   \   000000A0   1C008DE2           ADD      R0,SP,#+28
   \   000000A4   1B0100EF           SWI      +283
   \   000000A8   0CD08DE2           ADD      SP,SP,#+12
   \   000000AC   120000EA           B        ??GetHistory_3
    186              else
    187                snprintf(fullname,127,"%s\\%s(%d).txt", HIST_PATH, t->name, t->uin);
   \                     ??GetHistory_2:
   \   000000B0   082085E2           ADD      R2,R5,#+8
   \                     ??GetHistory_4:
   \   000000B4   7F10A0E3           MOV      R1,#+127
   \   000000B8   18008DE2           ADD      R0,SP,#+24
   \   000000BC   1B0100EF           SWI      +283
   \   000000C0   08D08DE2           ADD      SP,SP,#+8
   \   000000C4   0C0000EA           B        ??GetHistory_3
    188            }     
    189            else
    190            {
    191              if(HISTORY_TYPE)
   \                     ??GetHistory_1:
   \   000000C8   01002DE9           PUSH     {R0}
   \   000000CC   000051E3           CMP      R1,#+0
   \   000000D0   0400000A           BEQ      ??GetHistory_5
    192                snprintf(fullname,127,"%s\\%u\\%u.txt", HIST_PATH, UIN, t->uin);
   \   000000D4   ........           LDR      R0,??DataTable10  ;; UIN
   \   000000D8   482085E2           ADD      R2,R5,#+72
   \   000000DC   000090E5           LDR      R0,[R0, #+0]
   \   000000E0   01002DE9           PUSH     {R0}
   \   000000E4   F2FFFFEA           B        ??GetHistory_4
    193              else
    194                snprintf(fullname,127,"%s\\%u.txt", HIST_PATH, t->uin);
   \                     ??GetHistory_5:
   \   000000E8   582085E2           ADD      R2,R5,#+88
   \   000000EC   7F10A0E3           MOV      R1,#+127
   \   000000F0   14008DE2           ADD      R0,SP,#+20
   \   000000F4   1B0100EF           SWI      +283
   \   000000F8   04D08DE2           ADD      SP,SP,#+4
    195            }
    196            hFile = fopen(fullname,A_ReadOnly + A_BIN,P_READ, &io_error);
   \                     ??GetHistory_3:
   \   000000FC   08308DE2           ADD      R3,SP,#+8
   \   00000100   8020A0E3           MOV      R2,#+128
   \   00000104   801CA0E3           MOV      R1,#+32768
   \   00000108   10008DE2           ADD      R0,SP,#+16
   \   0000010C   0A0000EF           SWI      +10
   \   00000110   00008DE5           STR      R0,[SP, #+0]
   \   00000114   00009DE5           LDR      R0,[SP, #+0]
   \   00000118   010070E3           CMN      R0,#+1
   \   0000011C   5C00000A           BEQ      ??GetHistory_6
    197            if(hFile!=-1)
    198            {
    199              lseek(hFile, -(bufsize-1), S_END, &io_error, &io_error);
   \   00000120   08008DE2           ADD      R0,SP,#+8
   \   00000124   01002DE9           PUSH     {R0}
   \   00000128   018048E2           SUB      R8,R8,#+1
   \   0000012C   0C308DE2           ADD      R3,SP,#+12
   \   00000130   0220A0E3           MOV      R2,#+2
   \   00000134   04009DE5           LDR      R0,[SP, #+4]
   \   00000138   001068E2           RSB      R1,R8,#+0
   \   0000013C   0F0000EF           SWI      +15
    200              i = fread(hFile, text, bufsize-1, &io_error);
    201              text[i] = 0;
   \   00000140   04009DE5           LDR      R0,[SP, #+4]
   \   00000144   0C308DE2           ADD      R3,SP,#+12
   \   00000148   0820A0E1           MOV      R2,R8
   \   0000014C   0710A0E1           MOV      R1,R7
   \   00000150   0B0000EF           SWI      +11
   \   00000154   0740C0E7           STRB     R4,[R0, +R7]
    202              fclose(hFile, &io_error);
   \   00000158   04009DE5           LDR      R0,[SP, #+4]
   \   0000015C   0C108DE2           ADD      R1,SP,#+12
   \   00000160   0D0000EF           SWI      +13
    203              s = strstr(text, delim);  
   \   00000164   641085E2           ADD      R1,R5,#+100
   \   00000168   0700A0E1           MOV      R0,R7
   \   0000016C   180100EF           SWI      +280
   \   00000170   0080A0E1           MOV      R8,R0
   \   00000174   4B0F8FE2           ADR      R0,??GetHistory_7  ;; ""
    204              
    205              head = NewLOGQ("");
   \   00000178   ........           _BLF     NewLOGQ,??NewLOGQ??rA
   \   0000017C   08008DE5           STR      R0,[SP, #+8]
    206              head->next = 0;
   \   00000180   004080E5           STR      R4,[R0, #+0]
   \   00000184   04D08DE2           ADD      SP,SP,#+4
   \   00000188   100000EA           B        ??GetHistory_8
    207              
    208              while(s && text)
    209              {
    210                direction = (*(s+delimlen-3))-0x30; 
    211                text = s+delimlen;
    212                s = strstr(text, delim); 
    213                e = !s?(text+strlen(text)):s;
    214                
    215                str = malloc(e-text+1);
    216                if(e-text > 0) memcpy(str, text, e-text);
    217                str[e-text] = 0; 
    218          
    219          //      snprintf(fullname, 127, "\r\n-----\r\n%08X\r\n%08X, %d\r\n%08X, %d\r\n----\r\n", text, e, direction, s, e-text);
    220                b = strstr(str, "\r\n");
    221          
    222                
    223          //      log = NewLOGQ(fullname);
    224                if(b)
    225                {
    226                  log = NewLOGQ(b+2);
    227                  if(b-str >= 0) memcpy(log->hdr, str, b-str);
    228                  log->hdr[b-str] = 0;
    229                }
    230                else
    231                {
    232                  log = NewLOGQ("");
   \                     ??GetHistory_9:
   \   0000018C   450F8FE2           ADR      R0,??GetHistory_7  ;; ""
   \   00000190   ........           _BLF     NewLOGQ,??NewLOGQ??rA
   \   00000194   00A0A0E1           MOV      R10,R0
    233                  strcpy(log->hdr, str);
   \   00000198   0910A0E1           MOV      R1,R9
   \   0000019C   10008AE2           ADD      R0,R10,#+16
   \   000001A0   1A0000EF           SWI      +26
    234                }
    235                
    236                log->type = direction|0x10;
   \                     ??GetHistory_10:
   \   000001A4   00009DE5           LDR      R0,[SP, #+0]
    237                log->acked = 0;
    238                log->ID=0xFFFFFFFF;
    239                
    240                AddLOGQ(&head, log);
   \   000001A8   0A10A0E1           MOV      R1,R10
   \   000001AC   100080E3           ORR      R0,R0,#0x10
   \   000001B0   0C008AE5           STR      R0,[R10, #+12]
   \   000001B4   04408AE5           STR      R4,[R10, #+4]
   \   000001B8   0400E0E1           MVN      R0,R4
   \   000001BC   08008AE5           STR      R0,[R10, #+8]
   \   000001C0   04008DE2           ADD      R0,SP,#+4
   \   000001C4   ........           _BLF     AddLOGQ,??AddLOGQ??rA
    241                
    242                //mfree(log);
    243                mfree(str);
   \   000001C8   0900A0E1           MOV      R0,R9
   \   000001CC   150000EF           SWI      +21
   \                     ??GetHistory_8:
   \   000001D0   000058E3           CMP      R8,#+0
   \   000001D4   00005713           CMPNE    R7,#+0
   \   000001D8   2700000A           BEQ      ??GetHistory_11
   \   000001DC   081086E0           ADD      R1,R6,R8
   \   000001E0   031051E5           LDRB     R1,[R1, #-3]
   \   000001E4   087086E0           ADD      R7,R6,R8
   \   000001E8   0700A0E1           MOV      R0,R7
   \   000001EC   301041E2           SUB      R1,R1,#+48
   \   000001F0   00108DE5           STR      R1,[SP, #+0]
   \   000001F4   641085E2           ADD      R1,R5,#+100
   \   000001F8   180100EF           SWI      +280
   \   000001FC   0080B0E1           MOVS     R8,R0
   \   00000200   0200001A           BNE      ??GetHistory_12
   \   00000204   0700A0E1           MOV      R0,R7
   \   00000208   1B0000EF           SWI      +27
   \   0000020C   070080E0           ADD      R0,R0,R7
   \                     ??GetHistory_12:
   \   00000210   07A040E0           SUB      R10,R0,R7
   \   00000214   01008AE2           ADD      R0,R10,#+1
   \   00000218   140000EF           SWI      +20
   \   0000021C   0090A0E1           MOV      R9,R0
   \   00000220   01005AE3           CMP      R10,#+1
   \   00000224   020000BA           BLT      ??GetHistory_13
   \   00000228   0A20A0E1           MOV      R2,R10
   \   0000022C   0710A0E1           MOV      R1,R7
   \   00000230   1E0100EF           SWI      +286
   \                     ??GetHistory_13:
   \   00000234   0940CAE7           STRB     R4,[R10, +R9]
   \   00000238   1B1F8FE2           ADR      R1,??GetHistory_7+0x4  ;; "\r\n"
   \   0000023C   0900A0E1           MOV      R0,R9
   \   00000240   180100EF           SWI      +280
   \   00000244   00B0B0E1           MOVS     R11,R0
   \   00000248   CFFFFF0A           BEQ      ??GetHistory_9
   \   0000024C   02008BE2           ADD      R0,R11,#+2
   \   00000250   ........           _BLF     NewLOGQ,??NewLOGQ??rA
   \   00000254   00A0A0E1           MOV      R10,R0
   \   00000258   09B05BE0           SUBS     R11,R11,R9
   \   0000025C   0300004A           BMI      ??GetHistory_14
   \   00000260   0B20A0E1           MOV      R2,R11
   \   00000264   0910A0E1           MOV      R1,R9
   \   00000268   10008AE2           ADD      R0,R10,#+16
   \   0000026C   1E0100EF           SWI      +286
   \                     ??GetHistory_14:
   \   00000270   0A008BE0           ADD      R0,R11,R10
   \   00000274   1040C0E5           STRB     R4,[R0, #+16]
   \   00000278   C9FFFFEA           B        ??GetHistory_10
    244              }
    245              AddFirstLOGQ(t, head->next);
   \                     ??GetHistory_11:
   \   0000027C   04009DE5           LDR      R0,[SP, #+4]
   \   00000280   001090E5           LDR      R1,[R0, #+0]
   \   00000284   90009DE5           LDR      R0,[SP, #+144]
   \   00000288   ........           BL       AddFirstLOGQ
    246              mfree(head);
   \   0000028C   04009DE5           LDR      R0,[SP, #+4]
   \   00000290   150000EF           SWI      +21
    247                
    248            }
    249          
    250            mfree(buf);
   \                     ??GetHistory_6:
   \   00000294   0C009DE5           LDR      R0,[SP, #+12]
   \   00000298   150000EF           SWI      +21
    251            return 0;
   \                     ??GetHistory_0:
   \   0000029C   0000A0E3           MOV      R0,#+0
   \   000002A0   94D08DE2           ADD      SP,SP,#+148
   \   000002A4   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??GetHistory_7:
   \   000002A8   00000000           DC8      "",+0,+0,+0
   \   000002AC   0D0A0000           DC8      "\r\n",+0
    252          }
    253          

   \                                 In segment CODE, align 4, keep-with-next
    254          void GetStatusById(char *buffer, int id)
    255          {
    256            
    257            // ??? Тут надо разбираться со статусами
    258            // Похоже, не все коды верные...
    259          switch(id)
   \                     GetStatusById:
   \   00000000   7C309FE5           LDR      R3,??GetStatusById_1+0xC  ;; `?<Constant "Online">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   070052E3           CMP      R2,#+7
   \   00000010   1400008A           BHI      ??GetStatusById_2
   \   00000014   01CF8FE2           ADR      R12,??GetStatusById_0
   \   00000018   02C0DCE7           LDRB     R12,[R12, R2]
   \   0000001C   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??GetStatusById_0:
   \   00000020   01030609           DC8      +1,+3,+6,+9
   \   00000024   0B0D010F           DC8      +11,+13,+1,+15
    260          {
    261          case 0: {strcpy(buffer,"Online");break;}
   \                     ??GetStatusById_3:
   \   00000028   0310A0E1           MOV      R1,R3
   \   0000002C   030000EA           B        ??GetStatusById_4
    262          case 1: {strcpy(buffer, "Invisible");break;}
   \                     ??GetStatusById_5:
   \   00000030   081083E2           ADD      R1,R3,#+8
   \   00000034   1A0000EF           SWI      +26
   \   00000038   0080BDE8           POP      {PC}
    263          case 2: {strcpy(buffer, "Away");break;}
   \                     ??GetStatusById_6:
   \   0000003C   141083E2           ADD      R1,R3,#+20
   \                     ??GetStatusById_4:
   \   00000040   1A0000EF           SWI      +26
   \   00000044   0080BDE8           POP      {PC}
    264          case 3: {strcpy(buffer, "N/A");break;}
   \                     ??GetStatusById_7:
   \   00000048   0A1F8FE2           ADR      R1,??GetStatusById_1  ;; "N/A"
   \   0000004C   FBFFFFEA           B        ??GetStatusById_4
    265          case 4: {strcpy(buffer, "Occupied");break;}
   \                     ??GetStatusById_8:
   \   00000050   1C1083E2           ADD      R1,R3,#+28
   \   00000054   F9FFFFEA           B        ??GetStatusById_4
    266          case 5: {strcpy(buffer, "DND");break;}
   \                     ??GetStatusById_9:
   \   00000058   071F8FE2           ADR      R1,??GetStatusById_1+0x4  ;; "DND"
   \   0000005C   F7FFFFEA           B        ??GetStatusById_4
    267          case 6: {strcpy(buffer, "Online");break;}
    268          case 7: {strcpy(buffer, "FFC");break;}
   \                     ??GetStatusById_10:
   \   00000060   061F8FE2           ADR      R1,??GetStatusById_1+0x8  ;; "FFC"
   \   00000064   F5FFFFEA           B        ??GetStatusById_4
    269          default: {sprintf(buffer, "UNK: %d", id);}
   \                     ??GetStatusById_2:
   \   00000068   0120A0E1           MOV      R2,R1
   \   0000006C   281083E2           ADD      R1,R3,#+40
   \   00000070   160000EF           SWI      +22
    270          }
    271          }
   \   00000074   0080BDE8           POP      {PC}             ;; return
   \                     ??GetStatusById_1:
   \   00000078   4E2F4100           DC8      "N/A"
   \   0000007C   444E4400           DC8      "DND"
   \   00000080   46464300           DC8      "FFC"
   \   00000084   ........           DC32     `?<Constant "Online">`
    272          

   \                                 In segment CODE, align 4, keep-with-next
    273          void LogStatusChange(CLIST *CListEx)
    274          {
   \                     LogStatusChange:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    275            extern int LOG_STATCH;
    276            if(!LOG_STATCH){return;}
   \   00000008   B0009FE5           LDR      R0,??LogStatusChange_0+0x4  ;; LOG_STATCH
   \   0000000C   E8D04DE2           SUB      SP,SP,#+232
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   2500000A           BEQ      ??LogStatusChange_1
    277            if(CListEx->state>7){return;}
   \   0000001C   B405D4E1           LDRH     R0,[R4, #+84]
   \   00000020   080050E3           CMP      R0,#+8
   \   00000024   2200002A           BCS      ??LogStatusChange_1
    278            if(CListEx->log==NULL){return;}
   \   00000028   900094E5           LDR      R0,[R4, #+144]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   1F00000A           BEQ      ??LogStatusChange_1
    279            char hdr[] = "(System message) ";
   \   00000034   88109FE5           LDR      R1,??LogStatusChange_0+0x8  ;; `?<Constant "(System message) ">`
   \   00000038   D4008DE2           ADD      R0,SP,#+212
   \   0000003C   2C5091E8           LDM      R1,{R2,R3,R5,R12,LR}
    280            char msg[] = "%s меняет статус на %s\r\n";
   \   00000040   80109FE5           LDR      R1,??LogStatusChange_0+0xC  ;; `?<Constant "%s \\354\\345\\355\\377\\345\\362 \\361\\3`
   \   00000044   2C5080E8           STM      R0,{R2,R3,R5,R12,LR}
   \   00000048   EC5091E8           LDM      R1,{R2,R3,R5-R7,R12,LR}
   \   0000004C   B8008DE2           ADD      R0,SP,#+184
   \   00000050   EC5080E8           STM      R0,{R2,R3,R5-R7,R12,LR}
    281            char message[100];
    282            char nickname[64];
    283            char status[20];
    284            if(CListEx->name)
   \   00000054   140094E2           ADDS     R0,R4,#+20
   \   00000058   0300000A           BEQ      ??LogStatusChange_2
    285            {
    286              strcpy(nickname, CListEx->name);
   \   0000005C   141084E2           ADD      R1,R4,#+20
   \   00000060   78008DE2           ADD      R0,SP,#+120
   \   00000064   1A0000EF           SWI      +26
   \   00000068   040000EA           B        ??LogStatusChange_3
    287            }
    288            else
    289            {
    290              snprintf(nickname,63, "%u", CListEx->uin);
   \                     ??LogStatusChange_2:
   \   0000006C   0C3094E5           LDR      R3,[R4, #+12]
   \   00000070   112F8FE2           ADR      R2,??LogStatusChange_0  ;; "%u"
   \   00000074   3F10A0E3           MOV      R1,#+63
   \   00000078   78008DE2           ADD      R0,SP,#+120
   \   0000007C   1B0100EF           SWI      +283
    291            }
    292            GetStatusById(status, CListEx->state);
   \                     ??LogStatusChange_3:
   \   00000080   B415D4E1           LDRH     R1,[R4, #+84]
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           BL       GetStatusById
    293            sprintf(message, msg, nickname, status);
   \   0000008C   0D30A0E1           MOV      R3,SP
   \   00000090   78208DE2           ADD      R2,SP,#+120
   \   00000094   B8108DE2           ADD      R1,SP,#+184
   \   00000098   14008DE2           ADD      R0,SP,#+20
   \   0000009C   160000EF           SWI      +22
    294            Add2History(CListEx, hdr, message, 0);
   \   000000A0   0030A0E3           MOV      R3,#+0
   \   000000A4   14208DE2           ADD      R2,SP,#+20
   \   000000A8   D4108DE2           ADD      R1,SP,#+212
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           BL       Add2History
    295          }
   \                     ??LogStatusChange_1:
   \   000000B4   E8D08DE2           ADD      SP,SP,#+232      ;; stack cleaning
   \   000000B8   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??LogStatusChange_0:
   \   000000BC   25750000           DC8      "%u",+0
   \   000000C0   ........           DC32     LOG_STATCH
   \   000000C4   ........           DC32     `?<Constant "(System message) ">`
   \   000000C8   ........           DC32     `?<Constant "%s \\354\\345\\355\\377\\345\\362 \\361\\3`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     `?<Constant "%s\\\\%u">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     HIST_PATH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     HISTORY_TYPE

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     HISTORY_SAVE_TYPE

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     UIN

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s\\\\%u">`:
   \   00000000   25735C257500       DC8 "%s\\%u"
   \   00000006   0000               DC8 0, 0
   \   00000008   25735C257328       DC8 "%s\\%s(%d).txt"
   \              2564292E7478
   \              7400        
   \   00000016   0000               DC8 0, 0
   \   00000018   25735C25642E       DC8 "%s\\%d.txt"
   \              74787400    
   \   00000022   0000               DC8 0, 0
   \   00000024   CEF8E8E1EAE0       DC8 "\316\370\350\341\352\340 I/O  #%u"
   \              20492F4F2020
   \              23257500    
   \   00000034   25735C25755C       DC8 "%s\\%u\\%s(%d).txt"
   \              257328256429
   \              2E74787400  
   \   00000045   000000             DC8 0, 0, 0
   \   00000048   25735C25755C       DC8 "%s\\%u\\%u.txt"
   \              25752E747874
   \              00          
   \   00000055   000000             DC8 0, 0, 0
   \   00000058   25735C25752E       DC8 "%s\\%u.txt"
   \              74787400    
   \   00000062   0000               DC8 0, 0
   \   00000064   0D0A2D2D2D2D       DC8 "\015\012--------------<>-000"
   \              2D2D2D2D2D2D
   \              2D2D2D2D3C3E
   \              2D30303000  
   \   0000007B   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257300             DC8 "%s"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\r\\n--------------<>-%0...">`:
   \   00000000   0D0A2D2D2D2D       DC8 "\015\012--------------<>-%04d\015\012"
   \              2D2D2D2D2D2D
   \              2D2D2D2D3C3E
   \              2D253034640D
   \              0A00        
   \   0000001A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   0D0A00             DC8 "\015\012"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Online">`:
   \   00000000   4F6E6C696E65       DC8 "Online"
   \              00          
   \   00000007   00                 DC8 0
   \   00000008   496E76697369       DC8 "Invisible"
   \              626C6500    
   \   00000012   0000               DC8 0, 0
   \   00000014   4177617900         DC8 "Away"
   \   00000019   000000             DC8 0, 0, 0
   \   0000001C   4F6363757069       DC8 "Occupied"
   \              656400      
   \   00000025   000000             DC8 0, 0, 0
   \   00000028   554E4B3A2025       DC8 "UNK: %d"
   \              6400        

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   4E2F4100           DC8 "N/A"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   444E4400           DC8 "DND"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   46464300           DC8 "FFC"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "(System message) ">`:
   \   00000000   285379737465       DC8 "(System message) "
   \              6D206D657373
   \              616765292000
   \   00000012   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s \\354\\345\\355\\377\\345\\362 \\361\\3`:
   \   00000000   257320ECE5ED       DC8 "%s \354\345\355\377\345\362 \361\362\340\362\363\361 \355\340 %s\015\012"
   \              FFE5F220F1F2
   \              E0F2F3F120ED
   \              E02025730D0A
   \              00          
   \   00000019   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257500             DC8 "%u"

   Maximum stack usage in bytes:

     Function        CSTACK
     --------        ------
     ActivateLastX       0
     Add2History        28
     AddFirstLOGQ        4
     CheckLOGQ           8
     DeleteLOGQ          8
     GetHistory        196
     GetStatusById       4
     LogStatusChange   252
     do_logwrite       332


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     do_logwrite                     356
     Add2History                     152
     ActivateLastX                    64
     AddFirstLOGQ                     64
     DeleteLOGQ                       40
     CheckLOGQ                       104
     GetHistory                      688
     GetStatusById                   136
     LogStatusChange                 204
     ??DataTable5                      4
     ??DataTable6                      4
     ??DataTable7                      4
     ??DataTable8                      4
     ??DataTable10                     4
     ?<Constant "%s\\%u">            124
     ?<Constant "%s">                  3
     ?<Constant "\r\n--------------<>-%0...">
                                      28
     ?<Constant "">                    1
     ?<Constant "\r\n">                3
     ?<Constant "Online">             48
     ?<Constant "N/A">                 4
     ?<Constant "DND">                 4
     ?<Constant "FFC">                 4
     ?<Constant "(System message) ">
                                      20
     ?<Constant "%s \354\345\355\377\345\362 \361\3
                                      28
     ?<Constant "%u">                  3
      Others                          60

 
 1 888 bytes in segment CODE
   270 bytes in segment DATA_C
 
 1 828 bytes of CODE  memory (+ 60 bytes shared)
   270 bytes of CONST memory

Errors: none
Warnings: none
