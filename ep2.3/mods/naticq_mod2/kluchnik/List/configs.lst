##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    23/Sep/2008  14:33:17 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\_MY_PROJECT_\naticq_mod2\configs.c      #
#    Command line    =  D:\Pasha\elf\_MY_PROJECT_\naticq_mod2\configs.c -D   #
#                       NEWSGOLD -D ELKA -D kluchnik -D BCFGGEN              #
#                       --preprocess D:\Pasha\elf\_MY_PROJECT_\naticq_mod2\k #
#                       luchnik\List\ -lC D:\Pasha\elf\_MY_PROJECT_\naticq_m #
#                       od2\kluchnik\List\ -o D:\Pasha\elf\_MY_PROJECT_\nati #
#                       cq_mod2\kluchnik\Obj\ -s9 --cpu_mode arm --endian    #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "D:\Pasha\Embedded       #
#                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I  #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\Pasha\elf\_MY_PROJECT_\naticq_mod2\kluchnik\List\ #
#                       configs.lst                                          #
#    Object file     =  D:\Pasha\elf\_MY_PROJECT_\naticq_mod2\kluchnik\Obj\c #
#                       onfigs.r79                                           #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\_MY_PROJECT_\naticq_mod2\configs.c
      1          #include "../inc/swilib.h"
      2          #include "../inc/cfg_items.h"
      3          #include "../inc/pnglist.h"
      4          #include "configs.h"
      5          #include "NatICQ.h"
      6          #include "conf_loader.h"
      7          
      8          //Теперь конфиги делаются отдельно!!!!как в экстраинфо! прикладываю два проекта 1stconfig && 2ndconfig
      9          //должны находится в папке с исходником натаси в своих папках!чтобы конфиг можно было удоьно редактировать
     10          //если изменили какой то из конфигов,то так же нужно изменить структуры в таком же порядке,
     11          //как зменили конфиг с темиже данными!и поправить функцию UpdateConfig(),и потом скомпилить отдельно эльфы 1stconfig && 2ndconfig,
     12          //чтобы получить разные конфиги...по другому пока не знаю как сделать...
     13          //та и короче...теперь меняется тока конфиг мода...оригинальный конфиг не трогать!
     14          //понятнее хз как объяснить....;)
     15          // by kluchnik 31.03.08 
     16          
     17          
     18          //--------------------------------------------------------------------//
     19          //------------------------  ORIGINAL CONFIG  -------------------------//
     20          //--------------------------------------------------------------------//
     21          
     22          typedef struct 
     23          {
     24            
     25            CFG_HDR cfghdr0;
     26            unsigned int UIN;
     27            
     28            CFG_HDR cfghdr1;
     29            char PASS[9];
     30          
     31            
     32          //--- NETWORK SETTING ---//
     33            
     34          CFG_HDR cfghdr2;
     35            CFG_HDR cfghdr2_1;
     36            char NATICQ_HOST[128];
     37          
     38            CFG_HDR cfghdr2_2;
     39            unsigned int NATICQ_PORT;
     40          
     41            CFG_HDR cfghdr2_3;
     42            unsigned int RECONNECT_TIME;
     43            
     44            CFG_HDR cfghdr2_4;
     45            char HIST_PATH[64];
     46          
     47            CFG_HDR cfghdr2_5;
     48            char SMILE_FILE[64];
     49          
     50            CFG_HDR cfghdr2_6;
     51            char SMILE_PATH[64];
     52          
     53            CFG_HDR cfghdr2_7;
     54            char ICON_PATH[64];
     55          
     56            CFG_HDR cfghdr2_8;
     57            char XSTATUSES_PATH[64];
     58          
     59            CFG_HDR cfghdr2_9;
     60            char TEMPLATES_PATH[64];
     61          CFG_HDR cfghdr3;//NETWORK SETTING
     62          
     63          
     64          //---  INTERFACE ---//
     65          
     66          CFG_HDR cfghdr4;
     67          //Status icon on mainscreen position
     68            CFG_HDR cfghdr4_1;
     69            unsigned int IDLEICON_X;
     70            unsigned int IDLEICON_Y;
     71            
     72          //Popup chat
     73            CFG_HDR cfghdr4_2;
     74            int DEVELOP_IF;
     75            CFG_CBOX_ITEM cfgcbox4_2[3];
     76            
     77          //Sorting
     78            CFG_HDR cfghdr4_3;
     79            int SORT_CLIST;
     80            CFG_CBOX_ITEM cfgcbox4_3[2];
     81          
     82          //First letter when typing
     83            CFG_HDR cfghdr4_4;
     84            int FIRST_LETTER;
     85            CFG_CBOX_ITEM cfgcbox4_4[2];
     86          
     87          
     88            
     89          //--- FONT AND COLOR ---//
     90            
     91           CFG_HDR cfghdr4_5;
     92              CFG_HDR cfghdr4_5_1;
     93              unsigned int I_COLOR;
     94            
     95              CFG_HDR cfghdr4_5_2;
     96              unsigned int TO_COLOR;
     97            
     98              CFG_HDR cfghdr4_5_3;
     99              unsigned int X_COLOR;
    100            
    101              CFG_HDR cfghdr4_5_4;
    102              unsigned int ED_FONT_SIZE;
    103            
    104              CFG_HDR cfghdr4_5_5;
    105              unsigned int ED_H_FONT_SIZE;
    106            
    107              CFG_HDR cfghdr4_5_6;
    108              unsigned int ED_X_FONT_SIZE;
    109            
    110              CFG_HDR cfghdr4_5_7;
    111              unsigned int O_I_COLOR;
    112            
    113              CFG_HDR cfghdr4_5_8;
    114              unsigned int O_TO_COLOR;
    115              
    116              CFG_HDR cfghdr4_5_9;
    117              unsigned int O_X_COLOR;
    118            
    119              CFG_HDR cfghdr4_5_10;
    120              unsigned int O_ED_FONT_SIZE;
    121            
    122              CFG_HDR cfghdr4_5_11;
    123              unsigned int O_ED_H_FONT_SIZE;
    124            
    125              CFG_HDR cfghdr4_5_12;
    126              unsigned int O_ED_X_FONT_SIZE;
    127            
    128              CFG_HDR cfghdr4_5_13;
    129              unsigned int ACK_COLOR;
    130            
    131              CFG_HDR cfghdr4_5_14;
    132              unsigned int UNACK_COLOR;
    133            CFG_HDR cfghdr4_6;//FONT & COLOR  
    134          
    135            
    136          //--- ILLUMINATION ---//
    137          //Illumination by BoBa 19.04.2007
    138            
    139            CFG_HDR cfghdr4_7;
    140              CFG_HDR cfghdr4_7_1;
    141              unsigned int ILL_DISP_RECV;
    142            
    143              CFG_HDR cfghdr4_7_2;
    144              unsigned int ILL_KEYS_RECV;
    145            
    146              CFG_HDR cfghdr4_7_3;
    147              unsigned int ILL_RECV_TMR;
    148            
    149              CFG_HDR cfghdr4_7_4;
    150              unsigned int ILL_RECV_FADE;
    151            
    152              CFG_HDR cfghdr4_7_5;
    153              unsigned int ILL_DISP_SEND;
    154            
    155              CFG_HDR cfghdr4_7_6;
    156              unsigned int ILL_KEYS_SEND;
    157            
    158              CFG_HDR cfghdr4_7_7;
    159              unsigned int ILL_SEND_TMR;
    160            
    161              CFG_HDR cfghdr4_7_8;
    162              unsigned int ILL_SEND_FADE;
    163            
    164              CFG_HDR cfghdr4_7_9;
    165              unsigned int ILL_OFF_FADE;
    166            CFG_HDR cfghdr4_8;  //ILLUMINATION
    167           
    168          CFG_HDR cfghdr5;//INTERFACE
    169          
    170          
    171          
    172          //---------------------//
    173          //       HISTORY       //
    174          //---------------------//
    175          
    176          //History
    177          CFG_HDR cfghdr6;
    178          
    179          //Enable history logging
    180              CFG_HDR cfghdr6_1;
    181              int LOG_ALL;
    182              CFG_CBOX_ITEM cfgcbox6_1[2];
    183          
    184          //History type
    185              CFG_HDR cfghdr6_2;
    186              int HISTORY_TYPE;
    187              CFG_CBOX_ITEM cfgcbox6_2[2];
    188            
    189          //Enable status logging
    190              CFG_HDR cfghdr6_3;
    191              int LOG_STATCH;
    192              CFG_CBOX_ITEM cfgcbox6_3[2];
    193          
    194          //Enable X-status logging
    195              CFG_HDR cfghdr6_4;
    196              int LOG_XTXT;
    197              CFG_CBOX_ITEM cfgcbox6_4[2];
    198            
    199          //Auto request X-status if entering to chat
    200              CFG_HDR cfghdr6_5;
    201              int ENA_AUTO_XTXT;
    202              CFG_CBOX_ITEM cfgcbox6_5[2];
    203          
    204          //Don't log X-status, if it same as prevision
    205              CFG_HDR cfghdr6_6;
    206              int NOT_LOG_SAME_XTXT;
    207              CFG_CBOX_ITEM cfgcbox6_6[2];
    208          
    209          //Buffer for fill from history
    210              CFG_HDR cfghdr6_7;
    211              int HISTORY_BUFFER;
    212              CFG_CBOX_ITEM cfgcbox6_7[6];
    213            
    214          CFG_HDR cfghdr7;//HISTORY
    215          
    216          
    217          //---------------------//
    218          //    NOTYFY POWER     //
    219          //---------------------//
    220          
    221          CFG_HDR cfghdr8;
    222          
    223            CFG_HDR cfghdr8_1;
    224            unsigned int sndVolume;
    225          
    226            CFG_HDR cfghdr8_2;
    227            unsigned int vibraPower;
    228          
    229            CFG_HDR cfghdr8_3;
    230            int VIBR_TYPE;
    231            CFG_CBOX_ITEM cfgcbox8_3[2];
    232          
    233            CFG_HDR cfghdr8_4;
    234            int VIBR_ON_CONNECT;
    235            CFG_CBOX_ITEM cfgcbox8_4[2];
    236          
    237            
    238          //--- SOUND SETUP ---//
    239            
    240            CFG_HDR cfghdr8_5;
    241          
    242              CFG_HDR cfghdr8_5_1;
    243              char sndStartup[64];
    244            
    245              CFG_HDR cfghdr8_5_2;
    246              char sndSrvMsg[64];
    247            
    248              CFG_HDR cfghdr8_5_3;
    249              char sndGlobal[64];
    250            
    251              CFG_HDR cfghdr8_5_4;
    252              char sndMsg[64];
    253            
    254              CFG_HDR cfghdr8_5_5;
    255              char sndMsgSent[64];
    256            CFG_HDR cfghdr8_6;//SOUND SETUP
    257            
    258          CFG_HDR cfghdr9;//NOTYFY POWER
    259          }myConfig;
    260          
    261          
    262          
    263          
    264          //----------------------------------------------//
    265          //                  MOD CONFIG                  //
    266          //----------------------------------------------//
    267          
    268          typedef struct
    269          {
    270            CFG_HDR cfghdr0;
    271            CFG_HDR cfghdr31;//={CFG_LEVEL,"Оригинальные настройки",1,0};
    272          
    273          //Popup chat
    274            CFG_HDR cfghdr4_2;//={CFG_CBOX,"Popup",0,2};
    275            int DEVELOP_IF_MOD;
    276            CFG_CBOX_ITEM cfgcbox15_1[2];//={"Use set orig.config", "After unlock"};
    277            
    278          //history
    279            CFG_HDR cfghdr6_8;//"Show Active contact"
    280            int SHOW_ACTIVE;
    281            CFG_CBOX_ITEM cfgcbox6_8[2];//={"No","Yes"};
    282          
    283            CFG_HDR cfghdr6_10;//={CFG_CBOX,"Save history with name",0,2};
    284            int HISTORY_SAVE_TYPE;// = 1;
    285            CFG_CBOX_ITEM cfgcbox6_9[2];//={"No","Yes"};
    286              
    287          //Buffer for fill from history
    288            CFG_HDR cfghdr6_7;//={CFG_CBOX,"History read buffer",0,2};
    289            int HISTORY_BUFFER_MOD;
    290            CFG_CBOX_ITEM cfgcbox6_7[3];//={"Use set orig.conf.","4 kbyte"};    
    291              
    292          
    293            CFG_HDR cfghdr181;//={CFG_CBOX,"Extended sounds",0,2};
    294            unsigned int extended_sounds;
    295            CFG_CBOX_ITEM cfgcbox18_3_2[2];//={"No","Yes"};
    296              
    297            CFG_HDR cfghdr181_2;//={CFG_CBOX,"Add sound type file",0,3};
    298            unsigned int ext_type_sounds;
    299            CFG_CBOX_ITEM cfgcbox182_3_2[3];
    300              
    301            CFG_HDR cfghdr15;//={CFG_STR_UTF8,"add online msg path",0,63};
    302            char sndGlobal2[64];
    303            
    304            CFG_HDR cfghdr161;//={CFG_STR_UTF8,"add new msg path",0,63};
    305            char sndMsg2[64];
    306              
    307            CFG_HDR cfghdr16r1;//={CFG_STR_UTF8,"ping sound",0,63};
    308            char pingsnd[64];
    309          
    310            CFG_HDR cfghdr2_7;
    311            char ICON_PATH2[64];
    312              
    313          CFG_HDR cfghdr30;
    314          
    315          //--------------------------------------//
    316          //              ИНТЕРФЕЙС               //
    317          //--------------------------------------//
    318          
    319          CFG_HDR cfghdrI_1;//интерфейс
    320          
    321            CFG_HDR cfghdrI_2;
    322            int VIEW_MODE;
    323                    
    324            CFG_HDR cfghdrI_3;
    325            int LINE_MODE;          
    326            
    327            CFG_HDR cfghdrI_4;  
    328            unsigned int MAXLOGMSG;    
    329            
    330            CFG_HDR cfghdrI_5;
    331            unsigned int ShowStatusToIconBar;    
    332            
    333            CFG_HDR cfghdrI_6;
    334            unsigned int PingToIconBar;    
    335            
    336            CFG_HDR cfghdrCl_1;//КЛ
    337              
    338               CFG_HDR cfghdrrCl_2;
    339               char CLBackgrClr[4];
    340               
    341               CFG_HDR cfghdrrCl_3;
    342               char SoftBackgrClr[4];   
    343               
    344               CFG_HDR cfghdrrCl_4;
    345               char SoftFontClr[4];
    346               
    347               CFG_HDR cfghdrrCl_5;
    348               char HeadBackgrClr[4];   
    349               
    350               CFG_HDR cfghdrrCl_6;
    351               char HeadFontClr[4];
    352               
    353               CFG_HDR cfghdrrCl_7;
    354               char ScrollBarClr[4];
    355               
    356               CFG_HDR cfghdrrCl_8;
    357               char ClCursorClr[4];
    358               
    359               CFG_HDR cfghdrrCl_9;
    360               char ClCursorBordClr[4];
    361               
    362               CFG_HDR cfghdrrCl_10;
    363               char ActiveClr[4];
    364               
    365               CFG_HDR cfghdrrCl_11;
    366               char NotActiveClr[4];
    367          
    368            CFG_HDR cfghdrCl_0;//КЛ
    369            
    370            CFG_HDR cfghdrM_1;//Гл Меню
    371            
    372                CFG_HDR cfghdrrM_4;
    373                char MMBackgrClr[4];
    374                
    375                CFG_HDR cfghdrrM_5;
    376                char MMBackgrBordClr[4];
    377                     
    378                CFG_HDR cfghdrrM_2;
    379                char MMCursorBGClr[4];
    380                
    381                CFG_HDR cfghdrrM_3;
    382                char MMCursorClr[4]; 
    383             
    384            CFG_HDR cfghdrM_0;
    385                    
    386            //--------------------
    387            
    388            
    389              CFG_HDR cfghdr_e1;//level       
    390                    
    391                  CFG_HDR cfghdr23;
    392                  char fontpath2[128];
    393                    
    394                  CFG_HDR cfghdr24;
    395                  char fontpath3[128];        
    396                  
    397                  CFG_HDR cfghdre1_2;
    398                  char fontpath4[128];
    399                    
    400                  CFG_HDR cfghdr_e1_3;
    401                  int PNG_HEADER;
    402                  
    403                  CFG_HDR cfghdr_e1_4;
    404                  int PNG_SOFTKEY;        
    405                  
    406              CFG_HDR cfghdr_e0; 
    407               
    408               
    409              CFG_HDR cfghdr_y1;//level     
    410               
    411                  CFG_HDR cfghdr_2_2;
    412                  int isSystemFont;
    413                    
    414                  CFG_HDR cfghdr2_8;  
    415                  unsigned int pngFont;  
    416          
    417                  CFG_HDR cfghdr2_9;
    418                  unsigned int HeadFont;
    419                  
    420              CFG_HDR cfghdr_y0;//     
    421          
    422          CFG_HDR cfghdrI_0;
    423          
    424          //----------- НАСТРОЙКА КЛАВИШ -----------//
    425          
    426          
    427          //View settings
    428            CFG_HDR cfghdr23_4;
    429            
    430          //Action on # button in contact list
    431            CFG_HDR cfghdr78_4520;
    432            int ActionResh;
    433            CFG_CBOX_ITEM cfgcbox_668_z[2];
    434            
    435          
    436          //Press vol up or vol down button in CL
    437            CFG_HDR cfghdr34_642;
    438            int isVolDownButton;
    439            CFG_CBOX_ITEM cfgcbox434_56[2];
    440            
    441            CFG_HDR cfghdr34_6342;
    442            int isVolUpButton;
    443            CFG_CBOX_ITEM cfgcbox4134_56[2];
    444            
    445            CFG_HDR cfghdr99_1;  
    446            
    447            //Long press right in chat
    448            CFG_HDR cfghdr4_67;
    449            int LongRightAction;
    450            CFG_CBOX_ITEM cfgcbox4_56[3];
    451          
    452          //Long press right in chat
    453            CFG_HDR cfghdr34_64;
    454            int LongLeftAction ;
    455            CFG_CBOX_ITEM cfgcbox444_56[2];
    456            
    457          
    458            CFG_HDR cfghdr23_1;
    459            int LongVolUpAction;
    460            CFG_CBOX_ITEM cfgcbox23_2[2];
    461          
    462            CFG_HDR cfghdr23_3;
    463            int LongVolDownAction ;
    464            CFG_CBOX_ITEM cfgcbox23_4[2];
    465          
    466            CFG_HDR cfghdr99_3_0;
    467            int longAct_0;
    468            CFG_CBOX_ITEM cfgcbox99_4_0[14];
    469          
    470            CFG_HDR cfghdr99_3_1;
    471            int longAct_1;
    472            CFG_CBOX_ITEM cfgcbox99_4_1[14];
    473            
    474            CFG_HDR cfghdr99_3_2;
    475            int longAct_2;
    476            CFG_CBOX_ITEM cfgcbox99_4_2[14];
    477                
    478            CFG_HDR cfghdr99_3_3;
    479            int longAct_3;
    480            CFG_CBOX_ITEM cfgcbox99_4_3[14];
    481                
    482            CFG_HDR cfghdr99_3_4;
    483            int longAct_4;
    484            CFG_CBOX_ITEM cfgcbox99_4_4[14];
    485            
    486            CFG_HDR cfghdr99_3_5;
    487            int longAct_5;
    488            CFG_CBOX_ITEM cfgcbox99_4_5[14];
    489                
    490            CFG_HDR cfghdr99_3_6;
    491            int longAct_6;
    492            CFG_CBOX_ITEM cfgcbox99_4_6[14];
    493            
    494            CFG_HDR cfghdr99_3_7;
    495            int longAct_7;
    496            CFG_CBOX_ITEM cfgcbox99_4_7[14];
    497                
    498            CFG_HDR cfghdr99_3_8;
    499            int longAct_8;
    500            CFG_CBOX_ITEM cfgcbox99_4_8[14];
    501                
    502            CFG_HDR cfghdr99_3_9;
    503            int longAct_9;
    504            CFG_CBOX_ITEM cfgcbox99_4_9[14];
    505            
    506            CFG_HDR cfghdr99_3_10;
    507            int longAct_10;
    508            CFG_CBOX_ITEM cfgcbox99_4_10[14];
    509                
    510            CFG_HDR cfghdr99_3_11;
    511            int longAct_11;
    512            CFG_CBOX_ITEM cfgcbox99_4_11[14];
    513                
    514            CFG_HDR cfghdr99_3_RB;
    515            int longAct_RB;
    516            CFG_CBOX_ITEM cfgcbox99_4_RB[14];
    517            
    518            CFG_HDR cfghdr00_2;
    519          
    520          CFG_HDR cfghdr223_5; //НАСТРОКА КЛАВИШ
    521          	
    522          	
    523          //----------- STATUS SETTING -----------//
    524            
    525          
    526          CFG_HDR cfghdr_45;
    527          #ifdef NEWSGOLD
    528          //Status icon on mainscreen position
    529              CFG_HDR cfghdr467_1;
    530              int ShowStatusIcon;
    531              CFG_CBOX_ITEM cfgcbox9_1[5];
    532          #endif
    533          #ifdef NEWSGOLD
    534          //Show x-status on iconbar or mainscreen
    535              CFG_HDR cfghdrz_68;
    536              int show_xstatus;
    537              CFG_CBOX_ITEM cfgcbox_8z[4];
    538          #else
    539              CFG_HDR cfghdrz_68;
    540              int show_xstatus;
    541              CFG_CBOX_ITEM cfgcbox_8z[2];
    542          #endif
    543          //Xstatus idle position
    544              CFG_HDR cfghdrz_1;
    545              unsigned int IDLEICON_XX;
    546              unsigned int IDLEICON_YX;
    547          
    548              CFG_HDR cfghdr780_1;
    549              int ind_set_xstatus;
    550              CFG_CBOX_ITEM cfgcbox8_z2[2];
    551              
    552          #ifdef NEWSGOLD
    553          //Number first pic status in folder img for show in iconbar
    554              CFG_HDR cfghdr19_22;
    555              unsigned int NumStatusToIconBar;  
    556          
    557          //Number first pic x-status in folder img for show in iconbar    
    558              CFG_HDR cfghdr19_242;
    559              unsigned int NumXStatusToIconBar;  
    560          
    561              CFG_HDR cfghdr_32_1;//={CFG_LEVEL,"Доп. статус в иконбар",1,0};
    562           
    563                CFG_HDR cfghdr32_2;//={CFG_UINT,"UIN",0,0xFFFFFFFF};
    564                unsigned int ADDITION_UIN;
    565                
    566                CFG_HDR cfghdr32_3;//={CFG_CBOX,"Показывать",0,2};
    567                int show_add_state;
    568                CFG_CBOX_ITEM cfgcbox32_4[2];
    569          
    570                CFG_HDR cfghdr32_5;//={CFG_CBOX,"Показывать хстатус",0,2};
    571                int show_add_xstate;
    572                CFG_CBOX_ITEM cfgcbox32_6[2];       
    573          
    574             CFG_HDR cfghdr_32_0;
    575          #endif
    576          CFG_HDR cfghdr_4;//STATUS SETTINGS
    577            
    578            
    579          //----------- PNGFONT SETTING -----------//     
    580            
    581          CFG_HDR cfghdr1_45;
    582             
    583          //Nember png-font or system
    584             CFG_HDR cfghdr65z;
    585             unsigned int fonto;
    586              
    587          //Path to png-font
    588             CFG_HDR cfghdr98;
    589             char fontpath[64];
    590          
    591          //Coordinates for message on idle
    592             CFG_HDR cfghd83;
    593             unsigned int msg_d_x ;
    594             unsigned int msg_d_y ;   
    595             
    596             CFG_HDR cfghdrs19_1;
    597             unsigned int main_msg_timer;
    598             
    599            CFG_HDR cfghdr60_2;
    600            char fontColor[4];
    601            
    602            CFG_HDR cfghdr60_3;
    603            char bgrColor[4];
    604          
    605          //Max show symbol on idle
    606            CFG_HDR cfghdr19a_1;
    607            unsigned int main_lenght;
    608                
    609            CFG_HDR cfghdr9z9;
    610            int use_cutter;
    611            CFG_CBOX_ITEM cfgcbox18a_4[2];
    612          
    613            CFG_HDR cfghdr65y;
    614            unsigned int spaco1;
    615                
    616          CFG_HDR cfghdrss_45;//PNGFONT SETTING
    617          
    618          
    619          //-------------------------------------------------------//
    620          //                SMILES COLOR SETTING                   //
    621          //-------------------------------------------------------//
    622          
    623          
    624          CFG_HDR cfghdr41;//={CFG_LEVEL,"Цвета выбора смайлов",1,0};
    625          
    626           CFG_HDR cfghdr40_1;//={CFG_COLOR,"Цвет фона",0,0};
    627           char SmBGcolor[4];
    628            
    629           CFG_HDR cfghdr40_2;//={CFG_COLOR,"Цвет курсора",0,0};
    630           char SmSelectColor[4];
    631            
    632           CFG_HDR cfghdr40_3;//={CFG_COLOR,"Цвет текста стат.",0,0};
    633           char SmFontColor[4];
    634          
    635          CFG_HDR cfghdr40;
    636            
    637          
    638          //-------------------------------------------------------//
    639          //                     IDLE SETTING                      //
    640          //-------------------------------------------------------//
    641          
    642          CFG_HDR cfghdr_m71;
    643          
    644              CFG_HDR cfghdr699;
    645              unsigned int onlineTime_x;
    646              unsigned int onlineTime_y;
    647          
    648              CFG_HDR cfghdr698;
    649              int Pause_Time;
    650              CFG_CBOX_ITEM cfgcbox85[2];
    651          
    652          
    653              CFG_HDR cfghd66;
    654              unsigned int Ping_X ;
    655              unsigned int Ping_Y ;
    656              
    657              CFG_HDR cfghdr1z9a_1;
    658              unsigned int ping_time_config ;
    659              
    660              CFG_HDR cfghdr298;
    661              int Is_Unread_On;
    662              CFG_CBOX_ITEM cfgcbox86[2];
    663              
    664              CFG_HDR cfghd67;
    665              unsigned int unread_X;
    666              unsigned int unread_Y;
    667              
    668              CFG_HDR cfghdr71_3;// = {CFG_CBOX,"Показывать подключ.",0,2};
    669              int Is_Online_On;
    670              CFG_CBOX_ITEM cfgcbox71_2[2];
    671              
    672              CFG_HDR cfghd71_1;// = {CFG_COORDINATES,"Подключ.контакты",0,0};
    673              unsigned int online_x;
    674              unsigned int online_y;  
    675          
    676          CFG_HDR cfghdr_m90;
    677          
    678          
    679          //-------------------------------------------------------//
    680          //                     AUTO STATUS                       //
    681          //-------------------------------------------------------//
    682          
    683          
    684          CFG_HDR cfghdr_m61;
    685          
    686              CFG_HDR cfghdr668;
    687              int Auto_Status;
    688              CFG_CBOX_ITEM cfgcbox89[2];
    689              
    690              
    691              CFG_HDR cfghdr_m61_1;// = {CFG_CBOX,"Вкл. недоступен",0,2};
    692              int IsOnNAStatus ;
    693              CFG_CBOX_ITEM cfgcbox_m61_2[2];//={"No","Yes"};
    694          
    695              CFG_HDR cfghdr61_8;//={CFG_UINT,"Время до недоступен(мин)",0,150};
    696              unsigned int NAStatusTime;    
    697              
    698              CFG_HDR cfghdr6678;// = {CFG_CBOX,"Включить автоматически при",0,2};
    699              int isAutoStatusOn;// = 0;
    700              CFG_CBOX_ITEM cfgcboxa1_153[13];//={"Выключен","В сети", "Отошел", "Недоступен", "Не беспокоить", "Занят", "Готов болтать", "Невидимый", "Депрессия", "Злой", "Дома", "Жру","На работе"};
    701          
    702              
    703              CFG_HDR cfghdr667;
    704              unsigned int AUTO_ENGADE;
    705              
    706              CFG_HDR cfghdr61_18;//={CFG_UINT,"Количество ответов",0,150};
    707              unsigned int automsgcount;//=3;
    708              
    709              CFG_HDR cfghdr_13;
    710              int time_zone;
    711              CFG_CBOX_ITEM cfgcbox_13[33];
    712              
    713              CFG_HDR cfghdrzz_8;
    714              char awayHelloMsg[24];
    715              
    716              CFG_HDR cfghdrzz_9;
    717              char awayMsg[256];
    718              
    719              CFG_HDR cfghdr66_2;
    720              int Reset_timer;
    721              CFG_CBOX_ITEM cfgcbox90[2];
    722            
    723          //Show away time on idle
    724              CFG_HDR cfghdr663;
    725              int showAwayIdle ;
    726              CFG_CBOX_ITEM cfgcbox82[2];
    727              
    728              CFG_HDR cfghd6_7;
    729              unsigned int auto_x;
    730              unsigned int auto_y;
    731            
    732          CFG_HDR cfghdr_m60;
    733          
    734          
    735          
    736          //-------------------------------------------------------//
    737          //                   AUTO CHANGE STATUS                  //
    738          //-------------------------------------------------------//
    739          
    740          
    741          CFG_HDR cfghdra1;
    742          
    743              CFG_HDR cfghdra1_3;
    744              int status_1;
    745              CFG_CBOX_ITEM cfgcboxa1_13[13];
    746          
    747              CFG_HDR cfghdra1_2;
    748              TTime tm_status_1;     
    749          
    750              CFG_HDR cfghdra1_1;
    751              int status_2;
    752              CFG_CBOX_ITEM cfgcboxa1_14[13];
    753          
    754              CFG_HDR cfghdra1_4;
    755              TTime tm_status_2;
    756          
    757              CFG_HDR cfghdra1_5;
    758              int status_3;
    759              CFG_CBOX_ITEM cfgcboxa1_15[13];
    760              
    761              CFG_HDR cfghdra1_6;
    762              TTime tm_status_3;
    763          
    764              CFG_HDR cfghdra1_7;
    765              int status_4;
    766              CFG_CBOX_ITEM cfgcboxa1_16[13];
    767              
    768              CFG_HDR cfghdra1_8;
    769              TTime tm_status_4;
    770          
    771              CFG_HDR cfghdra1_9;
    772              int status_5 ;
    773              CFG_CBOX_ITEM cfgcboxa1_17[13];
    774              
    775              CFG_HDR cfghdra1_14;
    776              TTime tm_status_5;
    777              
    778          CFG_HDR cfghdra0;
    779          
    780          //-------------------------------------------------------//
    781          //                    SCREEN SAVER                       //
    782          //-------------------------------------------------------//
    783          #ifdef NEWSGOLD
    784          
    785          CFG_HDR cfghdr_91;//={CFG_LEVEL,"Заставка",1,0};
    786          
    787              CFG_HDR cfghdr9_1;// = {CFG_CBOX,"Включить заставку",0,2};
    788              int isScreenSaverEna;
    789              CFG_CBOX_ITEM cfgcbox9_2[2];
    790              
    791              CFG_HDR cfghdr9_3;//={CFG_UINT,"Время до срабатывания(12=1мин)",0,1000};
    792              unsigned int screenSaverTime;
    793          CFG_HDR cfghdr_90;
    794          
    795          #endif
    796          
    797          //-------------------------------------------------------//
    798          //                     POPUP MESSAGE                     //
    799          //-------------------------------------------------------//
    800          
    801          CFG_HDR cfghdr_51;//={CFG_LEVEL,"Всплывающие сообщ.",1,0};
    802          
    803             CFG_HDR cfghdr51_0;// = {CFG_CBOX,"Показывать",0,4};
    804             int PopupShow;
    805             CFG_CBOX_ITEM cfgcbox51_2[4];//={"Ничего","Вход.сообш.","Подкл.конт.","Все"};
    806              
    807             CFG_HDR cfghdr51_1;//={CFG_STR_UTF8,"Формат входящ.сооб.",0,8};
    808             char PopupMsgString[9];//="%s";
    809              
    810             CFG_HDR cfghdr51_2;//={CFG_STR_UTF8,"Формат подкл.контакта",0,8};
    811             char PopupOnlineString[9];//=">%s<";  
    812              
    813             CFG_HDR cfghdr51_3;//={CFG_UINT,"Шрифт всплыв.сообщ",0,1000};
    814             unsigned int PopupFont;
    815             
    816             CFG_HDR cfghdr51_6;//={CFG_COLOR,"Фон всплыв.сообщ.",0,0};
    817             char PopupBGCl[4];
    818          
    819             CFG_HDR cfghdr51_4;//={CFG_COLOR,"Цвет подкл.контакта",0,0};
    820             char PopupOnlineCl[4];
    821              
    822             CFG_HDR cfghdr51_5;//={CFG_COLOR,"Цвет входящ.сообщ.",0,0};
    823             char PopupMsgCl[4];
    824             
    825          CFG_HDR cfghdr_50;//={CFG_LEVEL,"",0,0};
    826          
    827          
    828          
    829          //-------------------------------------------------------//
    830          //              SETTING CONTACTLIST HEADER               //
    831          //-------------------------------------------------------//
    832          
    833          CFG_HDR cfghdr_s1;//={CFG_LEVEL,"Настройка заголовка КЛ",1,0};
    834          
    835          //Show contact header with...
    836              CFG_HDR cfghdrs1_3;// = {CFG_CBOX,"Показывать в заголовке КЛ",0,6};
    837              int TIME_OR_MSG;
    838              CFG_CBOX_ITEM cfgcboxs2[6];//={"Время","Сообщения","Контакты","Все","Пнг шрифт(все)","Ничего"};
    839          
    840              CFG_HDR cfghdrs1_s1;//={CFG_UINT,"Время подкл./отключ.(сек)",0,1000};
    841              unsigned int ON_OFF_TIME;
    842          
    843              CFG_HDR cfghdrHead_1;
    844              int HEAD_STATUS;
    845            
    846              CFG_HDR cfghdrHead_2;
    847              int HEAD_XSTATUS;
    848            
    849              CFG_HDR cfghdrHead_3;
    850              int HEAD_PRIVATE;
    851            
    852              CFG_HDR cfghdrHead_4;
    853              int HEAD_PING;    
    854              
    855              CFG_HDR cfghdrs1_15;
    856              int ShowTraff;
    857              CFG_CBOX_ITEM cfgcboxs15[2];
    858              
    859              CFG_HDR cfghdrs1_11;//={CFG_CBOX,"Отображать кол-во контактов",0,2};
    860              int isShowCont;
    861              CFG_CBOX_ITEM cfgcboxs11[2];
    862          
    863              CFG_HDR cfghdrs1_12;//={CFG_CBOX,"Отображать кол-во непрочит.",0,2};
    864              int isShowUnread;
    865              CFG_CBOX_ITEM cfgcboxs12[2];
    866          
    867              CFG_HDR cfghdrs1_4;//={CFG_CBOX,"Отображать вибру [R] ",0,2};
    868              int isShowV ;
    869              CFG_CBOX_ITEM cfgcboxs3[2];
    870              
    871              CFG_HDR cfghdrs1_5;//={CFG_CBOX,"Отображать звук [S]",0,2};
    872              int isShowS ;
    873              CFG_CBOX_ITEM cfgcboxs5[2];
    874              
    875              CFG_HDR cfghdrs1_6;//={CFG_CBOX,"Отображать автостатус [A]",0,2};
    876              int isShowA ;
    877              CFG_CBOX_ITEM cfgcboxs6[2];
    878              
    879              CFG_HDR cfghdrs1_7;//={CFG_CBOX,"Отображать напоминалку [R]",0,2};
    880              int isShowR ;
    881              CFG_CBOX_ITEM cfgcboxs7[2];
    882              
    883              CFG_HDR cfghdrs1_8;//={CFG_CBOX,"Отображать статус/время [Tm/Xs]",0,2};
    884              int isShowTmXs ;
    885              CFG_CBOX_ITEM cfgcboxs8[2];
    886              
    887              CFG_HDR cfghdrs1_13;//={CFG_CBOX,"Отображать инвиз [I]",0,2};
    888              int isShowI;
    889              CFG_CBOX_ITEM cfgcboxs13[2];
    890              
    891              CFG_HDR cfghdrs1_9;//={CFG_CBOX,"Отображать заряд батареи",0,2};
    892              int isShowBat ;
    893              CFG_CBOX_ITEM cfgcboxs9[2];
    894              
    895              CFG_HDR cfghdrs1_10;//={CFG_CBOX,"Отображать время",0,2};
    896              int isShowTime;
    897              CFG_CBOX_ITEM cfgcboxs10[2];
    898              
    899          CFG_HDR cfghdr_s0;
    900          
    901          
    902          
    903          //-------------------------------------------------------//
    904          //                      EXTRA CONFIG                     //
    905          //-------------------------------------------------------//
    906          
    907          CFG_HDR cfghdr_m51;
    908          
    909           
    910          //Vibra count in vibra remaider
    911              CFG_HDR cfghdr65;
    912              unsigned int Vibra_cc;
    913          #ifdef NEWSGOLD
    914          //CSM for player
    915              CFG_HDR cfghdr66;
    916              char CsmAdr[9];  
    917              
    918          //Text before name track
    919              CFG_HDR cfghdr67;
    920              char playing[32];
    921              
    922          //Id3 tags is any status    
    923              CFG_HDR cfghdr7820;
    924              int Is_ID3_ANY_STATUS;
    925              CFG_CBOX_ITEM cfgcbox28_z[2];    
    926          
    927          #endif
    928          //Show command sending    
    929              CFG_HDR cfghdr780;
    930              int show_send_info;
    931              CFG_CBOX_ITEM cfgcbox8_z[2];
    932              
    933          //Show changr status contact
    934              CFG_HDR cfghdr7_80;
    935              int isLogStatusChange;
    936              CFG_CBOX_ITEM cfgcbox8df_z[2];
    937          
    938          //Show Loopback contact in CL
    939              CFG_HDR cfghdr71_30;
    940              int IsShowLoopback;
    941              CFG_CBOX_ITEM cfgcbox_3z[2];
    942              
    943              CFG_HDR cfghdr71_31;//={CFG_CBOX,"Открывать ссылки",0,2};
    944              int IsOpenBrowser;
    945              CFG_CBOX_ITEM cfgcbox_32[2];
    946              
    947              CFG_HDR cfghdr71_33;//={CFG_CBOX,"Открывать ссылки",0,2};
    948              int IsMultiBuffer;
    949              CFG_CBOX_ITEM cfgcbox_34[2];   
    950          
    951          CFG_HDR cfghdr_m50;//level
    952          
    953          //---------------------------------------//
    954          //        SETTING LOADING SCREEN         //
    955          //---------------------------------------//
    956          
    957          
    958          CFG_HDR cfghdr_q1;//={CFG_LEVEL,"Экран заргузки",1,0};
    959          
    960            CFG_HDR cfghdr_s2;// = {CFG_RECT, "Прогрессбар", 0, 0};
    961            RECT PBRECT;// = {4,281,236,294};//LOadScreenRECT
    962             
    963            CFG_HDR cfghdr_s3;//={CFG_COLOR,"Цвет прогрессбара",0,0};
    964            char PBcolor[4];//={0x00,0x00,0x00,100};//ProgressBarColor
    965          
    966            CFG_HDR cfghdr_s7;//={CFG_COLOR,"Фон прогрессбара",0,0};
    967            char BGPBcolor[4];//={0xFF,0xFF,0xFF,100};//BackGroundProgressBarColor
    968            
    969            CFG_HDR cfghdr_s4;//={CFG_CBOX,"Менять софты",0,2};
    970            int IsInvertSoftKey;
    971            CFG_CBOX_ITEM cfgcbox_s5[2];//={"No","Yes"};  
    972          
    973            CFG_HDR cfghdr_s6;//={CFG_CBOX,"Показывать инфу",0,2};
    974            int IsShowInfo;
    975            CFG_CBOX_ITEM cfgcbox_s7[2];//={"No","Yes"};    
    976          
    977          CFG_HDR cfghdr_q0;//={CFG_LEVEL,"",0,0};
    978          
    979          
    980          //--------------------------------------//
    981          
    982          CFG_HDR cfghdr11_10;
    983          char myName[32];
    984          
    985          CFG_HDR cfghdr11_9;
    986          char ignor_list[256];
    987          
    988          }myConfigMod;
    989          
    990          
    991          #ifdef NEWSGOLD
    992          #define DEFAULT_DISK "4"
    993          #else
    994          #define DEFAULT_DISK "0"
    995          #endif
    996          
    997          //------------ origin setting ---------------//
    998          
    999          int DEVELOP_IF_MOD;
   1000          int SHOW_ACTIVE;
   1001          int HISTORY_SAVE_TYPE;
   1002          int HISTORY_BUFFER_MOD;
   1003          unsigned int extended_sounds;
   1004          unsigned int ext_type_sounds;
   1005          char sndGlobal2[64];
   1006          char sndMsg2[64];
   1007          char pingsnd[64];
   1008          char ICON_PATH2[64];
   1009            
   1010          //-------------- INTERFACE ----------------//
   1011          
   1012          int LINE_MODE;
   1013          int VIEW_MODE;
   1014          unsigned int MAXLOGMSG;
   1015          unsigned int ShowStatusToIconBar;    
   1016          unsigned int PingToIconBar;    
   1017          
   1018          char CLBackgrClr[4];
   1019          
   1020          char SoftBackgrClr[4];   
   1021          char SoftFontClr[4];
   1022          
   1023          char HeadBackgrClr[4];   
   1024          char HeadFontClr[4];
   1025          char ScrollBarClr[4];
   1026          
   1027          char ClCursorClr[4];
   1028          char ClCursorBordClr[4];
   1029          char ActiveClr[4];
   1030          char NotActiveClr[4];
   1031          
   1032          char MMBackgrClr[4];
   1033          char MMBackgrBordClr[4];
   1034          char MMCursorBGClr[4];
   1035          char MMCursorClr[4]; 
   1036          
   1037          //--------------------
   1038            
   1039          char fontpath2[128];
   1040          char fontpath3[128];        
   1041          char fontpath4[128];
   1042          int PNG_HEADER;
   1043          int PNG_SOFTKEY;        
   1044          
   1045          int isSystemFont;
   1046          unsigned int pngFont;  
   1047          unsigned int HeadFont;
   1048          //------------ SETTING BUTTON -------------//
   1049          
   1050          int LongRightAction;
   1051          int LongLeftAction;
   1052          int ActionResh;
   1053          int LongVolUpAction;
   1054          int LongVolDownAction ;
   1055          int isVolUpButton;//If action vol up && vol down button on elka
   1056          int isVolDownButton;
   1057          
   1058          int longAct_0;
   1059          int longAct_1;
   1060          int longAct_2;
   1061          int longAct_3;
   1062          int longAct_4;
   1063          int longAct_5;
   1064          int longAct_6;
   1065          int longAct_7;
   1066          int longAct_8;
   1067          int longAct_9;
   1068          int longAct_10;
   1069          int longAct_11;
   1070          int longAct_RB;
   1071           
   1072          
   1073          //------------ STATUS SETTING --------------//
   1074          
   1075          #ifdef NEWSGOLD
   1076          int ShowStatusIcon;
   1077          #endif
   1078          int show_xstatus;
   1079          unsigned int IDLEICON_XX;
   1080          unsigned int IDLEICON_YX;
   1081          int ind_set_xstatus;
   1082          #ifdef NEWSGOLD
   1083          unsigned int NumStatusToIconBar;
   1084          unsigned int NumXStatusToIconBar;
   1085          
   1086          unsigned int ADDITION_UIN;
   1087          int show_add_state;
   1088          int show_add_xstate;
   1089          #endif
   1090          
   1091          
   1092          //----------- PNG FONT SETTING -------------//
   1093          
   1094          unsigned int fonto;
   1095          char fontpath[64];
   1096          unsigned int msg_d_x;
   1097          unsigned int msg_d_y;
   1098          unsigned int main_msg_timer;//Кол-во секунд сколько показывать сообщения на идле
   1099          char fontColor[];//Цвет для системного шрифта
   1100          char bgrColor[];
   1101          unsigned int main_lenght;
   1102          int use_cutter;
   1103          unsigned int spaco1;
   1104          unsigned int spaco2;
   1105            
   1106          
   1107          //------------ smiles color -----------------//
   1108          
   1109          char SmBGcolor[4];
   1110          char SmSelectColor[4];
   1111          char SmFontColor[4];
   1112          
   1113          
   1114          //---------------- idle set -----------------//
   1115          
   1116          //Online time on idle
   1117          unsigned int onlineTime_x;
   1118          unsigned int onlineTime_y;
   1119          int Pause_Time;  
   1120          
   1121          unsigned int Ping_X;
   1122          unsigned int Ping_Y;
   1123          unsigned int ping_time_config;
   1124          
   1125          int Is_Unread_On;
   1126          unsigned int unread_X;
   1127          unsigned int unread_Y;
   1128          
   1129          int Is_Online_On;
   1130          unsigned int online_x;
   1131          unsigned int online_y;  
   1132          
   1133          //---------------- AUTO STATUS ---------------//
   1134          
   1135          int Auto_Status;//Включен автостатус или нет 
   1136          int IsOnNAStatus;
   1137          unsigned int NAStatusTime;    
   1138          int isAutoStatusOn;// = 0;
   1139          unsigned int AUTO_ENGADE;
   1140          unsigned int automsgcount;
   1141          int time_zone;
   1142          char awayHelloMsg[24];//hello msg
   1143          char awayMsg[256];//message
   1144          int showAwayIdle;  
   1145          unsigned int auto_x;
   1146          unsigned int auto_y;
   1147          int Reset_timer;  
   1148          
   1149          
   1150          //------------- AUTO CHANGE STATUS ------------//
   1151          
   1152          TTime tm_status_1;
   1153          unsigned int status_1;
   1154          TTime tm_status_2;
   1155          unsigned int status_2;
   1156          TTime tm_status_3;
   1157          unsigned int status_3;
   1158          TTime tm_status_4;
   1159          unsigned int status_4;
   1160          TTime tm_status_5;
   1161          unsigned int status_5;    
   1162              
   1163          
   1164          //---------------  SCREEN SAVER ---------------//
   1165          
   1166          #ifdef NEWSGOLD
   1167          unsigned int screenSaverTime;
   1168          int isScreenSaverEna;
   1169          #endif
   1170          
   1171          //------------ popup message -----------------//
   1172          
   1173          int PopupShow;// = 3;
   1174          char PopupMsgString[9];//="%s";
   1175          char PopupOnlineString[9];//=">%s<";  
   1176          unsigned int PopupFont;//=FONT_SMALL;
   1177          char PopupBGCl[4];
   1178          char PopupOnlineCl[4];    
   1179          char PopupMsgCl[4];
   1180          
   1181          
   1182          //------------ CL HEADER SETTING -------------//
   1183          
   1184          int TIME_OR_MSG;
   1185          unsigned int ON_OFF_TIME;
   1186          
   1187          int HEAD_STATUS;
   1188          int HEAD_XSTATUS;
   1189          int HEAD_PRIVATE;
   1190          int HEAD_PING;
   1191              
   1192          int ShowTraff;
   1193          int isShowCont;
   1194          int isShowUnread;
   1195          int isShowI;
   1196          int isShowV;
   1197          int isShowS;
   1198          int isShowR;
   1199          int isShowA;
   1200          int isShowTmXs;
   1201          int isShowTime;
   1202          int isShowBat;
   1203          
   1204          
   1205          //-------------  EXTRA CONFIG ---------------//
   1206          
   1207          unsigned int Vibra_cc;
   1208          #ifdef NEWSGOLD
   1209          char playing[32];
   1210          char CsmAdr[9];
   1211          int Is_ID3_ANY_STATUS;
   1212          #endif
   1213          int show_send_info;  
   1214          int isLogStatusChange;
   1215          int IsShowLoopback;//Show Loopback contact in CL
   1216          int IsOpenBrowser;
   1217          int IsMultiBuffer;
   1218          
   1219          
   1220          //-------------  LOAD SCREEN SET ------------//
   1221          
   1222          RECT PBRECT;
   1223          char PBcolor[4];
   1224          char BGPBcolor[4];
   1225          int IsInvertSoftKey;
   1226          int IsShowInfo;
   1227          
   1228          
   1229          
   1230          char ignor_list[256];
   1231          //char myName[256];
   1232          char I_str[32];
   1233          
   1234          //------------ ORIGINAL SETTING -------------//  
   1235          
   1236          unsigned int UIN;
   1237          char PASS[9];
   1238          
   1239          int VIBR_ON_CONNECT;
   1240          int SHOW_ACTIVE;
   1241          int VIBR_TYPE;
   1242          int DEVELOP_IF;
   1243          
   1244          int LOG_ALL;
   1245          int LOG_STATCH;
   1246          int FIRST_LETTER;
   1247          int SORT_CLIST;
   1248          
   1249          
   1250          int HISTORY_TYPE;
   1251          unsigned int vibraPower;
   1252          
   1253          unsigned int IDLEICON_X;
   1254          unsigned int IDLEICON_Y;
   1255            
   1256          unsigned int I_COLOR;
   1257          unsigned int TO_COLOR;
   1258          unsigned int X_COLOR;
   1259          unsigned int O_I_COLOR;
   1260          unsigned int O_TO_COLOR;
   1261          unsigned int O_X_COLOR;
   1262            
   1263          unsigned int ED_FONT_SIZE;
   1264          unsigned int ED_H_FONT_SIZE;
   1265          unsigned int ED_X_FONT_SIZE;
   1266          unsigned int O_ED_FONT_SIZE;
   1267          unsigned int O_ED_H_FONT_SIZE;
   1268          unsigned int O_ED_X_FONT_SIZE;
   1269            
   1270          unsigned int ACK_COLOR;
   1271          unsigned int UNACK_COLOR;
   1272            
   1273          int ENA_AUTO_XTXT;
   1274          int NOT_LOG_SAME_XTXT;
   1275          int LOG_XTXT;
   1276          int HISTORY_BUFFER;  
   1277            
   1278          //Illumination by BoBa 19.04.2007
   1279          ///////////
   1280          unsigned int ILL_DISP_RECV;
   1281          unsigned int ILL_KEYS_RECV;
   1282          unsigned int ILL_RECV_TMR;
   1283          unsigned int ILL_DISP_SEND;
   1284          unsigned int ILL_KEYS_SEND;
   1285          unsigned int ILL_SEND_TMR;
   1286          unsigned int ILL_SEND_FADE;
   1287          unsigned int ILL_RECV_FADE;
   1288          unsigned int ILL_OFF_FADE;
   1289          
   1290          char sndStartup[64];
   1291          char sndSrvMsg[64];
   1292          char sndGlobal[64];
   1293          char sndGlobal2[64];
   1294          char sndMsg[64];
   1295          char sndMsgSent[64];
   1296          unsigned int sndVolume;
   1297            
   1298          char SMILE_FILE[64];
   1299          char TEMPLATES_PATH[64];
   1300          char ICON_PATH[64];
   1301          char SMILE_PATH[64];
   1302          char XSTATUSES_PATH[64];
   1303          char HIST_PATH[64];
   1304          char NATICQ_HOST[128];
   1305          unsigned int NATICQ_PORT;
   1306          unsigned int RECONNECT_TIME;
   1307          
   1308          
   1309          
   1310          //--------------------------------------------------------//
   1311          //                      INIT CONFIGS                      //
   1312          //--------------------------------------------------------//
   1313          
   1314          char per_s[]="%s";
   1315          
   1316          char suc_config_name[64];
   1317          char suc_config_name_mod[64];
   1318          extern int maincsm_id;

   \                                 In segment CODE, align 4, keep-with-next
   1319          int UpdateConfig()
   1320          { 
   \                     UpdateConfig:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   1321            int myConfigSize = sizeof(myConfig);
   1322            myConfig* myConf = (myConfig*)malloc(myConfigSize);
   1323            int newCfgFile;
   1324            int myConfigModSize = sizeof(myConfigMod);
   1325            myConfigMod* myConfMod = (myConfigMod*)malloc(myConfigModSize);
   1326            int newCfgModFile;// = InitConfig(myConfMod, myConfigModSize, "NATICQMod",disk);
   1327            
   1328          #ifdef kluchnik1
   1329            newCfgFile= InitConfig(myConf, myConfigSize, "NATICQ_2747093",4);
   1330            newCfgModFile = InitConfig(myConfMod, myConfigModSize, "NATICQMod_2747093",4);  
   1331            sprintf(suc_config_name,"4:\\zbin\\etc\\NATICQ_2747093.bcfg");      
   1332            sprintf(suc_config_name_mod,"4:\\zbin\\etc\\NATICQMod_2747093.bcfg");      
   1333          #else
   1334            if((newCfgFile= InitConfig(myConf, myConfigSize, "NATICQ",4))!=-1)
   \   00000004   A87B9FE5           LDR      R7,??UpdateConfig_0  ;; `?<Constant "0:\\\\zbin\\\\etc\\\\NATICQMod...">`
   \   00000008   A85B9FE5           LDR      R5,??UpdateConfig_0+0x4  ;; PBRECT
   \   0000000C   4400A0E3           MOV      R0,#+68
   \   00000010   4C0D80E3           ORR      R0,R0,#0x1300
   \   00000014   140000EF           SWI      +20
   \   00000018   00B0A0E1           MOV      R11,R0
   \   0000001C   BC60A0E3           MOV      R6,#+188
   \   00000020   5A6C86E3           ORR      R6,R6,#0x5A00
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   140000EF           SWI      +20
   \   0000002C   0040A0E1           MOV      R4,R0
   \   00000030   0430A0E3           MOV      R3,#+4
   \   00000034   682087E2           ADD      R2,R7,#+104
   \   00000038   4D1D83E3           ORR      R1,R3,#0x1340
   \   0000003C   0B00A0E1           MOV      R0,R11
   \   00000040   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000044   0090A0E1           MOV      R9,R0
   \   00000048   0080E0E3           MVN      R8,#+0
   \   0000004C   080059E1           CMP      R9,R8
   1335            { 
   1336              sprintf(suc_config_name,"4:\\zbin\\etc\\NATICQ.bcfg"); 
   \   00000050   1C108712           ADDNE    R1,R7,#+28
   \   00000054   0700001A           BNE      ??UpdateConfig_1
   1337            }
   1338            else
   1339            {
   1340               newCfgFile= InitConfig(myConf, myConfigSize, "NATICQ",0);
   \   00000058   0030A0E3           MOV      R3,#+0
   \   0000005C   682087E2           ADD      R2,R7,#+104
   \   00000060   4410A0E3           MOV      R1,#+68
   \   00000064   4C1D81E3           ORR      R1,R1,#0x1300
   \   00000068   0B00A0E1           MOV      R0,R11
   \   0000006C   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000070   0090A0E1           MOV      R9,R0
   1341               sprintf(suc_config_name,"0:\\zbin\\etc\\NATICQ.bcfg");
   \   00000074   501087E2           ADD      R1,R7,#+80
   \                     ??UpdateConfig_1:
   \   00000078   2800A0E3           MOV      R0,#+40
   \   0000007C   C00E80E3           ORR      R0,R0,#0xC00
   \   00000080   050080E0           ADD      R0,R0,R5
   \   00000084   160000EF           SWI      +22
   1342            }
   1343            
   1344            if((newCfgModFile = InitConfig(myConfMod, myConfigModSize, "NATICQMod",4))!=-1)
   \   00000088   0430A0E3           MOV      R3,#+4
   \   0000008C   A02087E2           ADD      R2,R7,#+160
   \   00000090   0610A0E1           MOV      R1,R6
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           _BLF     InitConfig,??InitConfig??rA
   \   0000009C   00A0A0E1           MOV      R10,R0
   \   000000A0   08005AE1           CMP      R10,R8
   1345            {
   1346              sprintf(suc_config_name_mod,"4:\\zbin\\etc\\NATICQMod.bcfg");      
   \   000000A4   34108712           ADDNE    R1,R7,#+52
   \   000000A8   0600001A           BNE      ??UpdateConfig_2
   1347            }
   1348            else
   1349            {
   1350               newCfgModFile = InitConfig(myConfMod, myConfigModSize, "NATICQMod",0);
   \   000000AC   0030A0E3           MOV      R3,#+0
   \   000000B0   A02087E2           ADD      R2,R7,#+160
   \   000000B4   0610A0E1           MOV      R1,R6
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   ........           _BLF     InitConfig,??InitConfig??rA
   \   000000C0   00A0A0E1           MOV      R10,R0
   1351               sprintf(suc_config_name_mod,"0:\\zbin\\etc\\NATICQMod.bcfg");      
   \   000000C4   0710A0E1           MOV      R1,R7
   \                     ??UpdateConfig_2:
   \   000000C8   6800A0E3           MOV      R0,#+104
   \   000000CC   C00E80E3           ORR      R0,R0,#0xC00
   \   000000D0   050080E0           ADD      R0,R0,R5
   \   000000D4   160000EF           SWI      +22
   \   000000D8   6800A0E3           MOV      R0,#+104
   \   000000DC   C00E80E3           ORR      R0,R0,#0xC00
   \   000000E0   050080E0           ADD      R0,R0,R5
   1352            }
   1353          #endif
   1354          
   1355          if(get_file_size(suc_config_name_mod)!=sizeof(myConfigMod) || get_file_size(suc_config_name)!=sizeof(myConfig))
   \   000000E4   ........           _BLF     get_file_size,??get_file_size??rA
   \   000000E8   060050E1           CMP      R0,R6
   \   000000EC   0700001A           BNE      ??UpdateConfig_3
   \   000000F0   2800A0E3           MOV      R0,#+40
   \   000000F4   C00E80E3           ORR      R0,R0,#0xC00
   \   000000F8   050080E0           ADD      R0,R0,R5
   \   000000FC   ........           _BLF     get_file_size,??get_file_size??rA
   \   00000100   4410A0E3           MOV      R1,#+68
   \   00000104   4C1D81E3           ORR      R1,R1,#0x1300
   \   00000108   010050E1           CMP      R0,R1
   \   0000010C   0700000A           BEQ      ??UpdateConfig_4
   1356          {
   1357             LockSched();
   \                     ??UpdateConfig_3:
   \   00000110   460100EF           SWI      +326
   1358             ShowMSG(2,(int)"Config mod not correct!!!");
   \   00000114   841087E2           ADD      R1,R7,#+132
   \   00000118   0200A0E3           MOV      R0,#+2
   \   0000011C   480100EF           SWI      +328
   1359             UnlockSched();
   \   00000120   470100EF           SWI      +327
   1360           //  void ElfKiller(void);
   1361             //SUBPROC((void *)ElfKiller);
   1362             CloseCSM(maincsm_id);
   \   00000124   900A9FE5           LDR      R0,??UpdateConfig_0+0x8  ;; maincsm_id
   \   00000128   000090E5           LDR      R0,[R0, #+0]
   \   0000012C   FC0100EF           SWI      +508
   1363          }
   1364            
   1365          if(newCfgFile!=-1 && newCfgModFile!=-1)//Если конфиги есть
   \                     ??UpdateConfig_4:
   \   00000130   080059E1           CMP      R9,R8
   \   00000134   08005A11           CMPNE    R10,R8
   \   00000138   9302000A           BEQ      ??UpdateConfig_5
   \   0000013C   8800A0E3           MOV      R0,#+136
   \   00000140   430C80E3           ORR      R0,R0,#0x4300
   \   00000144   046080E0           ADD      R6,R0,R4
   \   00000148   940996E5           LDR      R0,[R6, #+2452]
   1366          {  
   1367          //-------------------- MOD CONFIG ---------------------//
   1368            
   1369          //-------------- setting interface ---------------//
   1370            
   1371            TIME_OR_MSG=myConfMod->TIME_OR_MSG;  
   1372            IsShowLoopback=myConfMod->IsShowLoopback;//Show Loopback contact in CL  
   1373            SHOW_ACTIVE=myConfMod->SHOW_ACTIVE;
   \   0000014C   84A084E2           ADD      R10,R4,#+132
   \   00000150   240285E5           STR      R0,[R5, #+548]
   \   00000154   2400A0E3           MOV      R0,#+36
   \   00000158   540C80E3           ORR      R0,R0,#0x5400
   \   0000015C   040080E0           ADD      R0,R0,R4
   \   00000160   040290E5           LDR      R0,[R0, #+516]
   1374            HISTORY_SAVE_TYPE=myConfMod->HISTORY_SAVE_TYPE;
   1375            IsOpenBrowser=myConfMod->IsOpenBrowser; 
   1376            IsMultiBuffer=myConfMod->IsMultiBuffer;
   1377          
   1378            MAXLOGMSG=myConfMod->MAXLOGMSG;
   1379            sprintf(ICON_PATH2,myConfMod->ICON_PATH2);
   1380            
   1381            
   1382            ext_type_sounds=myConfMod->ext_type_sounds;
   1383             /*CLBackgrClr[0]=myConfMod->CLBackgrClr[0];
   1384              CLBackgrClr[1]=myConfMod->CLBackgrClr[1];
   1385               CLBackgrClr[2]=myConfMod->CLBackgrClr[2];
   1386                CLBackgrClr[3]=myConfMod->CLBackgrClr[3];
   1387             */
   1388          /*   for(int i=0;i<4;i++)
   1389             {
   1390               CLBackgrClr[i]=myConfMod->CLBackgrClr[i];
   1391               SoftBackgrClr[i]=myConfMod->SoftBackgrClr[i];
   1392               SoftFontClr[i]=myConfMod->SoftFontClr[i];
   1393          
   1394               HeadBackgrClr[i]=myConfMod->HeadBackgrClr[i];
   1395               HeadFontClr[i]=myConfMod->HeadFontClr[i];
   1396               ScrollBarClr[i]=myConfMod->ScrollBarClr[i];
   1397          
   1398               ClCursorClr[i]=myConfMod->ClCursorClr[i];
   1399               ClCursorBordClr[i]=myConfMod->ClCursorBordClr[i];
   1400               ActiveClr[i]=myConfMod->ActiveClr[i];
   1401               NotActiveClr[i]=myConfMod->NotActiveClr[i];
   1402                
   1403               MMBackgrClr[i]=myConfMod->MMBackgrClr[i];
   1404               MMBackgrBordClr[i]=myConfMod->MMBackgrBordClr[i];
   1405               MMCursorBGClr[i]=myConfMod->MMCursorBGClr[i];
   1406               MMCursorClr[i]=myConfMod->MMCursorClr[i]; 
   1407             }
   1408          */
   1409          //--------------------
   1410            
   1411              sprintf(fontpath2,per_s,myConfMod->fontpath2);
   \   00000164   E77FA0E3           MOV      R7,#+924
   \   00000168   780285E5           STR      R0,[R5, #+632]
   \   0000016C   70009AE5           LDR      R0,[R10, #+112]
   \   00000170   940285E5           STR      R0,[R5, #+660]
   \   00000174   E0009AE5           LDR      R0,[R10, #+224]
   \   00000178   D40085E5           STR      R0,[R5, #+212]
   \   0000017C   2400A0E3           MOV      R0,#+36
   \   00000180   540C80E3           ORR      R0,R0,#0x5400
   \   00000184   040080E0           ADD      R0,R0,R4
   \   00000188   740290E5           LDR      R0,[R0, #+628]
   \   0000018C   7C0285E5           STR      R0,[R5, #+636]
   \   00000190   2400A0E3           MOV      R0,#+36
   \   00000194   540C80E3           ORR      R0,R0,#0x5400
   \   00000198   040080E0           ADD      R0,R0,R4
   \   0000019C   E40290E5           LDR      R0,[R0, #+740]
   \   000001A0   800285E5           STR      R0,[R5, #+640]
   \   000001A4   48059AE5           LDR      R0,[R10, #+1352]
   \   000001A8   EC0085E5           STR      R0,[R5, #+236]
   \   000001AC   A800A0E3           MOV      R0,#+168
   \   000001B0   400E80E3           ORR      R0,R0,#0x400
   \   000001B4   041080E0           ADD      R1,R0,R4
   \   000001B8   420E85E2           ADD      R0,R5,#+1056
   \   000001BC   160000EF           SWI      +22
   \   000001C0   50029AE5           LDR      R0,[R10, #+592]
   \   000001C4   051087E0           ADD      R1,R7,R5
   \   000001C8   E00085E5           STR      R0,[R5, #+224]
   \   000001CC   D800A0E3           MOV      R0,#+216
   \   000001D0   900E80E3           ORR      R0,R0,#0x900
   \   000001D4   042080E0           ADD      R2,R0,R4
   \   000001D8   460E85E2           ADD      R0,R5,#+1120
   \   000001DC   160000EF           SWI      +22
   1412              sprintf(fontpath3,per_s,myConfMod->fontpath3);
   \   000001E0   8400A0E3           MOV      R0,#+132
   \   000001E4   A00E80E3           ORR      R0,R0,#0xA00
   \   000001E8   042080E0           ADD      R2,R0,R4
   \   000001EC   051087E0           ADD      R1,R7,R5
   \   000001F0   4E0E85E2           ADD      R0,R5,#+1248
   \   000001F4   160000EF           SWI      +22
   1413              sprintf(fontpath4,per_s,myConfMod->fontpath4);
   \   000001F8   B32E84E2           ADD      R2,R4,#+2864
   \   000001FC   051087E0           ADD      R1,R7,R5
   \   00000200   560E85E2           ADD      R0,R5,#+1376
   \   00000204   160000EF           SWI      +22
   1414              isSystemFont=myConfMod->isSystemFont;
   \   00000208   100C9AE5           LDR      R0,[R10, #+3088]
   1415              pngFont=myConfMod->pngFont;
   1416              PNG_HEADER=myConfMod->PNG_HEADER;
   1417              PNG_SOFTKEY=myConfMod->PNG_SOFTKEY;
   1418              LINE_MODE=myConfMod->LINE_MODE;  
   1419              VIEW_MODE=myConfMod->VIEW_MODE;
   1420              HeadFont=myConfMod->HeadFont;
   1421          
   1422              ShowStatusToIconBar=myConfMod->ShowStatusToIconBar;
   1423              PingToIconBar=myConfMod->PingToIconBar;
   1424          
   1425          //-------------- log status change ---------------//
   1426            
   1427            isLogStatusChange=myConfMod->isLogStatusChange;
   1428            
   1429            
   1430          //-------------- setting png font ----------------//
   1431            
   1432            sprintf(fontpath,per_s,myConfMod->fontpath);
   \   0000020C   051087E0           ADD      R1,R7,R5
   \   00000210   000185E5           STR      R0,[R5, #+256]
   \   00000214   400C9AE5           LDR      R0,[R10, #+3136]
   \   00000218   040185E5           STR      R0,[R5, #+260]
   \   0000021C   580B9AE5           LDR      R0,[R10, #+2904]
   \   00000220   F80085E5           STR      R0,[R5, #+248]
   \   00000224   880B9AE5           LDR      R0,[R10, #+2952]
   \   00000228   FC0085E5           STR      R0,[R5, #+252]
   \   0000022C   18059AE5           LDR      R0,[R10, #+1304]
   \   00000230   E40085E5           STR      R0,[R5, #+228]
   \   00000234   E8049AE5           LDR      R0,[R10, #+1256]
   \   00000238   E80085E5           STR      R0,[R5, #+232]
   \   0000023C   700C9AE5           LDR      R0,[R10, #+3184]
   \   00000240   080185E5           STR      R0,[R5, #+264]
   \   00000244   78059AE5           LDR      R0,[R10, #+1400]
   \   00000248   F00085E5           STR      R0,[R5, #+240]
   \   0000024C   A8059AE5           LDR      R0,[R10, #+1448]
   \   00000250   F40085E5           STR      R0,[R5, #+244]
   \   00000254   2400A0E3           MOV      R0,#+36
   \   00000258   540C80E3           ORR      R0,R0,#0x5400
   \   0000025C   040080E0           ADD      R0,R0,R4
   \   00000260   940190E5           LDR      R0,[R0, #+404]
   \   00000264   740285E5           STR      R0,[R5, #+628]
   \   00000268   2C00A0E3           MOV      R0,#+44
   \   0000026C   BC0D80E3           ORR      R0,R0,#0x2F00
   \   00000270   042080E0           ADD      R2,R0,R4
   \   00000274   5E0E85E2           ADD      R0,R5,#+1504
   \   00000278   160000EF           SWI      +22
   \   0000027C   7400A0E3           MOV      R0,#+116
   \   00000280   880D80E3           ORR      R0,R0,#0x2200
   \   00000284   049080E0           ADD      R9,R0,R4
   \   00000288   880C99E5           LDR      R0,[R9, #+3208]
   \   0000028C   840185E5           STR      R0,[R5, #+388]
   1433            fonto=myConfMod->fonto;
   1434            spaco1=myConfMod->spaco1;
   \   00000290   880E99E5           LDR      R0,[R9, #+3720]
   \   00000294   9C0185E5           STR      R0,[R5, #+412]
   1435            spaco2=myConfMod->spaco1;//так нада
   \   00000298   880E99E5           LDR      R0,[R9, #+3720]
   \   0000029C   A00185E5           STR      R0,[R5, #+416]
   1436            
   1437            
   1438          //---------- Цвет для системного шрифта ----------//
   1439            
   1440            for(int i=0;i<4;i++)
   \   000002A0   0000A0E3           MOV      R0,#+0
   1441            {
   1442              fontColor[i]=myConfMod->fontColor[i];
   \                     ??UpdateConfig_6:
   \   000002A4   FC10A0E3           MOV      R1,#+252
   \   000002A8   BC1D81E3           ORR      R1,R1,#0x2F00
   \   000002AC   042080E0           ADD      R2,R0,R4
   \   000002B0   021081E0           ADD      R1,R1,R2
   \   000002B4   0030D1E5           LDRB     R3,[R1, #+0]
   \   000002B8   052080E0           ADD      R2,R0,R5
   1443              bgrColor[i]=myConfMod->bgrColor[i];
   1444            }
   \   000002BC   010080E2           ADD      R0,R0,#+1
   \   000002C0   4033C2E5           STRB     R3,[R2, #+832]
   \   000002C4   3010D1E5           LDRB     R1,[R1, #+48]
   \   000002C8   040050E3           CMP      R0,#+4
   \   000002CC   4113C2E5           STRB     R1,[R2, #+833]
   \   000002D0   F3FFFFBA           BLT      ??UpdateConfig_6
   \   000002D4   7000A0E3           MOV      R0,#+112
   \   000002D8   C80D80E3           ORR      R0,R0,#0x3200
   \   000002DC   048080E0           ADD      R8,R0,R4
   \   000002E0   040198E5           LDR      R0,[R8, #+260]
   1445            
   1446            Is_Unread_On=myConfMod->Is_Unread_On;
   1447            
   1448            
   1449          //------------- automessage setting --------------//
   1450            
   1451            AUTO_ENGADE=myConfMod->AUTO_ENGADE;//time to away
   1452            isAutoStatusOn=myConfMod->isAutoStatusOn;
   1453            automsgcount=myConfMod->automsgcount;
   1454            Auto_Status=myConfMod->Auto_Status;//Включен автостатус или нет
   1455            time_zone=myConfMod->time_zone;
   1456            auto_x=myConfMod->auto_x;
   1457            auto_y=myConfMod->auto_y;
   1458            showAwayIdle=myConfMod->showAwayIdle;
   1459            sprintf(awayHelloMsg,per_s,myConfMod->awayHelloMsg);//hello msg
   \   000002E4   051087E0           ADD      R1,R7,R5
   \   000002E8   BC0185E5           STR      R0,[R5, #+444]
   \   000002EC   840598E5           LDR      R0,[R8, #+1412]
   \   000002F0   E40185E5           STR      R0,[R5, #+484]
   \   000002F4   B40398E5           LDR      R0,[R8, #+948]
   \   000002F8   E00185E5           STR      R0,[R5, #+480]
   \   000002FC   B40598E5           LDR      R0,[R8, #+1460]
   \   00000300   E80185E5           STR      R0,[R5, #+488]
   \   00000304   A40298E5           LDR      R0,[R8, #+676]
   \   00000308   D40185E5           STR      R0,[R5, #+468]
   \   0000030C   E40598E5           LDR      R0,[R8, #+1508]
   \   00000310   EC0185E5           STR      R0,[R5, #+492]
   \   00000314   840C98E5           LDR      R0,[R8, #+3204]
   \   00000318   F40185E5           STR      R0,[R5, #+500]
   \   0000031C   880C98E5           LDR      R0,[R8, #+3208]
   \   00000320   F80185E5           STR      R0,[R5, #+504]
   \   00000324   140C98E5           LDR      R0,[R8, #+3092]
   \   00000328   F00185E5           STR      R0,[R5, #+496]
   \   0000032C   A400A0E3           MOV      R0,#+164
   \   00000330   F00D80E3           ORR      R0,R0,#0x3C00
   \   00000334   042080E0           ADD      R2,R0,R4
   \   00000338   620E85E2           ADD      R0,R5,#+1568
   \   0000033C   160000EF           SWI      +22
   1460            snprintf(awayMsg,256,per_s,myConfMod->awayMsg);//message
   \   00000340   E800A0E3           MOV      R0,#+232
   \   00000344   F00D80E3           ORR      R0,R0,#0x3C00
   \   00000348   043080E0           ADD      R3,R0,R4
   \   0000034C   052087E0           ADD      R2,R7,R5
   \   00000350   401FA0E3           MOV      R1,#+256
   \   00000354   A70F87E2           ADD      R0,R7,#+668
   \   00000358   050080E0           ADD      R0,R0,R5
   \   0000035C   1B0100EF           SWI      +283
   1461            Reset_timer=myConfMod->Reset_timer;//reset away timer on send message or key down
   \   00000360   A40B98E5           LDR      R0,[R8, #+2980]
   \   00000364   FC0185E5           STR      R0,[R5, #+508]
   1462            IsOnNAStatus=myConfMod->IsOnNAStatus;
   \   00000368   140398E5           LDR      R0,[R8, #+788]
   \   0000036C   D80185E5           STR      R0,[R5, #+472]
   1463            NAStatusTime=myConfMod->NAStatusTime;    
   \   00000370   840398E5           LDR      R0,[R8, #+900]
   \   00000374   DC0185E5           STR      R0,[R5, #+476]
   1464            
   1465            
   1466          //------------- AUTO CHANGE STATUS ------------//
   1467          
   1468            tm_status_1=myConfMod->tm_status_1;
   \   00000378   5000A0E3           MOV      R0,#+80
   \   0000037C   410C80E3           ORR      R0,R0,#0x4100
   \   00000380   040080E0           ADD      R0,R0,R4
   \   00000384   030090E8           LDM      R0,{R0,R1}
   \   00000388   A80085E5           STR      R0,[R5, #+168]
   \   0000038C   AC1085E5           STR      R1,[R5, #+172]
   1469            status_1=myConfMod->status_1;
   \   00000390   100D98E5           LDR      R0,[R8, #+3344]
   \   00000394   000285E5           STR      R0,[R5, #+512]
   1470            
   1471            tm_status_2=myConfMod->tm_status_2;
   \   00000398   5400A0E3           MOV      R0,#+84
   \   0000039C   430C80E3           ORR      R0,R0,#0x4300
   \   000003A0   040080E0           ADD      R0,R0,R4
   \   000003A4   030090E8           LDM      R0,{R0,R1}
   \   000003A8   B00085E5           STR      R0,[R5, #+176]
   \   000003AC   B41085E5           STR      R1,[R5, #+180]
   1472            status_2=myConfMod->status_2;
   \   000003B0   140F98E5           LDR      R0,[R8, #+3860]
   \   000003B4   040285E5           STR      R0,[R5, #+516]
   1473            
   1474            tm_status_3=myConfMod->tm_status_3;
   \   000003B8   5800A0E3           MOV      R0,#+88
   \   000003BC   450C80E3           ORR      R0,R0,#0x4500
   \   000003C0   040080E0           ADD      R0,R0,R4
   \   000003C4   030090E8           LDM      R0,{R0,R1}
   \   000003C8   B80085E5           STR      R0,[R5, #+184]
   \   000003CC   BC1085E5           STR      R1,[R5, #+188]
   1475            status_3=myConfMod->status_3;
   \   000003D0   000096E5           LDR      R0,[R6, #+0]
   \   000003D4   080285E5           STR      R0,[R5, #+520]
   1476            
   1477            tm_status_4=myConfMod->tm_status_4;
   \   000003D8   5C00A0E3           MOV      R0,#+92
   \   000003DC   470C80E3           ORR      R0,R0,#0x4700
   \   000003E0   040080E0           ADD      R0,R0,R4
   \   000003E4   030090E8           LDM      R0,{R0,R1}
   \   000003E8   C00085E5           STR      R0,[R5, #+192]
   \   000003EC   C41085E5           STR      R1,[R5, #+196]
   1478            status_4=myConfMod->status_4;
   \   000003F0   040296E5           LDR      R0,[R6, #+516]
   \   000003F4   0C0285E5           STR      R0,[R5, #+524]
   1479            
   1480            tm_status_5=myConfMod->tm_status_5;
   \   000003F8   6000A0E3           MOV      R0,#+96
   \   000003FC   490C80E3           ORR      R0,R0,#0x4900
   \   00000400   040080E0           ADD      R0,R0,R4
   \   00000404   030090E8           LDM      R0,{R0,R1}
   \   00000408   C80085E5           STR      R0,[R5, #+200]
   \   0000040C   CC1085E5           STR      R1,[R5, #+204]
   1481            status_5=myConfMod->status_5;    
   \   00000410   080496E5           LDR      R0,[R6, #+1032]
   1482          
   1483          
   1484          //------------- Online time on idle --------------//
   1485            
   1486            onlineTime_x=myConfMod->onlineTime_x;
   1487            onlineTime_y=myConfMod->onlineTime_y;
   1488            Pause_Time=myConfMod->Pause_Time;
   1489          
   1490            
   1491          //----------------- setting ping -----------------//
   1492            
   1493            Ping_X=myConfMod->Ping_X;
   1494            Ping_Y=myConfMod->Ping_Y;
   1495            sprintf(pingsnd,per_s,myConfMod->pingsnd);
   \   00000414   051087E0           ADD      R1,R7,R5
   \   00000418   100285E5           STR      R0,[R5, #+528]
   \   0000041C   F80F99E5           LDR      R0,[R9, #+4088]
   \   00000420   A40185E5           STR      R0,[R5, #+420]
   \   00000424   000098E5           LDR      R0,[R8, #+0]
   \   00000428   A80185E5           STR      R0,[R5, #+424]
   \   0000042C   300098E5           LDR      R0,[R8, #+48]
   \   00000430   AC0185E5           STR      R0,[R5, #+428]
   \   00000434   A00098E5           LDR      R0,[R8, #+160]
   \   00000438   B00185E5           STR      R0,[R5, #+432]
   \   0000043C   A40098E5           LDR      R0,[R8, #+164]
   \   00000440   B40185E5           STR      R0,[R5, #+436]
   \   00000444   A00087E2           ADD      R0,R7,#+160
   \   00000448   042080E0           ADD      R2,R0,R4
   \   0000044C   F80F85E2           ADD      R0,R5,#+992
   \   00000450   160000EF           SWI      +22
   1496            ping_time_config=myConfMod->ping_time_config;
   \   00000454   D40098E5           LDR      R0,[R8, #+212]
   1497            
   1498          //---------- show online contact on idle --------//
   1499            
   1500            Is_Online_On=myConfMod->Is_Online_On;
   1501            online_x=myConfMod->online_x;
   1502            online_y=myConfMod->online_y;  
   1503          
   1504            
   1505          //------- setting last 5 message on idle ---------//
   1506            
   1507            main_msg_timer=myConfMod->main_msg_timer;
   1508            msg_d_x=myConfMod->msg_d_x;
   1509            msg_d_y=myConfMod->msg_d_y;
   1510            main_lenght=myConfMod->main_lenght;
   1511            use_cutter=myConfMod->use_cutter;
   1512            
   1513            
   1514          //----------------- player setting ---------------//
   1515          
   1516          #ifdef NEWSGOLD
   1517            sprintf(CsmAdr,per_s,myConfMod->CsmAdr);//csm mediaplayer
   \   00000458   051087E0           ADD      R1,R7,R5
   \   0000045C   B80185E5           STR      R0,[R5, #+440]
   \   00000460   A80198E5           LDR      R0,[R8, #+424]
   \   00000464   C80185E5           STR      R0,[R5, #+456]
   \   00000468   180298E5           LDR      R0,[R8, #+536]
   \   0000046C   CC0185E5           STR      R0,[R5, #+460]
   \   00000470   1C0298E5           LDR      R0,[R8, #+540]
   \   00000474   D00185E5           STR      R0,[R5, #+464]
   \   00000478   580D99E5           LDR      R0,[R9, #+3416]
   \   0000047C   900185E5           STR      R0,[R5, #+400]
   \   00000480   240D99E5           LDR      R0,[R9, #+3364]
   \   00000484   880185E5           STR      R0,[R5, #+392]
   \   00000488   280D99E5           LDR      R0,[R9, #+3368]
   \   0000048C   8C0185E5           STR      R0,[R5, #+396]
   \   00000490   E80D99E5           LDR      R0,[R9, #+3560]
   \   00000494   940185E5           STR      R0,[R5, #+404]
   \   00000498   180E99E5           LDR      R0,[R9, #+3608]
   \   0000049C   980185E5           STR      R0,[R5, #+408]
   \   000004A0   5400A0E3           MOV      R0,#+84
   \   000004A4   540C80E3           ORR      R0,R0,#0x5400
   \   000004A8   042080E0           ADD      R2,R0,R4
   \   000004AC   770E85E2           ADD      R0,R5,#+1904
   \   000004B0   160000EF           SWI      +22
   1518            sprintf(playing,per_s,myConfMod->playing);//text before name song
   \   000004B4   8C00A0E3           MOV      R0,#+140
   \   000004B8   540C80E3           ORR      R0,R0,#0x5400
   \   000004BC   042080E0           ADD      R2,R0,R4
   \   000004C0   051087E0           ADD      R1,R7,R5
   \   000004C4   750E85E2           ADD      R0,R5,#+1872
   \   000004C8   160000EF           SWI      +22
   1519          #endif
   1520            
   1521          //----------- number status to iconbar -----------//
   1522            
   1523          #ifdef NEWSGOLD
   1524            NumStatusToIconBar=myConfMod->NumStatusToIconBar;
   \   000004CC   680A99E5           LDR      R0,[R9, #+2664]
   \   000004D0   700185E5           STR      R0,[R5, #+368]
   1525            NumXStatusToIconBar=myConfMod->NumXStatusToIconBar;
   \   000004D4   980A99E5           LDR      R0,[R9, #+2712]
   \   000004D8   740185E5           STR      R0,[R5, #+372]
   1526            ShowStatusIcon=myConfMod->ShowStatusIcon;
   \   000004DC   440899E5           LDR      R0,[R9, #+2116]
   \   000004E0   5C0185E5           STR      R0,[R5, #+348]
   1527            
   1528            ADDITION_UIN=myConfMod->ADDITION_UIN;
   \   000004E4   F40A99E5           LDR      R0,[R9, #+2804]
   \   000004E8   780185E5           STR      R0,[R5, #+376]
   1529            show_add_state=myConfMod->show_add_state;
   \   000004EC   240B99E5           LDR      R0,[R9, #+2852]
   \   000004F0   7C0185E5           STR      R0,[R5, #+380]
   1530            show_add_xstate=myConfMod->show_add_xstate;
   \   000004F4   940B99E5           LDR      R0,[R9, #+2964]
   \   000004F8   800185E5           STR      R0,[R5, #+384]
   1531          #endif
   1532            
   1533            
   1534          //--------------- setting xstatus ----------------//
   1535            
   1536            show_xstatus=myConfMod->show_xstatus;
   \   000004FC   140999E5           LDR      R0,[R9, #+2324]
   \   00000500   600185E5           STR      R0,[R5, #+352]
   1537            IDLEICON_XX=myConfMod->IDLEICON_XX;
   \   00000504   C40999E5           LDR      R0,[R9, #+2500]
   \   00000508   640185E5           STR      R0,[R5, #+356]
   1538            IDLEICON_YX=myConfMod->IDLEICON_YX;
   \   0000050C   C80999E5           LDR      R0,[R9, #+2504]
   \   00000510   680185E5           STR      R0,[R5, #+360]
   1539            ind_set_xstatus=myConfMod->ind_set_xstatus;;
   \   00000514   F80999E5           LDR      R0,[R9, #+2552]
   \   00000518   6C0185E5           STR      R0,[R5, #+364]
   1540            
   1541          //------------------ setting keys ----------------//
   1542            
   1543            LongRightAction=myConfMod->LongRightAction;
   \   0000051C   A00E9AE5           LDR      R0,[R10, #+3744]
   \   00000520   0C0185E5           STR      R0,[R5, #+268]
   1544            LongLeftAction=myConfMod->LongLeftAction;  
   \   00000524   300F9AE5           LDR      R0,[R10, #+3888]
   \   00000528   100185E5           STR      R0,[R5, #+272]
   1545            ActionResh=myConfMod->ActionResh;//действие на # в контакт листе
   \   0000052C   240D9AE5           LDR      R0,[R10, #+3364]
   \   00000530   140185E5           STR      R0,[R5, #+276]
   1546              
   1547          //-  If action vol up && vol down button on elka -//
   1548            
   1549            LongVolUpAction=myConfMod->LongVolUpAction;
   \   00000534   A00F9AE5           LDR      R0,[R10, #+4000]
   \   00000538   180185E5           STR      R0,[R5, #+280]
   \   0000053C   9400A0E3           MOV      R0,#+148
   \   00000540   400D80E3           ORR      R0,R0,#0x1000
   \   00000544   040080E0           ADD      R0,R0,R4
   \   00000548   001090E5           LDR      R1,[R0, #+0]
   \   0000054C   1C1185E5           STR      R1,[R5, #+284]
   1550            LongVolDownAction=myConfMod->LongVolDownAction;
   1551            isVolUpButton=myConfMod->isVolUpButton;
   \   00000550   041E9AE5           LDR      R1,[R10, #+3588]
   \   00000554   201185E5           STR      R1,[R5, #+288]
   1552            isVolDownButton=myConfMod->isVolDownButton;
   \   00000558   941D9AE5           LDR      R1,[R10, #+3476]
   \   0000055C   241185E5           STR      R1,[R5, #+292]
   1553          
   1554          //---------- LONG PRESS ACTION ON CL -----------//
   1555          
   1556            longAct_0=myConfMod->longAct_0;
   \   00000560   701090E5           LDR      R1,[R0, #+112]
   \   00000564   281185E5           STR      R1,[R5, #+296]
   1557            longAct_1=myConfMod->longAct_1;
   \   00000568   601290E5           LDR      R1,[R0, #+608]
   \   0000056C   2C1185E5           STR      R1,[R5, #+300]
   1558            longAct_2=myConfMod->longAct_2;
   \   00000570   501490E5           LDR      R1,[R0, #+1104]
   \   00000574   301185E5           STR      R1,[R5, #+304]
   1559            longAct_3=myConfMod->longAct_3;
   \   00000578   401690E5           LDR      R1,[R0, #+1600]
   \   0000057C   341185E5           STR      R1,[R5, #+308]
   1560            longAct_4=myConfMod->longAct_4;
   \   00000580   301890E5           LDR      R1,[R0, #+2096]
   \   00000584   381185E5           STR      R1,[R5, #+312]
   1561            longAct_5=myConfMod->longAct_5;
   \   00000588   201A90E5           LDR      R1,[R0, #+2592]
   \   0000058C   3C1185E5           STR      R1,[R5, #+316]
   1562            longAct_6=myConfMod->longAct_6;
   \   00000590   101C90E5           LDR      R1,[R0, #+3088]
   \   00000594   401185E5           STR      R1,[R5, #+320]
   1563            longAct_7=myConfMod->longAct_7;
   \   00000598   001E90E5           LDR      R1,[R0, #+3584]
   \   0000059C   441185E5           STR      R1,[R5, #+324]
   1564            longAct_8=myConfMod->longAct_8;
   \   000005A0   F00F90E5           LDR      R0,[R0, #+4080]
   1565            longAct_9=myConfMod->longAct_9;
   1566            longAct_10=myConfMod->longAct_10;
   1567            longAct_11=myConfMod->longAct_11;
   1568            longAct_RB=myConfMod->longAct_RB;
   1569            
   1570          //---------------- other setting -----------------//
   1571            
   1572            sprintf(ignor_list,per_s,myConfMod->ignor_list);
   \   000005A4   051087E0           ADD      R1,R7,R5
   \   000005A8   480185E5           STR      R0,[R5, #+328]
   \   000005AC   000099E5           LDR      R0,[R9, #+0]
   \   000005B0   4C0185E5           STR      R0,[R5, #+332]
   \   000005B4   F00199E5           LDR      R0,[R9, #+496]
   \   000005B8   500185E5           STR      R0,[R5, #+336]
   \   000005BC   E00399E5           LDR      R0,[R9, #+992]
   \   000005C0   540185E5           STR      R0,[R5, #+340]
   \   000005C4   D00599E5           LDR      R0,[R9, #+1488]
   \   000005C8   580185E5           STR      R0,[R5, #+344]
   \   000005CC   BC00A0E3           MOV      R0,#+188
   \   000005D0   590C80E3           ORR      R0,R0,#0x5900
   \   000005D4   042080E0           ADD      R2,R0,R4
   \   000005D8   F80F87E2           ADD      R0,R7,#+992
   \   000005DC   050080E0           ADD      R0,R0,R5
   \   000005E0   160000EF           SWI      +22
   1573            sprintf(I_str,per_s,myConfMod->myName);
   \   000005E4   7000A0E3           MOV      R0,#+112
   \   000005E8   590C80E3           ORR      R0,R0,#0x5900
   \   000005EC   042080E0           ADD      R2,R0,R4
   \   000005F0   051087E0           ADD      R1,R7,R5
   \   000005F4   4E0E87E2           ADD      R0,R7,#+1248
   \   000005F8   050080E0           ADD      R0,R0,R5
   \   000005FC   160000EF           SWI      +22
   1574            show_send_info=myConfMod->show_send_info;
   \   00000600   2400A0E3           MOV      R0,#+36
   \   00000604   540C80E3           ORR      R0,R0,#0x5400
   \   00000608   040080E0           ADD      R0,R0,R4
   \   0000060C   240190E5           LDR      R0,[R0, #+292]
   \   00000610   700285E5           STR      R0,[R5, #+624]
   1575            
   1576            Vibra_cc=myConfMod->Vibra_cc;//vibra remainder
   \   00000614   2400A0E3           MOV      R0,#+36
   \   00000618   540C80E3           ORR      R0,R0,#0x5400
   \   0000061C   040090E7           LDR      R0,[R0, +R4]
   \   00000620   680285E5           STR      R0,[R5, #+616]
   1577            
   1578            unread_X=myConfMod->unread_X;
   \   00000624   740198E5           LDR      R0,[R8, #+372]
   \   00000628   C00185E5           STR      R0,[R5, #+448]
   1579            unread_Y=myConfMod->unread_Y;
   \   0000062C   780198E5           LDR      R0,[R8, #+376]
   \   00000630   C40185E5           STR      R0,[R5, #+452]
   1580          #ifdef NEWSGOLD
   1581            Is_ID3_ANY_STATUS = myConfMod->Is_ID3_ANY_STATUS;  
   \   00000634   2400A0E3           MOV      R0,#+36
   \   00000638   540C80E3           ORR      R0,R0,#0x5400
   \   0000063C   040080E0           ADD      R0,R0,R4
   \   00000640   B40090E5           LDR      R0,[R0, #+180]
   \   00000644   6C0285E5           STR      R0,[R5, #+620]
   1582          #endif
   1583            
   1584          //------------- Screen Saver setting -------------//
   1585            
   1586          #ifdef NEWSGOLD
   1587            screenSaverTime=myConfMod->screenSaverTime;
   \   00000648   D40696E5           LDR      R0,[R6, #+1748]
   \   0000064C   140285E5           STR      R0,[R5, #+532]
   1588            isScreenSaverEna=myConfMod->isScreenSaverEna;
   \   00000650   640696E5           LDR      R0,[R6, #+1636]
   \   00000654   180285E5           STR      R0,[R5, #+536]
   1589          #endif
   1590            
   1591          //------------ smiles && popup color -------------//
   1592          
   1593            for(int i=0;i<4;i++)
   \   00000658   0000A0E3           MOV      R0,#+0
   1594            {
   1595              SmBGcolor[i]=myConfMod->SmBGcolor[i];
   \                     ??UpdateConfig_7:
   \   0000065C   8410A0E3           MOV      R1,#+132
   \   00000660   C41D81E3           ORR      R1,R1,#0x3100
   \   00000664   042080E0           ADD      R2,R0,R4
   \   00000668   021081E0           ADD      R1,R1,R2
   \   0000066C   0030D1E5           LDRB     R3,[R1, #+0]
   \   00000670   052080E0           ADD      R2,R0,R5
   \   00000674   7C33C2E5           STRB     R3,[R2, #+892]
   1596              SmSelectColor[i]=myConfMod->SmSelectColor[i];
   \   00000678   3030D1E5           LDRB     R3,[R1, #+48]
   \   0000067C   8033C2E5           STRB     R3,[R2, #+896]
   1597              SmFontColor[i]=myConfMod->SmFontColor[i];
   \   00000680   6010D1E5           LDRB     R1,[R1, #+96]
   \   00000684   8413C2E5           STRB     R1,[R2, #+900]
   1598              
   1599              PopupBGCl[i]=myConfMod->PopupBGCl[i];;
   \   00000688   3410A0E3           MOV      R1,#+52
   \   0000068C   4C1C81E3           ORR      R1,R1,#0x4C00
   \   00000690   042080E0           ADD      R2,R0,R4
   \   00000694   021081E0           ADD      R1,R1,R2
   \   00000698   0030D1E5           LDRB     R3,[R1, #+0]
   \   0000069C   052080E0           ADD      R2,R0,R5
   \   000006A0   8833C2E5           STRB     R3,[R2, #+904]
   1600              PopupOnlineCl[i]=myConfMod->PopupOnlineCl[i];    
   \   000006A4   3030D1E5           LDRB     R3,[R1, #+48]
   \   000006A8   8C33C2E5           STRB     R3,[R2, #+908]
   1601              PopupMsgCl[i]=myConfMod->PopupMsgCl[i];
   \   000006AC   6030D1E5           LDRB     R3,[R1, #+96]
   \   000006B0   9033C2E5           STRB     R3,[R2, #+912]
   1602              
   1603              
   1604              PBcolor[i]=myConfMod->PBcolor[i];
   \   000006B4   D03BD1E5           LDRB     R3,[R1, #+3024]
   \   000006B8   9433C2E5           STRB     R3,[R2, #+916]
   1605              BGPBcolor[i]=myConfMod->BGPBcolor[i];
   \   000006BC   001CD1E5           LDRB     R1,[R1, #+3072]
   \   000006C0   9813C2E5           STRB     R1,[R2, #+920]
   1606              
   1607              
   1608                 CLBackgrClr[i]=myConfMod->CLBackgrClr[i];
   \   000006C4   BB1F87E2           ADD      R1,R7,#+748
   \   000006C8   042080E0           ADD      R2,R0,R4
   \   000006CC   021081E0           ADD      R1,R1,R2
   \   000006D0   0030D1E5           LDRB     R3,[R1, #+0]
   \   000006D4   052080E0           ADD      R2,R0,R5
   1609               SoftBackgrClr[i]=myConfMod->SoftBackgrClr[i];
   1610               SoftFontClr[i]=myConfMod->SoftFontClr[i];
   1611          
   1612               HeadBackgrClr[i]=myConfMod->HeadBackgrClr[i];
   1613               HeadFontClr[i]=myConfMod->HeadFontClr[i];
   1614               ScrollBarClr[i]=myConfMod->ScrollBarClr[i];
   1615          
   1616               ClCursorClr[i]=myConfMod->ClCursorClr[i];
   1617               ClCursorBordClr[i]=myConfMod->ClCursorBordClr[i];
   1618               ActiveClr[i]=myConfMod->ActiveClr[i];
   1619               NotActiveClr[i]=myConfMod->NotActiveClr[i];
   1620                
   1621               MMBackgrClr[i]=myConfMod->MMBackgrClr[i];
   1622               MMBackgrBordClr[i]=myConfMod->MMBackgrBordClr[i];
   1623               MMCursorBGClr[i]=myConfMod->MMCursorBGClr[i];
   1624               MMCursorClr[i]=myConfMod->MMCursorClr[i]; 
   1625            }
   \   000006D8   010080E2           ADD      R0,R0,#+1
   \   000006DC   4433C2E5           STRB     R3,[R2, #+836]
   \   000006E0   3030D1E5           LDRB     R3,[R1, #+48]
   \   000006E4   040050E3           CMP      R0,#+4
   \   000006E8   4833C2E5           STRB     R3,[R2, #+840]
   \   000006EC   6030D1E5           LDRB     R3,[R1, #+96]
   \   000006F0   4C33C2E5           STRB     R3,[R2, #+844]
   \   000006F4   9030D1E5           LDRB     R3,[R1, #+144]
   \   000006F8   5033C2E5           STRB     R3,[R2, #+848]
   \   000006FC   C030D1E5           LDRB     R3,[R1, #+192]
   \   00000700   5433C2E5           STRB     R3,[R2, #+852]
   \   00000704   F030D1E5           LDRB     R3,[R1, #+240]
   \   00000708   5833C2E5           STRB     R3,[R2, #+856]
   \   0000070C   2031D1E5           LDRB     R3,[R1, #+288]
   \   00000710   5C33C2E5           STRB     R3,[R2, #+860]
   \   00000714   5031D1E5           LDRB     R3,[R1, #+336]
   \   00000718   6033C2E5           STRB     R3,[R2, #+864]
   \   0000071C   8031D1E5           LDRB     R3,[R1, #+384]
   \   00000720   6433C2E5           STRB     R3,[R2, #+868]
   \   00000724   B031D1E5           LDRB     R3,[R1, #+432]
   \   00000728   6833C2E5           STRB     R3,[R2, #+872]
   \   0000072C   3832D1E5           LDRB     R3,[R1, #+568]
   \   00000730   6C33C2E5           STRB     R3,[R2, #+876]
   \   00000734   6832D1E5           LDRB     R3,[R1, #+616]
   \   00000738   7033C2E5           STRB     R3,[R2, #+880]
   \   0000073C   9832D1E5           LDRB     R3,[R1, #+664]
   \   00000740   7433C2E5           STRB     R3,[R2, #+884]
   \   00000744   C812D1E5           LDRB     R1,[R1, #+712]
   \   00000748   7813C2E5           STRB     R1,[R2, #+888]
   \   0000074C   C2FFFFBA           BLT      ??UpdateConfig_7
   1626          
   1627            
   1628          //----------------- popup message ----------------//
   1629          
   1630            PopupShow=myConfMod->PopupShow;
   \   00000750   5C0796E5           LDR      R0,[R6, #+1884]
   1631            sprintf(PopupMsgString,per_s,myConfMod->PopupMsgString);
   \   00000754   051087E0           ADD      R1,R7,R5
   \   00000758   1C0285E5           STR      R0,[R5, #+540]
   \   0000075C   9400A0E3           MOV      R0,#+148
   \   00000760   4B0C80E3           ORR      R0,R0,#0x4B00
   \   00000764   042080E0           ADD      R2,R0,R4
   \   00000768   E70F87E2           ADD      R0,R7,#+924
   \   0000076C   050080E0           ADD      R0,R0,R5
   \   00000770   160000EF           SWI      +22
   1632            sprintf(PopupOnlineString,per_s,myConfMod->PopupOnlineString);
   \   00000774   CC00A0E3           MOV      R0,#+204
   \   00000778   4B0C80E3           ORR      R0,R0,#0x4B00
   \   0000077C   042080E0           ADD      R2,R0,R4
   \   00000780   051087E0           ADD      R1,R7,R5
   \   00000784   EA0F87E2           ADD      R0,R7,#+936
   \   00000788   050080E0           ADD      R0,R0,R5
   \   0000078C   160000EF           SWI      +22
   1633            PopupFont=myConfMod->PopupFont;
   \   00000790   7C0896E5           LDR      R0,[R6, #+2172]
   1634            
   1635            
   1636            
   1637          //--------------- CL HEADER SETTING --------------//
   1638          
   1639            isShowCont=myConfMod->isShowCont;
   1640            ShowTraff=myConfMod->ShowTraff;
   1641            isShowUnread=myConfMod->isShowUnread;
   1642            isShowI=myConfMod->isShowI;
   1643            isShowV=myConfMod->isShowV;
   1644            isShowS=myConfMod->isShowS;
   1645            isShowR=myConfMod->isShowR;
   1646            isShowA=myConfMod->isShowA;
   1647            isShowTmXs=myConfMod->isShowTmXs;
   1648            isShowTime=myConfMod->isShowTime;
   1649            isShowBat=myConfMod->isShowBat;
   1650            ON_OFF_TIME=myConfMod->ON_OFF_TIME;
   1651            
   1652            HEAD_STATUS=myConfMod->HEAD_STATUS;
   1653            HEAD_XSTATUS=myConfMod->HEAD_XSTATUS;
   1654            HEAD_PRIVATE=myConfMod->HEAD_PRIVATE;
   1655            HEAD_PING=myConfMod->HEAD_PING;
   1656          
   1657          //-------------  LOAD SCREEN SET ------------//
   1658          
   1659            PBRECT=myConfMod->PBRECT;
   1660            IsInvertSoftKey=myConfMod->IsInvertSoftKey;
   1661            IsShowInfo=myConfMod->IsShowInfo;
   1662          
   1663          
   1664          //------------------ ORIGINAL CONFIG --------------------//
   1665            
   1666            UIN=myConf->UIN;
   1667            sprintf(PASS,per_s,myConf->PASS);
   \   00000794   5C208BE2           ADD      R2,R11,#+92
   \   00000798   200285E5           STR      R0,[R5, #+544]
   \   0000079C   E40B96E5           LDR      R0,[R6, #+3044]
   \   000007A0   400285E5           STR      R0,[R5, #+576]
   \   000007A4   740B96E5           LDR      R0,[R6, #+2932]
   \   000007A8   3C0285E5           STR      R0,[R5, #+572]
   \   000007AC   540C96E5           LDR      R0,[R6, #+3156]
   \   000007B0   440285E5           STR      R0,[R5, #+580]
   \   000007B4   F40E96E5           LDR      R0,[R6, #+3828]
   \   000007B8   480285E5           STR      R0,[R5, #+584]
   \   000007BC   C40C96E5           LDR      R0,[R6, #+3268]
   \   000007C0   4C0285E5           STR      R0,[R5, #+588]
   \   000007C4   340D96E5           LDR      R0,[R6, #+3380]
   \   000007C8   500285E5           STR      R0,[R5, #+592]
   \   000007CC   140E96E5           LDR      R0,[R6, #+3604]
   \   000007D0   540285E5           STR      R0,[R5, #+596]
   \   000007D4   A40D96E5           LDR      R0,[R6, #+3492]
   \   000007D8   580285E5           STR      R0,[R5, #+600]
   \   000007DC   840E96E5           LDR      R0,[R6, #+3716]
   \   000007E0   5C0285E5           STR      R0,[R5, #+604]
   \   000007E4   D40F96E5           LDR      R0,[R6, #+4052]
   \   000007E8   600285E5           STR      R0,[R5, #+608]
   \   000007EC   640F96E5           LDR      R0,[R6, #+3940]
   \   000007F0   640285E5           STR      R0,[R5, #+612]
   \   000007F4   840A96E5           LDR      R0,[R6, #+2692]
   \   000007F8   280285E5           STR      R0,[R5, #+552]
   \   000007FC   B40A96E5           LDR      R0,[R6, #+2740]
   \   00000800   2C0285E5           STR      R0,[R5, #+556]
   \   00000804   E40A96E5           LDR      R0,[R6, #+2788]
   \   00000808   300285E5           STR      R0,[R5, #+560]
   \   0000080C   140B96E5           LDR      R0,[R6, #+2836]
   \   00000810   340285E5           STR      R0,[R5, #+564]
   \   00000814   440B96E5           LDR      R0,[R6, #+2884]
   \   00000818   2C608BE2           ADD      R6,R11,#+44
   \   0000081C   380285E5           STR      R0,[R5, #+568]
   \   00000820   D000A0E3           MOV      R0,#+208
   \   00000824   570C80E3           ORR      R0,R0,#0x5700
   \   00000828   040080E0           ADD      R0,R0,R4
   \   0000082C   B010D0E1           LDRH     R1,[R0, #0]
   \   00000830   B010C5E1           STRH     R1,[R5, #+0]
   \   00000834   B210D0E1           LDRH     R1,[R0, #+2]
   \   00000838   B210C5E1           STRH     R1,[R5, #+2]
   \   0000083C   B410D0E1           LDRH     R1,[R0, #+4]
   \   00000840   B410C5E1           STRH     R1,[R5, #+4]
   \   00000844   B610D0E1           LDRH     R1,[R0, #+6]
   \   00000848   2400A0E3           MOV      R0,#+36
   \   0000084C   540C80E3           ORR      R0,R0,#0x5400
   \   00000850   B610C5E1           STRH     R1,[R5, #+6]
   \   00000854   040080E0           ADD      R0,R0,R4
   \   00000858   400490E5           LDR      R0,[R0, #+1088]
   \   0000085C   051087E0           ADD      R1,R7,R5
   \   00000860   840285E5           STR      R0,[R5, #+644]
   \   00000864   2400A0E3           MOV      R0,#+36
   \   00000868   540C80E3           ORR      R0,R0,#0x5400
   \   0000086C   040080E0           ADD      R0,R0,R4
   \   00000870   B00490E5           LDR      R0,[R0, #+1200]
   \   00000874   880285E5           STR      R0,[R5, #+648]
   \   00000878   000096E5           LDR      R0,[R6, #+0]
   \   0000087C   8C0285E5           STR      R0,[R5, #+652]
   \   00000880   500E87E2           ADD      R0,R7,#+1280
   \   00000884   050080E0           ADD      R0,R0,R5
   \   00000888   160000EF           SWI      +22
   1668            
   1669            SORT_CLIST=myConf->SORT_CLIST;
   \   0000088C   440596E5           LDR      R0,[R6, #+1348]
   1670            LOG_ALL=myConf->LOG_ALL;
   1671            LOG_STATCH=myConf->LOG_STATCH;
   1672            VIBR_TYPE=myConf->VIBR_TYPE;
   1673            VIBR_ON_CONNECT=myConf->VIBR_ON_CONNECT;
   1674          
   1675            DEVELOP_IF_MOD=myConfMod->DEVELOP_IF_MOD;
   1676            if(!DEVELOP_IF_MOD)
   1677              DEVELOP_IF=myConf->DEVELOP_IF;
   1678            else
   1679              DEVELOP_IF=3;
   1680            FIRST_LETTER=myConf->FIRST_LETTER;    
   1681          
   1682            HISTORY_TYPE=myConf->HISTORY_TYPE;
   1683            
   1684           
   1685            sprintf(HIST_PATH,per_s,myConf->HIST_PATH);
   \   00000890   732F8BE2           ADD      R2,R11,#+460
   \   00000894   AC0285E5           STR      R0,[R5, #+684]
   \   00000898   7C0B96E5           LDR      R0,[R6, #+2940]
   \   0000089C   051087E0           ADD      R1,R7,R5
   \   000008A0   A00285E5           STR      R0,[R5, #+672]
   \   000008A4   5C0C96E5           LDR      R0,[R6, #+3164]
   \   000008A8   A40285E5           STR      R0,[R5, #+676]
   \   000008AC   C40F96E5           LDR      R0,[R6, #+4036]
   \   000008B0   980285E5           STR      R0,[R5, #+664]
   \   000008B4   6000A0E3           MOV      R0,#+96
   \   000008B8   400D80E3           ORR      R0,R0,#0x1000
   \   000008BC   0B0090E7           LDR      R0,[R0, +R11]
   \   000008C0   900285E5           STR      R0,[R5, #+656]
   \   000008C4   00009AE5           LDR      R0,[R10, #+0]
   \   000008C8   D00085E5           STR      R0,[R5, #+208]
   \   000008CC   000050E3           CMP      R0,#+0
   \   000008D0   B4049605           LDREQ    R0,[R6, #+1204]
   \   000008D4   0300A013           MOVNE    R0,#+3
   \   000008D8   9C0285E5           STR      R0,[R5, #+668]
   \   000008DC   B40596E5           LDR      R0,[R6, #+1460]
   \   000008E0   A80285E5           STR      R0,[R5, #+680]
   \   000008E4   EC0B96E5           LDR      R0,[R6, #+3052]
   \   000008E8   B00285E5           STR      R0,[R5, #+688]
   \   000008EC   6800A0E3           MOV      R0,#+104
   \   000008F0   B00E80E3           ORR      R0,R0,#0xB00
   \   000008F4   050080E0           ADD      R0,R0,R5
   \   000008F8   160000EF           SWI      +22
   1686            sprintf(NATICQ_HOST,per_s,myConf->NATICQ_HOST);
   \   000008FC   C0208BE2           ADD      R2,R11,#+192
   \   00000900   051087E0           ADD      R1,R7,R5
   \   00000904   A800A0E3           MOV      R0,#+168
   \   00000908   B00E80E3           ORR      R0,R0,#0xB00
   \   0000090C   050080E0           ADD      R0,R0,R5
   \   00000910   160000EF           SWI      +22
   1687            NATICQ_PORT=myConf->NATICQ_PORT;
   \   00000914   400196E5           LDR      R0,[R6, #+320]
   \   00000918   300385E5           STR      R0,[R5, #+816]
   1688            RECONNECT_TIME=myConf->RECONNECT_TIME; //2058
   \   0000091C   700196E5           LDR      R0,[R6, #+368]
   \   00000920   340385E5           STR      R0,[R5, #+820]
   1689            
   1690            vibraPower=myConf->vibraPower;  
   \   00000924   940F96E5           LDR      R0,[R6, #+3988]
   \   00000928   B40285E5           STR      R0,[R5, #+692]
   1691            
   1692            IDLEICON_X=myConf->IDLEICON_X;
   \   0000092C   800496E5           LDR      R0,[R6, #+1152]
   \   00000930   B80285E5           STR      R0,[R5, #+696]
   1693            IDLEICON_Y=myConf->IDLEICON_Y;
   \   00000934   840496E5           LDR      R0,[R6, #+1156]
   \   00000938   BC0285E5           STR      R0,[R5, #+700]
   1694            
   1695            I_COLOR=myConf->I_COLOR;
   \   0000093C   500696E5           LDR      R0,[R6, #+1616]
   \   00000940   C00285E5           STR      R0,[R5, #+704]
   1696            TO_COLOR=myConf->TO_COLOR;
   \   00000944   800696E5           LDR      R0,[R6, #+1664]
   \   00000948   C40285E5           STR      R0,[R5, #+708]
   1697            X_COLOR=myConf->X_COLOR;
   \   0000094C   B00696E5           LDR      R0,[R6, #+1712]
   \   00000950   C80285E5           STR      R0,[R5, #+712]
   1698            O_I_COLOR=myConf->O_I_COLOR;
   \   00000954   700796E5           LDR      R0,[R6, #+1904]
   \   00000958   CC0285E5           STR      R0,[R5, #+716]
   1699            O_TO_COLOR=myConf->O_TO_COLOR;
   \   0000095C   A00796E5           LDR      R0,[R6, #+1952]
   \   00000960   D00285E5           STR      R0,[R5, #+720]
   1700            O_X_COLOR=myConf->O_X_COLOR;
   \   00000964   D00796E5           LDR      R0,[R6, #+2000]
   \   00000968   D40285E5           STR      R0,[R5, #+724]
   1701            
   1702            ED_FONT_SIZE=myConf->ED_FONT_SIZE;
   \   0000096C   E00696E5           LDR      R0,[R6, #+1760]
   \   00000970   D80285E5           STR      R0,[R5, #+728]
   1703            ED_H_FONT_SIZE=myConf->ED_H_FONT_SIZE;
   \   00000974   100796E5           LDR      R0,[R6, #+1808]
   \   00000978   DC0285E5           STR      R0,[R5, #+732]
   1704            ED_X_FONT_SIZE=myConf->ED_X_FONT_SIZE;
   \   0000097C   400796E5           LDR      R0,[R6, #+1856]
   \   00000980   E00285E5           STR      R0,[R5, #+736]
   1705            O_ED_FONT_SIZE=myConf->O_ED_FONT_SIZE;
   \   00000984   000896E5           LDR      R0,[R6, #+2048]
   \   00000988   E40285E5           STR      R0,[R5, #+740]
   1706            O_ED_H_FONT_SIZE=myConf->O_ED_H_FONT_SIZE;
   \   0000098C   300896E5           LDR      R0,[R6, #+2096]
   \   00000990   E80285E5           STR      R0,[R5, #+744]
   1707            O_ED_X_FONT_SIZE=myConf->O_ED_X_FONT_SIZE;
   \   00000994   600896E5           LDR      R0,[R6, #+2144]
   \   00000998   EC0285E5           STR      R0,[R5, #+748]
   1708            
   1709            ACK_COLOR=myConf->ACK_COLOR;
   \   0000099C   900896E5           LDR      R0,[R6, #+2192]
   \   000009A0   F00285E5           STR      R0,[R5, #+752]
   1710            UNACK_COLOR=myConf->UNACK_COLOR;
   \   000009A4   C00896E5           LDR      R0,[R6, #+2240]
   \   000009A8   F40285E5           STR      R0,[R5, #+756]
   1711            
   1712            ENA_AUTO_XTXT=myConf->ENA_AUTO_XTXT;
   \   000009AC   3C0D96E5           LDR      R0,[R6, #+3388]
   \   000009B0   F80285E5           STR      R0,[R5, #+760]
   1713            NOT_LOG_SAME_XTXT=myConf->NOT_LOG_SAME_XTXT;
   \   000009B4   AC0D96E5           LDR      R0,[R6, #+3500]
   \   000009B8   FC0285E5           STR      R0,[R5, #+764]
   1714            LOG_XTXT=myConf->LOG_XTXT;
   \   000009BC   CC0C96E5           LDR      R0,[R6, #+3276]
   \   000009C0   000385E5           STR      R0,[R5, #+768]
   1715            HISTORY_BUFFER_MOD=myConfMod->HISTORY_BUFFER_MOD;  
   \   000009C4   50019AE5           LDR      R0,[R10, #+336]
   \   000009C8   D80085E5           STR      R0,[R5, #+216]
   1716            if(!HISTORY_BUFFER_MOD)
   \   000009CC   000050E3           CMP      R0,#+0
   1717               HISTORY_BUFFER=myConf->HISTORY_BUFFER;  
   \   000009D0   1C0E9605           LDREQ    R0,[R6, #+3612]
   \   000009D4   0200000A           BEQ      ??UpdateConfig_8
   1718            else
   1719              HISTORY_BUFFER = ((HISTORY_BUFFER_MOD==1)?(5):(6));
   \   000009D8   010050E3           CMP      R0,#+1
   \   000009DC   0500A003           MOVEQ    R0,#+5
   \   000009E0   0600A013           MOVNE    R0,#+6
   \                     ??UpdateConfig_8:
   \   000009E4   040385E5           STR      R0,[R5, #+772]
   1720            
   1721          //Illumination by BoBa 19.04.2007
   1722          ///////////
   1723            ILL_DISP_RECV=myConf->ILL_DISP_RECV;
   \   000009E8   480996E5           LDR      R0,[R6, #+2376]
   1724            ILL_KEYS_RECV=myConf->ILL_KEYS_RECV;
   1725            ILL_DISP_SEND=myConf->ILL_DISP_SEND;
   1726            ILL_KEYS_SEND=myConf->ILL_KEYS_SEND;
   1727            ILL_SEND_TMR=myConf->ILL_SEND_TMR;
   1728            ILL_SEND_FADE=myConf->ILL_SEND_FADE;
   1729            ILL_RECV_TMR=myConf->ILL_RECV_TMR;
   1730            ILL_RECV_FADE=myConf->ILL_RECV_FADE;
   1731            ILL_OFF_FADE=myConf->ILL_OFF_FADE;
   1732            
   1733          //=============================Проигрывание звука=======================
   1734            
   1735            sprintf(sndStartup,per_s,myConf->sndStartup);
   \   000009EC   051087E0           ADD      R1,R7,R5
   \   000009F0   080385E5           STR      R0,[R5, #+776]
   \   000009F4   780996E5           LDR      R0,[R6, #+2424]
   \   000009F8   0C0385E5           STR      R0,[R5, #+780]
   \   000009FC   080A96E5           LDR      R0,[R6, #+2568]
   \   00000A00   140385E5           STR      R0,[R5, #+788]
   \   00000A04   380A96E5           LDR      R0,[R6, #+2616]
   \   00000A08   180385E5           STR      R0,[R5, #+792]
   \   00000A0C   680A96E5           LDR      R0,[R6, #+2664]
   \   00000A10   1C0385E5           STR      R0,[R5, #+796]
   \   00000A14   980A96E5           LDR      R0,[R6, #+2712]
   \   00000A18   200385E5           STR      R0,[R5, #+800]
   \   00000A1C   A80996E5           LDR      R0,[R6, #+2472]
   \   00000A20   100385E5           STR      R0,[R5, #+784]
   \   00000A24   D80996E5           LDR      R0,[R6, #+2520]
   \   00000A28   240385E5           STR      R0,[R5, #+804]
   \   00000A2C   C80A96E5           LDR      R0,[R6, #+2760]
   \   00000A30   280385E5           STR      R0,[R5, #+808]
   \   00000A34   D60E87E2           ADD      R0,R7,#+3424
   \   00000A38   0B2080E0           ADD      R2,R0,R11
   \   00000A3C   A800A0E3           MOV      R0,#+168
   \   00000A40   800E80E3           ORR      R0,R0,#0x800
   \   00000A44   050080E0           ADD      R0,R0,R5
   \   00000A48   160000EF           SWI      +22
   1736            sprintf(sndSrvMsg,per_s,myConf->sndSrvMsg);
   \   00000A4C   6800A0E3           MOV      R0,#+104
   \   00000A50   440D80E3           ORR      R0,R0,#0x1100
   \   00000A54   0B2080E0           ADD      R2,R0,R11
   \   00000A58   051087E0           ADD      R1,R7,R5
   \   00000A5C   880E40E2           SUB      R0,R0,#+2176
   \   00000A60   050080E0           ADD      R0,R0,R5
   \   00000A64   160000EF           SWI      +22
   1737            sprintf(sndGlobal,per_s,myConf->sndGlobal);
   \   00000A68   D400A0E3           MOV      R0,#+212
   \   00000A6C   440D80E3           ORR      R0,R0,#0x1100
   \   00000A70   0B2080E0           ADD      R2,R0,R11
   \   00000A74   051087E0           ADD      R1,R7,R5
   \   00000A78   2800A0E3           MOV      R0,#+40
   \   00000A7C   900E80E3           ORR      R0,R0,#0x900
   \   00000A80   050080E0           ADD      R0,R0,R5
   \   00000A84   160000EF           SWI      +22
   1738            sprintf(sndGlobal2,per_s,myConfMod->sndGlobal2);
   \   00000A88   D92F84E2           ADD      R2,R4,#+868
   \   00000A8C   051087E0           ADD      R1,R7,R5
   \   00000A90   6800A0E3           MOV      R0,#+104
   \   00000A94   900E80E3           ORR      R0,R0,#0x900
   \   00000A98   050080E0           ADD      R0,R0,R5
   \   00000A9C   160000EF           SWI      +22
   1739            sprintf(sndMsg,per_s,myConf->sndMsg);
   \   00000AA0   492D8BE2           ADD      R2,R11,#+4672
   \   00000AA4   051087E0           ADD      R1,R7,R5
   \   00000AA8   A800A0E3           MOV      R0,#+168
   \   00000AAC   900E80E3           ORR      R0,R0,#0x900
   \   00000AB0   050080E0           ADD      R0,R0,R5
   \   00000AB4   160000EF           SWI      +22
   1740            sprintf(sndMsg2,per_s,myConfMod->sndMsg2);
   \   00000AB8   F42F84E2           ADD      R2,R4,#+976
   \   00000ABC   051087E0           ADD      R1,R7,R5
   \   00000AC0   E80F85E2           ADD      R0,R5,#+928
   \   00000AC4   160000EF           SWI      +22
   1741            extended_sounds=myConfMod->extended_sounds;
   \   00000AC8   E0019AE5           LDR      R0,[R10, #+480]
   1742            sprintf(sndMsgSent,per_s,myConf->sndMsgSent);
   \   00000ACC   051087E0           ADD      R1,R7,R5
   \   00000AD0   DC0085E5           STR      R0,[R5, #+220]
   \   00000AD4   F10E87E2           ADD      R0,R7,#+3856
   \   00000AD8   0B2080E0           ADD      R2,R0,R11
   \   00000ADC   E800A0E3           MOV      R0,#+232
   \   00000AE0   900E80E3           ORR      R0,R0,#0x900
   \   00000AE4   050080E0           ADD      R0,R0,R5
   \   00000AE8   160000EF           SWI      +22
   1743            sndVolume=myConf->sndVolume; 
   \   00000AEC   640F96E5           LDR      R0,[R6, #+3940]
   1744          
   1745          //-----------------------------------------
   1746            
   1747            vibraPower=myConf->vibraPower;
   1748               
   1749            sprintf(TEMPLATES_PATH,per_s,myConf->TEMPLATES_PATH);
   \   00000AF0   FA2F8BE2           ADD      R2,R11,#+1000
   \   00000AF4   2C0385E5           STR      R0,[R5, #+812]
   \   00000AF8   940F96E5           LDR      R0,[R6, #+3988]
   \   00000AFC   051087E0           ADD      R1,R7,R5
   \   00000B00   B40285E5           STR      R0,[R5, #+692]
   \   00000B04   6800A0E3           MOV      R0,#+104
   \   00000B08   A00E80E3           ORR      R0,R0,#0xA00
   \   00000B0C   050080E0           ADD      R0,R0,R5
   \   00000B10   160000EF           SWI      +22
   1750            sprintf(ICON_PATH,per_s,myConf->ICON_PATH);
   \   00000B14   C42F8BE2           ADD      R2,R11,#+784
   \   00000B18   051087E0           ADD      R1,R7,R5
   \   00000B1C   A800A0E3           MOV      R0,#+168
   \   00000B20   A00E80E3           ORR      R0,R0,#0xA00
   \   00000B24   050080E0           ADD      R0,R0,R5
   \   00000B28   160000EF           SWI      +22
   1751            sprintf(SMILE_FILE,per_s,myConf->SMILE_FILE);
   \   00000B2C   8E2F8BE2           ADD      R2,R11,#+568
   \   00000B30   051087E0           ADD      R1,R7,R5
   \   00000B34   2800A0E3           MOV      R0,#+40
   \   00000B38   A00E80E3           ORR      R0,R0,#0xA00
   \   00000B3C   050080E0           ADD      R0,R0,R5
   \   00000B40   160000EF           SWI      +22
   1752            sprintf(SMILE_PATH,per_s,myConf->SMILE_PATH);
   \   00000B44   A92F8BE2           ADD      R2,R11,#+676
   \   00000B48   051087E0           ADD      R1,R7,R5
   \   00000B4C   E800A0E3           MOV      R0,#+232
   \   00000B50   A00E80E3           ORR      R0,R0,#0xA00
   \   00000B54   050080E0           ADD      R0,R0,R5
   \   00000B58   160000EF           SWI      +22
   1753            sprintf(XSTATUSES_PATH,per_s,myConf->XSTATUSES_PATH);
   \   00000B5C   DF2F8BE2           ADD      R2,R11,#+892
   \   00000B60   051087E0           ADD      R1,R7,R5
   \   00000B64   2800A0E3           MOV      R0,#+40
   \   00000B68   B00E80E3           ORR      R0,R0,#0xB00
   \   00000B6C   050080E0           ADD      R0,R0,R5
   \   00000B70   160000EF           SWI      +22
   1754            
   1755            
   1756          //-----------------------------------------
   1757            
   1758            mfree(myConf);
   \   00000B74   0B00A0E1           MOV      R0,R11
   \   00000B78   150000EF           SWI      +21
   1759            mfree(myConfMod);
   \   00000B7C   0400A0E1           MOV      R0,R4
   \   00000B80   150000EF           SWI      +21
   \   00000B84   0000A0E3           MOV      R0,#+0
   \   00000B88   F08FBDE8           POP      {R4-R11,PC}
   1760          }
   1761          else
   1762          {
   1763            LockSched();
   \                     ??UpdateConfig_5:
   \   00000B8C   460100EF           SWI      +326
   1764            ShowMSG(1,(int)"Can't open configs!");
   \   00000B90   701087E2           ADD      R1,R7,#+112
   \   00000B94   0100A0E3           MOV      R0,#+1
   \   00000B98   480100EF           SWI      +328
   1765            UnlockSched();
   \   00000B9C   470100EF           SWI      +327
   1766            CloseCSM(maincsm_id);
   \   00000BA0   14009FE5           LDR      R0,??UpdateConfig_0+0x8  ;; maincsm_id
   \   00000BA4   000090E5           LDR      R0,[R0, #+0]
   \   00000BA8   FC0100EF           SWI      +508
   1767          }
   1768          return 0;
   \   00000BAC   0000A0E3           MOV      R0,#+0
   \   00000BB0   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??UpdateConfig_0:
   \   00000BB4   ........           DC32     `?<Constant "0:\\\\zbin\\\\etc\\\\NATICQMod...">`
   \   00000BB8   ........           DC32     PBRECT
   \   00000BBC   ........           DC32     maincsm_id
   1769          }

   \                                 In segment DATA_I, align 4, align-sorted
   \                     PBRECT:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for PBRECT>`
   1770          
   1771          
   1772          
   1773          //===================================================================
   1774          
   1775          /*
   1776            uins.txt
   1777            uin;pass
   1778            123456;qwe123
   1779          */
   1780          
   1781          #define max_uin 10
   1782          ADDUIN addonuin[max_uin];
   \                     addonuin:
   \   00000008                      DS8 160
   \   000000A8                      REQUIRE `?<Initializer for addonuin>`
   \                     tm_status_1:
   \   000000A8                      DS8 8
   \   000000B0                      REQUIRE `?<Initializer for tm_status_1>`
   \                     tm_status_2:
   \   000000B0                      DS8 8
   \   000000B8                      REQUIRE `?<Initializer for tm_status_2>`
   \                     tm_status_3:
   \   000000B8                      DS8 8
   \   000000C0                      REQUIRE `?<Initializer for tm_status_3>`
   \                     tm_status_4:
   \   000000C0                      DS8 8
   \   000000C8                      REQUIRE `?<Initializer for tm_status_4>`
   \                     tm_status_5:
   \   000000C8                      DS8 8
   \   000000D0                      REQUIRE `?<Initializer for tm_status_5>`
   \                     DEVELOP_IF_MOD:
   \   000000D0                      DS8 4
   \   000000D4                      REQUIRE `?<Initializer for DEVELOP_IF_MOD>`
   \                     HISTORY_SAVE_TYPE:
   \   000000D4                      DS8 4
   \   000000D8                      REQUIRE `?<Initializer for HISTORY_SAVE_TYPE>`
   \                     HISTORY_BUFFER_MOD:
   \   000000D8                      DS8 4
   \   000000DC                      REQUIRE `?<Initializer for HISTORY_BUFFER_MOD>`
   \                     extended_sounds:
   \   000000DC                      DS8 4
   \   000000E0                      REQUIRE `?<Initializer for extended_sounds>`
   \                     ext_type_sounds:
   \   000000E0                      DS8 4
   \   000000E4                      REQUIRE `?<Initializer for ext_type_sounds>`
   \                     LINE_MODE:
   \   000000E4                      DS8 4
   \   000000E8                      REQUIRE `?<Initializer for LINE_MODE>`
   \                     VIEW_MODE:
   \   000000E8                      DS8 4
   \   000000EC                      REQUIRE `?<Initializer for VIEW_MODE>`
   \                     MAXLOGMSG:
   \   000000EC                      DS8 4
   \   000000F0                      REQUIRE `?<Initializer for MAXLOGMSG>`
   \                     ShowStatusToIconBar:
   \   000000F0                      DS8 4
   \   000000F4                      REQUIRE `?<Initializer for ShowStatusToIconBar>`
   \                     PingToIconBar:
   \   000000F4                      DS8 4
   \   000000F8                      REQUIRE `?<Initializer for PingToIconBar>`
   \                     PNG_HEADER:
   \   000000F8                      DS8 4
   \   000000FC                      REQUIRE `?<Initializer for PNG_HEADER>`
   \                     PNG_SOFTKEY:
   \   000000FC                      DS8 4
   \   00000100                      REQUIRE `?<Initializer for PNG_SOFTKEY>`
   \                     isSystemFont:
   \   00000100                      DS8 4
   \   00000104                      REQUIRE `?<Initializer for isSystemFont>`
   \                     pngFont:
   \   00000104                      DS8 4
   \   00000108                      REQUIRE `?<Initializer for pngFont>`
   \                     HeadFont:
   \   00000108                      DS8 4
   \   0000010C                      REQUIRE `?<Initializer for HeadFont>`
   \                     LongRightAction:
   \   0000010C                      DS8 4
   \   00000110                      REQUIRE `?<Initializer for LongRightAction>`
   \                     LongLeftAction:
   \   00000110                      DS8 4
   \   00000114                      REQUIRE `?<Initializer for LongLeftAction>`
   \                     ActionResh:
   \   00000114                      DS8 4
   \   00000118                      REQUIRE `?<Initializer for ActionResh>`
   \                     LongVolUpAction:
   \   00000118                      DS8 4
   \   0000011C                      REQUIRE `?<Initializer for LongVolUpAction>`
   \                     LongVolDownAction:
   \   0000011C                      DS8 4
   \   00000120                      REQUIRE `?<Initializer for LongVolDownAction>`
   \                     isVolUpButton:
   \   00000120                      DS8 4
   \   00000124                      REQUIRE `?<Initializer for isVolUpButton>`
   \                     isVolDownButton:
   \   00000124                      DS8 4
   \   00000128                      REQUIRE `?<Initializer for isVolDownButton>`
   \                     longAct_0:
   \   00000128                      DS8 4
   \   0000012C                      REQUIRE `?<Initializer for longAct_0>`
   \                     longAct_1:
   \   0000012C                      DS8 4
   \   00000130                      REQUIRE `?<Initializer for longAct_1>`
   \                     longAct_2:
   \   00000130                      DS8 4
   \   00000134                      REQUIRE `?<Initializer for longAct_2>`
   \                     longAct_3:
   \   00000134                      DS8 4
   \   00000138                      REQUIRE `?<Initializer for longAct_3>`
   \                     longAct_4:
   \   00000138                      DS8 4
   \   0000013C                      REQUIRE `?<Initializer for longAct_4>`
   \                     longAct_5:
   \   0000013C                      DS8 4
   \   00000140                      REQUIRE `?<Initializer for longAct_5>`
   \                     longAct_6:
   \   00000140                      DS8 4
   \   00000144                      REQUIRE `?<Initializer for longAct_6>`
   \                     longAct_7:
   \   00000144                      DS8 4
   \   00000148                      REQUIRE `?<Initializer for longAct_7>`
   \                     longAct_8:
   \   00000148                      DS8 4
   \   0000014C                      REQUIRE `?<Initializer for longAct_8>`
   \                     longAct_9:
   \   0000014C                      DS8 4
   \   00000150                      REQUIRE `?<Initializer for longAct_9>`
   \                     longAct_10:
   \   00000150                      DS8 4
   \   00000154                      REQUIRE `?<Initializer for longAct_10>`
   \                     longAct_11:
   \   00000154                      DS8 4
   \   00000158                      REQUIRE `?<Initializer for longAct_11>`
   \                     longAct_RB:
   \   00000158                      DS8 4
   \   0000015C                      REQUIRE `?<Initializer for longAct_RB>`
   \                     ShowStatusIcon:
   \   0000015C                      DS8 4
   \   00000160                      REQUIRE `?<Initializer for ShowStatusIcon>`
   \                     show_xstatus:
   \   00000160                      DS8 4
   \   00000164                      REQUIRE `?<Initializer for show_xstatus>`
   \                     IDLEICON_XX:
   \   00000164                      DS8 4
   \   00000168                      REQUIRE `?<Initializer for IDLEICON_XX>`
   \                     IDLEICON_YX:
   \   00000168                      DS8 4
   \   0000016C                      REQUIRE `?<Initializer for IDLEICON_YX>`
   \                     ind_set_xstatus:
   \   0000016C                      DS8 4
   \   00000170                      REQUIRE `?<Initializer for ind_set_xstatus>`
   \                     NumStatusToIconBar:
   \   00000170                      DS8 4
   \   00000174                      REQUIRE `?<Initializer for NumStatusToIconBar>`
   \                     NumXStatusToIconBar:
   \   00000174                      DS8 4
   \   00000178                      REQUIRE `?<Initializer for NumXStatusToIconBar>`
   \                     ADDITION_UIN:
   \   00000178                      DS8 4
   \   0000017C                      REQUIRE `?<Initializer for ADDITION_UIN>`
   \                     show_add_state:
   \   0000017C                      DS8 4
   \   00000180                      REQUIRE `?<Initializer for show_add_state>`
   \                     show_add_xstate:
   \   00000180                      DS8 4
   \   00000184                      REQUIRE `?<Initializer for show_add_xstate>`
   \                     fonto:
   \   00000184                      DS8 4
   \   00000188                      REQUIRE `?<Initializer for fonto>`
   \                     msg_d_x:
   \   00000188                      DS8 4
   \   0000018C                      REQUIRE `?<Initializer for msg_d_x>`
   \                     msg_d_y:
   \   0000018C                      DS8 4
   \   00000190                      REQUIRE `?<Initializer for msg_d_y>`
   \                     main_msg_timer:
   \   00000190                      DS8 4
   \   00000194                      REQUIRE `?<Initializer for main_msg_timer>`
   \                     main_lenght:
   \   00000194                      DS8 4
   \   00000198                      REQUIRE `?<Initializer for main_lenght>`
   \                     use_cutter:
   \   00000198                      DS8 4
   \   0000019C                      REQUIRE `?<Initializer for use_cutter>`
   \                     spaco1:
   \   0000019C                      DS8 4
   \   000001A0                      REQUIRE `?<Initializer for spaco1>`
   \                     spaco2:
   \   000001A0                      DS8 4
   \   000001A4                      REQUIRE `?<Initializer for spaco2>`
   \                     onlineTime_x:
   \   000001A4                      DS8 4
   \   000001A8                      REQUIRE `?<Initializer for onlineTime_x>`
   \                     onlineTime_y:
   \   000001A8                      DS8 4
   \   000001AC                      REQUIRE `?<Initializer for onlineTime_y>`
   \                     Pause_Time:
   \   000001AC                      DS8 4
   \   000001B0                      REQUIRE `?<Initializer for Pause_Time>`
   \                     Ping_X:
   \   000001B0                      DS8 4
   \   000001B4                      REQUIRE `?<Initializer for Ping_X>`
   \                     Ping_Y:
   \   000001B4                      DS8 4
   \   000001B8                      REQUIRE `?<Initializer for Ping_Y>`
   \                     ping_time_config:
   \   000001B8                      DS8 4
   \   000001BC                      REQUIRE `?<Initializer for ping_time_config>`
   \                     Is_Unread_On:
   \   000001BC                      DS8 4
   \   000001C0                      REQUIRE `?<Initializer for Is_Unread_On>`
   \                     unread_X:
   \   000001C0                      DS8 4
   \   000001C4                      REQUIRE `?<Initializer for unread_X>`
   \                     unread_Y:
   \   000001C4                      DS8 4
   \   000001C8                      REQUIRE `?<Initializer for unread_Y>`
   \                     Is_Online_On:
   \   000001C8                      DS8 4
   \   000001CC                      REQUIRE `?<Initializer for Is_Online_On>`
   \                     online_x:
   \   000001CC                      DS8 4
   \   000001D0                      REQUIRE `?<Initializer for online_x>`
   \                     online_y:
   \   000001D0                      DS8 4
   \   000001D4                      REQUIRE `?<Initializer for online_y>`
   \                     Auto_Status:
   \   000001D4                      DS8 4
   \   000001D8                      REQUIRE `?<Initializer for Auto_Status>`
   \                     IsOnNAStatus:
   \   000001D8                      DS8 4
   \   000001DC                      REQUIRE `?<Initializer for IsOnNAStatus>`
   \                     NAStatusTime:
   \   000001DC                      DS8 4
   \   000001E0                      REQUIRE `?<Initializer for NAStatusTime>`
   \                     isAutoStatusOn:
   \   000001E0                      DS8 4
   \   000001E4                      REQUIRE `?<Initializer for isAutoStatusOn>`
   \                     AUTO_ENGADE:
   \   000001E4                      DS8 4
   \   000001E8                      REQUIRE `?<Initializer for AUTO_ENGADE>`
   \                     automsgcount:
   \   000001E8                      DS8 4
   \   000001EC                      REQUIRE `?<Initializer for automsgcount>`
   \                     time_zone:
   \   000001EC                      DS8 4
   \   000001F0                      REQUIRE `?<Initializer for time_zone>`
   \                     showAwayIdle:
   \   000001F0                      DS8 4
   \   000001F4                      REQUIRE `?<Initializer for showAwayIdle>`
   \                     auto_x:
   \   000001F4                      DS8 4
   \   000001F8                      REQUIRE `?<Initializer for auto_x>`
   \                     auto_y:
   \   000001F8                      DS8 4
   \   000001FC                      REQUIRE `?<Initializer for auto_y>`
   \                     Reset_timer:
   \   000001FC                      DS8 4
   \   00000200                      REQUIRE `?<Initializer for Reset_timer>`
   \                     status_1:
   \   00000200                      DS8 4
   \   00000204                      REQUIRE `?<Initializer for status_1>`
   \                     status_2:
   \   00000204                      DS8 4
   \   00000208                      REQUIRE `?<Initializer for status_2>`
   \                     status_3:
   \   00000208                      DS8 4
   \   0000020C                      REQUIRE `?<Initializer for status_3>`
   \                     status_4:
   \   0000020C                      DS8 4
   \   00000210                      REQUIRE `?<Initializer for status_4>`
   \                     status_5:
   \   00000210                      DS8 4
   \   00000214                      REQUIRE `?<Initializer for status_5>`
   \                     screenSaverTime:
   \   00000214                      DS8 4
   \   00000218                      REQUIRE `?<Initializer for screenSaverTime>`
   \                     isScreenSaverEna:
   \   00000218                      DS8 4
   \   0000021C                      REQUIRE `?<Initializer for isScreenSaverEna>`
   \                     PopupShow:
   \   0000021C                      DS8 4
   \   00000220                      REQUIRE `?<Initializer for PopupShow>`
   \                     PopupFont:
   \   00000220                      DS8 4
   \   00000224                      REQUIRE `?<Initializer for PopupFont>`
   \                     TIME_OR_MSG:
   \   00000224                      DS8 4
   \   00000228                      REQUIRE `?<Initializer for TIME_OR_MSG>`
   \                     ON_OFF_TIME:
   \   00000228                      DS8 4
   \   0000022C                      REQUIRE `?<Initializer for ON_OFF_TIME>`
   \                     HEAD_STATUS:
   \   0000022C                      DS8 4
   \   00000230                      REQUIRE `?<Initializer for HEAD_STATUS>`
   \                     HEAD_XSTATUS:
   \   00000230                      DS8 4
   \   00000234                      REQUIRE `?<Initializer for HEAD_XSTATUS>`
   \                     HEAD_PRIVATE:
   \   00000234                      DS8 4
   \   00000238                      REQUIRE `?<Initializer for HEAD_PRIVATE>`
   \                     HEAD_PING:
   \   00000238                      DS8 4
   \   0000023C                      REQUIRE `?<Initializer for HEAD_PING>`
   \                     ShowTraff:
   \   0000023C                      DS8 4
   \   00000240                      REQUIRE `?<Initializer for ShowTraff>`
   \                     isShowCont:
   \   00000240                      DS8 4
   \   00000244                      REQUIRE `?<Initializer for isShowCont>`
   \                     isShowUnread:
   \   00000244                      DS8 4
   \   00000248                      REQUIRE `?<Initializer for isShowUnread>`
   \                     isShowI:
   \   00000248                      DS8 4
   \   0000024C                      REQUIRE `?<Initializer for isShowI>`
   \                     isShowV:
   \   0000024C                      DS8 4
   \   00000250                      REQUIRE `?<Initializer for isShowV>`
   \                     isShowS:
   \   00000250                      DS8 4
   \   00000254                      REQUIRE `?<Initializer for isShowS>`
   \                     isShowR:
   \   00000254                      DS8 4
   \   00000258                      REQUIRE `?<Initializer for isShowR>`
   \                     isShowA:
   \   00000258                      DS8 4
   \   0000025C                      REQUIRE `?<Initializer for isShowA>`
   \                     isShowTmXs:
   \   0000025C                      DS8 4
   \   00000260                      REQUIRE `?<Initializer for isShowTmXs>`
   \                     isShowTime:
   \   00000260                      DS8 4
   \   00000264                      REQUIRE `?<Initializer for isShowTime>`
   \                     isShowBat:
   \   00000264                      DS8 4
   \   00000268                      REQUIRE `?<Initializer for isShowBat>`
   \                     Vibra_cc:
   \   00000268                      DS8 4
   \   0000026C                      REQUIRE `?<Initializer for Vibra_cc>`
   \                     Is_ID3_ANY_STATUS:
   \   0000026C                      DS8 4
   \   00000270                      REQUIRE `?<Initializer for Is_ID3_ANY_STATUS>`
   \                     show_send_info:
   \   00000270                      DS8 4
   \   00000274                      REQUIRE `?<Initializer for show_send_info>`
   \                     isLogStatusChange:
   \   00000274                      DS8 4
   \   00000278                      REQUIRE `?<Initializer for isLogStatusChange>`
   \                     IsShowLoopback:
   \   00000278                      DS8 4
   \   0000027C                      REQUIRE `?<Initializer for IsShowLoopback>`
   \                     IsOpenBrowser:
   \   0000027C                      DS8 4
   \   00000280                      REQUIRE `?<Initializer for IsOpenBrowser>`
   \                     IsMultiBuffer:
   \   00000280                      DS8 4
   \   00000284                      REQUIRE `?<Initializer for IsMultiBuffer>`
   \                     IsInvertSoftKey:
   \   00000284                      DS8 4
   \   00000288                      REQUIRE `?<Initializer for IsInvertSoftKey>`
   \                     IsShowInfo:
   \   00000288                      DS8 4
   \   0000028C                      REQUIRE `?<Initializer for IsShowInfo>`
   \                     UIN:
   \   0000028C                      DS8 4
   \   00000290                      REQUIRE `?<Initializer for UIN>`
   \                     VIBR_ON_CONNECT:
   \   00000290                      DS8 4
   \   00000294                      REQUIRE `?<Initializer for VIBR_ON_CONNECT>`
   \                     SHOW_ACTIVE:
   \   00000294                      DS8 4
   \   00000298                      REQUIRE `?<Initializer for SHOW_ACTIVE>`
   \                     VIBR_TYPE:
   \   00000298                      DS8 4
   \   0000029C                      REQUIRE `?<Initializer for VIBR_TYPE>`
   \                     DEVELOP_IF:
   \   0000029C                      DS8 4
   \   000002A0                      REQUIRE `?<Initializer for DEVELOP_IF>`
   \                     LOG_ALL:
   \   000002A0                      DS8 4
   \   000002A4                      REQUIRE `?<Initializer for LOG_ALL>`
   \                     LOG_STATCH:
   \   000002A4                      DS8 4
   \   000002A8                      REQUIRE `?<Initializer for LOG_STATCH>`
   \                     FIRST_LETTER:
   \   000002A8                      DS8 4
   \   000002AC                      REQUIRE `?<Initializer for FIRST_LETTER>`
   \                     SORT_CLIST:
   \   000002AC                      DS8 4
   \   000002B0                      REQUIRE `?<Initializer for SORT_CLIST>`
   \                     HISTORY_TYPE:
   \   000002B0                      DS8 4
   \   000002B4                      REQUIRE `?<Initializer for HISTORY_TYPE>`
   \                     vibraPower:
   \   000002B4                      DS8 4
   \   000002B8                      REQUIRE `?<Initializer for vibraPower>`
   \                     IDLEICON_X:
   \   000002B8                      DS8 4
   \   000002BC                      REQUIRE `?<Initializer for IDLEICON_X>`
   \                     IDLEICON_Y:
   \   000002BC                      DS8 4
   \   000002C0                      REQUIRE `?<Initializer for IDLEICON_Y>`
   \                     I_COLOR:
   \   000002C0                      DS8 4
   \   000002C4                      REQUIRE `?<Initializer for I_COLOR>`
   \                     TO_COLOR:
   \   000002C4                      DS8 4
   \   000002C8                      REQUIRE `?<Initializer for TO_COLOR>`
   \                     X_COLOR:
   \   000002C8                      DS8 4
   \   000002CC                      REQUIRE `?<Initializer for X_COLOR>`
   \                     O_I_COLOR:
   \   000002CC                      DS8 4
   \   000002D0                      REQUIRE `?<Initializer for O_I_COLOR>`
   \                     O_TO_COLOR:
   \   000002D0                      DS8 4
   \   000002D4                      REQUIRE `?<Initializer for O_TO_COLOR>`
   \                     O_X_COLOR:
   \   000002D4                      DS8 4
   \   000002D8                      REQUIRE `?<Initializer for O_X_COLOR>`
   \                     ED_FONT_SIZE:
   \   000002D8                      DS8 4
   \   000002DC                      REQUIRE `?<Initializer for ED_FONT_SIZE>`
   \                     ED_H_FONT_SIZE:
   \   000002DC                      DS8 4
   \   000002E0                      REQUIRE `?<Initializer for ED_H_FONT_SIZE>`
   \                     ED_X_FONT_SIZE:
   \   000002E0                      DS8 4
   \   000002E4                      REQUIRE `?<Initializer for ED_X_FONT_SIZE>`
   \                     O_ED_FONT_SIZE:
   \   000002E4                      DS8 4
   \   000002E8                      REQUIRE `?<Initializer for O_ED_FONT_SIZE>`
   \                     O_ED_H_FONT_SIZE:
   \   000002E8                      DS8 4
   \   000002EC                      REQUIRE `?<Initializer for O_ED_H_FONT_SIZE>`
   \                     O_ED_X_FONT_SIZE:
   \   000002EC                      DS8 4
   \   000002F0                      REQUIRE `?<Initializer for O_ED_X_FONT_SIZE>`
   \                     ACK_COLOR:
   \   000002F0                      DS8 4
   \   000002F4                      REQUIRE `?<Initializer for ACK_COLOR>`
   \                     UNACK_COLOR:
   \   000002F4                      DS8 4
   \   000002F8                      REQUIRE `?<Initializer for UNACK_COLOR>`
   \                     ENA_AUTO_XTXT:
   \   000002F8                      DS8 4
   \   000002FC                      REQUIRE `?<Initializer for ENA_AUTO_XTXT>`
   \                     NOT_LOG_SAME_XTXT:
   \   000002FC                      DS8 4
   \   00000300                      REQUIRE `?<Initializer for NOT_LOG_SAME_XTXT>`
   \                     LOG_XTXT:
   \   00000300                      DS8 4
   \   00000304                      REQUIRE `?<Initializer for LOG_XTXT>`
   \                     HISTORY_BUFFER:
   \   00000304                      DS8 4
   \   00000308                      REQUIRE `?<Initializer for HISTORY_BUFFER>`
   \                     ILL_DISP_RECV:
   \   00000308                      DS8 4
   \   0000030C                      REQUIRE `?<Initializer for ILL_DISP_RECV>`
   \                     ILL_KEYS_RECV:
   \   0000030C                      DS8 4
   \   00000310                      REQUIRE `?<Initializer for ILL_KEYS_RECV>`
   \                     ILL_RECV_TMR:
   \   00000310                      DS8 4
   \   00000314                      REQUIRE `?<Initializer for ILL_RECV_TMR>`
   \                     ILL_DISP_SEND:
   \   00000314                      DS8 4
   \   00000318                      REQUIRE `?<Initializer for ILL_DISP_SEND>`
   \                     ILL_KEYS_SEND:
   \   00000318                      DS8 4
   \   0000031C                      REQUIRE `?<Initializer for ILL_KEYS_SEND>`
   \                     ILL_SEND_TMR:
   \   0000031C                      DS8 4
   \   00000320                      REQUIRE `?<Initializer for ILL_SEND_TMR>`
   \                     ILL_SEND_FADE:
   \   00000320                      DS8 4
   \   00000324                      REQUIRE `?<Initializer for ILL_SEND_FADE>`
   \                     ILL_RECV_FADE:
   \   00000324                      DS8 4
   \   00000328                      REQUIRE `?<Initializer for ILL_RECV_FADE>`
   \                     ILL_OFF_FADE:
   \   00000328                      DS8 4
   \   0000032C                      REQUIRE `?<Initializer for ILL_OFF_FADE>`
   \                     sndVolume:
   \   0000032C                      DS8 4
   \   00000330                      REQUIRE `?<Initializer for sndVolume>`
   \                     NATICQ_PORT:
   \   00000330                      DS8 4
   \   00000334                      REQUIRE `?<Initializer for NATICQ_PORT>`
   \                     RECONNECT_TIME:
   \   00000334                      DS8 4
   \   00000338                      REQUIRE `?<Initializer for RECONNECT_TIME>`
   1783          
   1784          char *temp_chars; //Собственно файл
   \                     temp_chars:
   \   00000338                      DS8 4
   \   0000033C                      REQUIRE `?<Initializer for temp_chars>`
   1785          char **temp_lines; //Массив указателей на строки
   \                     temp_lines:
   \   0000033C                      DS8 4
   \   00000340                      REQUIRE `?<Initializer for temp_lines>`
   \                     fontColor:
   \   00000340                      DS8 1
   \   00000341                      REQUIRE `?<Initializer for fontColor>`
   \                     bgrColor:
   \   00000341                      DS8 1
   \   00000342                      REQUIRE `?<Initializer for bgrColor>`
   \   00000342                      DS8 2
   \                     CLBackgrClr:
   \   00000344                      DS8 4
   \   00000348                      REQUIRE `?<Initializer for CLBackgrClr>`
   \                     SoftBackgrClr:
   \   00000348                      DS8 4
   \   0000034C                      REQUIRE `?<Initializer for SoftBackgrClr>`
   \                     SoftFontClr:
   \   0000034C                      DS8 4
   \   00000350                      REQUIRE `?<Initializer for SoftFontClr>`
   \                     HeadBackgrClr:
   \   00000350                      DS8 4
   \   00000354                      REQUIRE `?<Initializer for HeadBackgrClr>`
   \                     HeadFontClr:
   \   00000354                      DS8 4
   \   00000358                      REQUIRE `?<Initializer for HeadFontClr>`
   \                     ScrollBarClr:
   \   00000358                      DS8 4
   \   0000035C                      REQUIRE `?<Initializer for ScrollBarClr>`
   \                     ClCursorClr:
   \   0000035C                      DS8 4
   \   00000360                      REQUIRE `?<Initializer for ClCursorClr>`
   \                     ClCursorBordClr:
   \   00000360                      DS8 4
   \   00000364                      REQUIRE `?<Initializer for ClCursorBordClr>`
   \                     ActiveClr:
   \   00000364                      DS8 4
   \   00000368                      REQUIRE `?<Initializer for ActiveClr>`
   \                     NotActiveClr:
   \   00000368                      DS8 4
   \   0000036C                      REQUIRE `?<Initializer for NotActiveClr>`
   \                     MMBackgrClr:
   \   0000036C                      DS8 4
   \   00000370                      REQUIRE `?<Initializer for MMBackgrClr>`
   \                     MMBackgrBordClr:
   \   00000370                      DS8 4
   \   00000374                      REQUIRE `?<Initializer for MMBackgrBordClr>`
   \                     MMCursorBGClr:
   \   00000374                      DS8 4
   \   00000378                      REQUIRE `?<Initializer for MMCursorBGClr>`
   \                     MMCursorClr:
   \   00000378                      DS8 4
   \   0000037C                      REQUIRE `?<Initializer for MMCursorClr>`
   \                     SmBGcolor:
   \   0000037C                      DS8 4
   \   00000380                      REQUIRE `?<Initializer for SmBGcolor>`
   \                     SmSelectColor:
   \   00000380                      DS8 4
   \   00000384                      REQUIRE `?<Initializer for SmSelectColor>`
   \                     SmFontColor:
   \   00000384                      DS8 4
   \   00000388                      REQUIRE `?<Initializer for SmFontColor>`
   \                     PopupBGCl:
   \   00000388                      DS8 4
   \   0000038C                      REQUIRE `?<Initializer for PopupBGCl>`
   \                     PopupOnlineCl:
   \   0000038C                      DS8 4
   \   00000390                      REQUIRE `?<Initializer for PopupOnlineCl>`
   \                     PopupMsgCl:
   \   00000390                      DS8 4
   \   00000394                      REQUIRE `?<Initializer for PopupMsgCl>`
   \                     PBcolor:
   \   00000394                      DS8 4
   \   00000398                      REQUIRE `?<Initializer for PBcolor>`
   \                     BGPBcolor:
   \   00000398                      DS8 4
   \   0000039C                      REQUIRE `?<Initializer for BGPBcolor>`
   \                     per_s:
   \   0000039C                      DS8 3
   \   0000039F                      REQUIRE `?<Initializer for per_s>`
   \   0000039F                      DS8 1
   \                     sndMsg2:
   \   000003A0                      DS8 64
   \   000003E0                      REQUIRE `?<Initializer for sndMsg2>`
   \                     pingsnd:
   \   000003E0                      DS8 64
   \   00000420                      REQUIRE `?<Initializer for pingsnd>`
   \                     ICON_PATH2:
   \   00000420                      DS8 64
   \   00000460                      REQUIRE `?<Initializer for ICON_PATH2>`
   \                     fontpath2:
   \   00000460                      DS8 128
   \   000004E0                      REQUIRE `?<Initializer for fontpath2>`
   \                     fontpath3:
   \   000004E0                      DS8 128
   \   00000560                      REQUIRE `?<Initializer for fontpath3>`
   \                     fontpath4:
   \   00000560                      DS8 128
   \   000005E0                      REQUIRE `?<Initializer for fontpath4>`
   \                     fontpath:
   \   000005E0                      DS8 64
   \   00000620                      REQUIRE `?<Initializer for fontpath>`
   \                     awayHelloMsg:
   \   00000620                      DS8 24
   \   00000638                      REQUIRE `?<Initializer for awayHelloMsg>`
   \                     awayMsg:
   \   00000638                      DS8 256
   \   00000738                      REQUIRE `?<Initializer for awayMsg>`
   \                     PopupMsgString:
   \   00000738                      DS8 12
   \   00000744                      REQUIRE `?<Initializer for PopupMsgString>`
   \                     PopupOnlineString:
   \   00000744                      DS8 12
   \   00000750                      REQUIRE `?<Initializer for PopupOnlineString>`
   \                     playing:
   \   00000750                      DS8 32
   \   00000770                      REQUIRE `?<Initializer for playing>`
   \                     CsmAdr:
   \   00000770                      DS8 12
   \   0000077C                      REQUIRE `?<Initializer for CsmAdr>`
   \                     ignor_list:
   \   0000077C                      DS8 256
   \   0000087C                      REQUIRE `?<Initializer for ignor_list>`
   \                     I_str:
   \   0000087C                      DS8 32
   \   0000089C                      REQUIRE `?<Initializer for I_str>`
   \                     PASS:
   \   0000089C                      DS8 12
   \   000008A8                      REQUIRE `?<Initializer for PASS>`
   \                     sndStartup:
   \   000008A8                      DS8 64
   \   000008E8                      REQUIRE `?<Initializer for sndStartup>`
   \                     sndSrvMsg:
   \   000008E8                      DS8 64
   \   00000928                      REQUIRE `?<Initializer for sndSrvMsg>`
   \                     sndGlobal:
   \   00000928                      DS8 64
   \   00000968                      REQUIRE `?<Initializer for sndGlobal>`
   \                     sndGlobal2:
   \   00000968                      DS8 64
   \   000009A8                      REQUIRE `?<Initializer for sndGlobal2>`
   \                     sndMsg:
   \   000009A8                      DS8 64
   \   000009E8                      REQUIRE `?<Initializer for sndMsg>`
   \                     sndMsgSent:
   \   000009E8                      DS8 64
   \   00000A28                      REQUIRE `?<Initializer for sndMsgSent>`
   \                     SMILE_FILE:
   \   00000A28                      DS8 64
   \   00000A68                      REQUIRE `?<Initializer for SMILE_FILE>`
   \                     TEMPLATES_PATH:
   \   00000A68                      DS8 64
   \   00000AA8                      REQUIRE `?<Initializer for TEMPLATES_PATH>`
   \                     ICON_PATH:
   \   00000AA8                      DS8 64
   \   00000AE8                      REQUIRE `?<Initializer for ICON_PATH>`
   \                     SMILE_PATH:
   \   00000AE8                      DS8 64
   \   00000B28                      REQUIRE `?<Initializer for SMILE_PATH>`
   \                     XSTATUSES_PATH:
   \   00000B28                      DS8 64
   \   00000B68                      REQUIRE `?<Initializer for XSTATUSES_PATH>`
   \                     HIST_PATH:
   \   00000B68                      DS8 64
   \   00000BA8                      REQUIRE `?<Initializer for HIST_PATH>`
   \                     NATICQ_HOST:
   \   00000BA8                      DS8 128
   \   00000C28                      REQUIRE `?<Initializer for NATICQ_HOST>`
   \                     suc_config_name:
   \   00000C28                      DS8 64
   \   00000C68                      REQUIRE `?<Initializer for suc_config_name>`
   \                     suc_config_name_mod:
   \   00000C68                      DS8 64
   \   00000CA8                      REQUIRE `?<Initializer for suc_config_name_mod>`
   1786          

   \                                 In segment CODE, align 4, keep-with-next
   1787          void FreeUINS(void)
   1788          {
   \                     FreeUINS:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1789            if (temp_lines) mfree(temp_lines);
   \   00000004   ........           LDR      R4,??DataTable2  ;; PBRECT
   \   00000008   3C0394E5           LDR      R0,[R4, #+828]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      ??FreeUINS_0
   \   00000014   150000EF           SWI      +21
   1790            if (temp_chars) mfree(temp_chars);
   \                     ??FreeUINS_0:
   \   00000018   380394E5           LDR      R0,[R4, #+824]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0100000A           BEQ      ??FreeUINS_1
   \   00000024   150000EF           SWI      +21
   1791            temp_lines=NULL;
   \   00000028   0000A0E3           MOV      R0,#+0
   \                     ??FreeUINS_1:
   \   0000002C   3C0384E5           STR      R0,[R4, #+828]
   1792            temp_chars=NULL;
   \   00000030   380384E5           STR      R0,[R4, #+824]
   1793          }
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
   1794          

   \                                 In segment CODE, align 4, keep-with-next
   1795          int LoadUIN()
   1796          {
   \                     LoadUIN:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   1797            FSTATS stat;
   1798            char fn[256];
   1799            int f;
   1800            unsigned int ul;
   1801            int i;
   1802            int fsize;
   1803            char *p;
   1804            char *pp;
   1805            int c;
   1806            FreeUINS();
   1807            strcpy(fn,TEMPLATES_PATH);
   \   00000004   ........           LDR      R4,??DataTable2  ;; PBRECT
   \   00000008   4BDF4DE2           SUB      SP,SP,#+300
   1808            i=strlen(fn);
   1809            sprintf(fn+i,"\\uins.txt");
   1810            if (GetFileStats(fn,&stat,&ul)==-1) return 0;
   \   0000000C   0050E0E3           MVN      R5,#+0
   \   00000010   ........           BL       FreeUINS
   \   00000014   6800A0E3           MOV      R0,#+104
   \   00000018   A00E80E3           ORR      R0,R0,#0xA00
   \   0000001C   041080E0           ADD      R1,R0,R4
   \   00000020   04008DE2           ADD      R0,SP,#+4
   \   00000024   1A0000EF           SWI      +26
   \   00000028   04008DE2           ADD      R0,SP,#+4
   \   0000002C   1B0000EF           SWI      +27
   \   00000030   04119FE5           LDR      R1,??LoadUIN_0   ;; `?<Constant "\\\\uins.txt">`
   \   00000034   0070A0E1           MOV      R7,R0
   \   00000038   04008DE2           ADD      R0,SP,#+4
   \   0000003C   000087E0           ADD      R0,R7,R0
   \   00000040   160000EF           SWI      +22
   \   00000044   0D20A0E1           MOV      R2,SP
   \   00000048   411F8DE2           ADD      R1,SP,#+260
   \   0000004C   04008DE2           ADD      R0,SP,#+4
   \   00000050   840000EF           SWI      +132
   \   00000054   050050E1           CMP      R0,R5
   \   00000058   0200001A           BNE      ??LoadUIN_1
   \                     ??LoadUIN_2:
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   4BDF8DE2           ADD      SP,SP,#+300
   \   00000064   F087BDE8           POP      {R4-R10,PC}
   1811            if ((fsize=stat.size)<=0) return 0;
   \                     ??LoadUIN_1:
   \   00000068   08719DE5           LDR      R7,[SP, #+264]
   \   0000006C   010057E3           CMP      R7,#+1
   \   00000070   F9FFFFBA           BLT      ??LoadUIN_2
   1812            if((f=fopen(fn,A_ReadOnly+A_BIN,P_READ,&ul))==-1) return 0;
   \   00000074   0D30A0E1           MOV      R3,SP
   \   00000078   8020A0E3           MOV      R2,#+128
   \   0000007C   801CA0E3           MOV      R1,#+32768
   \   00000080   04008DE2           ADD      R0,SP,#+4
   \   00000084   0A0000EF           SWI      +10
   \   00000088   0080A0E1           MOV      R8,R0
   \   0000008C   050058E1           CMP      R8,R5
   \   00000090   F1FFFF0A           BEQ      ??LoadUIN_2
   1813            p=temp_chars=malloc(fsize+1);
   \   00000094   010087E2           ADD      R0,R7,#+1
   \   00000098   140000EF           SWI      +20
   \   0000009C   380384E5           STR      R0,[R4, #+824]
   \   000000A0   0050A0E1           MOV      R5,R0
   1814            p[fread(f,p,fsize,&ul)]=0;
   \   000000A4   0060A0E3           MOV      R6,#+0
   \   000000A8   0D30A0E1           MOV      R3,SP
   \   000000AC   0720A0E1           MOV      R2,R7
   \   000000B0   0510A0E1           MOV      R1,R5
   \   000000B4   0800A0E1           MOV      R0,R8
   \   000000B8   0B0000EF           SWI      +11
   \   000000BC   0560C0E7           STRB     R6,[R0, +R5]
   1815            fclose(f,&ul);
   \   000000C0   0D10A0E1           MOV      R1,SP
   \   000000C4   0800A0E1           MOV      R0,R8
   \   000000C8   0D0000EF           SWI      +13
   1816            i=0;
   \   000000CC   0070A0E3           MOV      R7,#+0
   1817            pp=p;
   \   000000D0   0580A0E1           MOV      R8,R5
   1818            for(;;)
   1819            {
   1820              c=*p;
   \                     ??LoadUIN_3:
   \   000000D4   0090D5E5           LDRB     R9,[R5, #+0]
   1821              if (c<32)
   \   000000D8   200059E3           CMP      R9,#+32
   \   000000DC   0E0000AA           BGE      ??LoadUIN_4
   1822              {
   1823                if (pp&&(pp!=p))
   \   000000E0   000058E3           CMP      R8,#+0
   \   000000E4   05005811           CMPNE    R8,R5
   \   000000E8   0600000A           BEQ      ??LoadUIN_5
   1824                {
   1825          	temp_lines=realloc(temp_lines,(i+1)*sizeof(char *));
   \   000000EC   3C0394E5           LDR      R0,[R4, #+828]
   \   000000F0   01A087E2           ADD      R10,R7,#+1
   \   000000F4   0A11A0E1           LSL      R1,R10,#+2
   \   000000F8   BA0000EF           SWI      +186
   \   000000FC   3C0384E5           STR      R0,[R4, #+828]
   1826          	temp_lines[i++]=pp;
   \   00000100   078180E7           STR      R8,[R0, +R7, LSL #+2]
   \   00000104   0A70A0E1           MOV      R7,R10
   1827                }
   1828                pp=NULL;
   \                     ??LoadUIN_5:
   \   00000108   0080A0E3           MOV      R8,#+0
   1829                if (!c) break;
   \   0000010C   000059E3           CMP      R9,#+0
   \   00000110   0600000A           BEQ      ??LoadUIN_6
   1830                *p=0;
   \   00000114   0060C5E5           STRB     R6,[R5, #+0]
   \   00000118   010000EA           B        ??LoadUIN_7
   1831              }
   1832              else
   1833              {
   1834                if (pp==NULL) pp=p;
   \                     ??LoadUIN_4:
   \   0000011C   000058E3           CMP      R8,#+0
   \   00000120   0580A001           MOVEQ    R8,R5
   1835              }
   1836              p++;
   \                     ??LoadUIN_7:
   \   00000124   015085E2           ADD      R5,R5,#+1
   1837              if(i>max_uin) break;
   \   00000128   0B0057E3           CMP      R7,#+11
   \   0000012C   E8FFFFBA           BLT      ??LoadUIN_3
   1838            }
   1839            return i;
   \                     ??LoadUIN_6:
   \   00000130   0700A0E1           MOV      R0,R7
   \   00000134   4BDF8DE2           ADD      SP,SP,#+300
   \   00000138   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??LoadUIN_0:
   \   0000013C   ........           DC32     `?<Constant "\\\\uins.txt">`
   1840          }
   1841          
   1842          
   1843          extern const char percent_s[];
   1844          extern unsigned long  strtoul (const char *nptr,char **endptr,int base);
   1845          

   \                                 In segment CODE, align 4, keep-with-next
   1846          int ParseUINS()
   1847          {
   \                     ParseUINS:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   1848            char *pass;
   1849            char uin[9];
   1850            int i=LoadUIN();
   1851            int j=0;
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   ........           BL       LoadUIN
   \   00000010   0040B0E1           MOVS     R4,R0
   1852            if(i==0) return 0;
   \   00000014   3100000A           BEQ      ??ParseUINS_0
   1853            
   1854            addonuin[0].uin=UIN;//В первую ячейку уин из конфига
   \   00000018   ........           LDR      R6,??DataTable2  ;; PBRECT
   1855            snprintf(addonuin[0].pass,9,percent_s,PASS);
   \   0000001C   C4709FE5           LDR      R7,??ParseUINS_1  ;; percent_s
   \   00000020   8C0296E5           LDR      R0,[R6, #+652]
   \   00000024   0720A0E1           MOV      R2,R7
   \   00000028   080086E5           STR      R0,[R6, #+8]
   \   0000002C   9C00A0E3           MOV      R0,#+156
   \   00000030   800E80E3           ORR      R0,R0,#0x800
   \   00000034   063080E0           ADD      R3,R0,R6
   \   00000038   0910A0E3           MOV      R1,#+9
   \   0000003C   0C0086E2           ADD      R0,R6,#+12
   \   00000040   1B0100EF           SWI      +283
   \   00000044   010054E3           CMP      R4,#+1
   \   00000048   220000AA           BGE      ??ParseUINS_2
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   FE81BDE8           POP      {R1-R8,PC}
   1856            
   1857            while(j<i)
   1858            {
   1859             pass=strrchr(temp_lines[j],';')+1; 
   \                     ??ParseUINS_3:
   \   00000054   3C0396E5           LDR      R0,[R6, #+828]
   \   00000058   3B10A0E3           MOV      R1,#+59
   \   0000005C   050190E7           LDR      R0,[R0, +R5, LSL #+2]
   1860             snprintf(addonuin[j+1].pass,9,percent_s,pass);
   \   00000060   058286E0           ADD      R8,R6,R5, LSL #+4
   \   00000064   170100EF           SWI      +279
   \   00000068   013080E2           ADD      R3,R0,#+1
   \   0000006C   0720A0E1           MOV      R2,R7
   \   00000070   0910A0E3           MOV      R1,#+9
   \   00000074   1C0088E2           ADD      R0,R8,#+28
   \   00000078   1B0100EF           SWI      +283
   1861            // ShowMSG(2,(int)pass);
   1862             int k;
   1863             for(k=0; k<9 && temp_lines[j][k]!=';';k++)
   \   0000007C   0000A0E3           MOV      R0,#+0
   \                     ??ParseUINS_4:
   \   00000080   3C1396E5           LDR      R1,[R6, #+828]
   \   00000084   051181E0           ADD      R1,R1,R5, LSL #+2
   \   00000088   002091E5           LDR      R2,[R1, #+0]
   \   0000008C   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000090   3B0052E3           CMP      R2,#+59
   \   00000094   0600000A           BEQ      ??ParseUINS_5
   1864                uin[k]=temp_lines[j][k];
   \   00000098   001091E5           LDR      R1,[R1, #+0]
   \   0000009C   0D20A0E1           MOV      R2,SP
   \   000000A0   0110D0E7           LDRB     R1,[R0, +R1]
   \   000000A4   0210C0E7           STRB     R1,[R0, +R2]
   \   000000A8   010080E2           ADD      R0,R0,#+1
   \   000000AC   090050E3           CMP      R0,#+9
   \   000000B0   F2FFFFBA           BLT      ??ParseUINS_4
   1865             uin[k]=0;
   \                     ??ParseUINS_5:
   \   000000B4   0D10A0E1           MOV      R1,SP
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   0120C0E7           STRB     R2,[R0, +R1]
   1866             addonuin[j+1].uin=strtoul(uin,0,10);
   \   000000C0   0A20A0E3           MOV      R2,#+10
   \   000000C4   0010A0E3           MOV      R1,#+0
   \   000000C8   0D00A0E1           MOV      R0,SP
   \   000000CC   ........           _BLF     strtoul,??strtoul??rA
   \   000000D0   180088E5           STR      R0,[R8, #+24]
   1867          //   ShowMSG(2,(int)uin);   
   1868             j++;
   \   000000D4   015085E2           ADD      R5,R5,#+1
   1869            }
   \                     ??ParseUINS_2:
   \   000000D8   040055E1           CMP      R5,R4
   \   000000DC   DCFFFFBA           BLT      ??ParseUINS_3
   1870          return j;
   \                     ??ParseUINS_0:
   \   000000E0   0500A0E1           MOV      R0,R5
   \   000000E4   FE81BDE8           POP      {R1-R8,PC}       ;; return
   \                     ??ParseUINS_1:
   \   000000E8   ........           DC32     percent_s
   1871          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     PBRECT

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for PBRECT>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for addonuin>`:
   \   00000008   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000038   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000048   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000058   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000068   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000078   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000088   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000098   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for tm_status_1>`:
   \   000000A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for tm_status_2>`:
   \   000000B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for tm_status_3>`:
   \   000000B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for tm_status_4>`:
   \   000000C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for tm_status_5>`:
   \   000000C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for DEVELOP_IF_MOD>`:
   \   000000D0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HISTORY_SAVE_TYPE>`:
   \   000000D4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HISTORY_BUFFER_MOD>`:
   \   000000D8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for extended_sounds>`:
   \   000000DC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ext_type_sounds>`:
   \   000000E0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LINE_MODE>`:
   \   000000E4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for VIEW_MODE>`:
   \   000000E8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for MAXLOGMSG>`:
   \   000000EC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ShowStatusToIconBar>`:
   \   000000F0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PingToIconBar>`:
   \   000000F4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PNG_HEADER>`:
   \   000000F8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PNG_SOFTKEY>`:
   \   000000FC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isSystemFont>`:
   \   00000100   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for pngFont>`:
   \   00000104   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HeadFont>`:
   \   00000108   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LongRightAction>`:
   \   0000010C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LongLeftAction>`:
   \   00000110   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ActionResh>`:
   \   00000114   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LongVolUpAction>`:
   \   00000118   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LongVolDownAction>`:
   \   0000011C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isVolUpButton>`:
   \   00000120   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isVolDownButton>`:
   \   00000124   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for longAct_0>`:
   \   00000128   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for longAct_1>`:
   \   0000012C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for longAct_2>`:
   \   00000130   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for longAct_3>`:
   \   00000134   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for longAct_4>`:
   \   00000138   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for longAct_5>`:
   \   0000013C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for longAct_6>`:
   \   00000140   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for longAct_7>`:
   \   00000144   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for longAct_8>`:
   \   00000148   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for longAct_9>`:
   \   0000014C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for longAct_10>`:
   \   00000150   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for longAct_11>`:
   \   00000154   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for longAct_RB>`:
   \   00000158   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ShowStatusIcon>`:
   \   0000015C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for show_xstatus>`:
   \   00000160   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IDLEICON_XX>`:
   \   00000164   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IDLEICON_YX>`:
   \   00000168   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ind_set_xstatus>`:
   \   0000016C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for NumStatusToIconBar>`:
   \   00000170   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for NumXStatusToIconBar>`:
   \   00000174   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ADDITION_UIN>`:
   \   00000178   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for show_add_state>`:
   \   0000017C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for show_add_xstate>`:
   \   00000180   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for fonto>`:
   \   00000184   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for msg_d_x>`:
   \   00000188   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for msg_d_y>`:
   \   0000018C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for main_msg_timer>`:
   \   00000190   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for main_lenght>`:
   \   00000194   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for use_cutter>`:
   \   00000198   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for spaco1>`:
   \   0000019C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for spaco2>`:
   \   000001A0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for onlineTime_x>`:
   \   000001A4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for onlineTime_y>`:
   \   000001A8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Pause_Time>`:
   \   000001AC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Ping_X>`:
   \   000001B0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Ping_Y>`:
   \   000001B4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ping_time_config>`:
   \   000001B8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Is_Unread_On>`:
   \   000001BC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for unread_X>`:
   \   000001C0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for unread_Y>`:
   \   000001C4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Is_Online_On>`:
   \   000001C8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for online_x>`:
   \   000001CC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for online_y>`:
   \   000001D0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Auto_Status>`:
   \   000001D4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IsOnNAStatus>`:
   \   000001D8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for NAStatusTime>`:
   \   000001DC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isAutoStatusOn>`:
   \   000001E0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for AUTO_ENGADE>`:
   \   000001E4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for automsgcount>`:
   \   000001E8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for time_zone>`:
   \   000001EC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for showAwayIdle>`:
   \   000001F0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for auto_x>`:
   \   000001F4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for auto_y>`:
   \   000001F8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Reset_timer>`:
   \   000001FC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for status_1>`:
   \   00000200   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for status_2>`:
   \   00000204   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for status_3>`:
   \   00000208   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for status_4>`:
   \   0000020C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for status_5>`:
   \   00000210   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for screenSaverTime>`:
   \   00000214   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isScreenSaverEna>`:
   \   00000218   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PopupShow>`:
   \   0000021C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PopupFont>`:
   \   00000220   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for TIME_OR_MSG>`:
   \   00000224   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ON_OFF_TIME>`:
   \   00000228   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HEAD_STATUS>`:
   \   0000022C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HEAD_XSTATUS>`:
   \   00000230   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HEAD_PRIVATE>`:
   \   00000234   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HEAD_PING>`:
   \   00000238   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ShowTraff>`:
   \   0000023C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowCont>`:
   \   00000240   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowUnread>`:
   \   00000244   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowI>`:
   \   00000248   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowV>`:
   \   0000024C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowS>`:
   \   00000250   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowR>`:
   \   00000254   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowA>`:
   \   00000258   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowTmXs>`:
   \   0000025C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowTime>`:
   \   00000260   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isShowBat>`:
   \   00000264   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Vibra_cc>`:
   \   00000268   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Is_ID3_ANY_STATUS>`:
   \   0000026C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for show_send_info>`:
   \   00000270   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for isLogStatusChange>`:
   \   00000274   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IsShowLoopback>`:
   \   00000278   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IsOpenBrowser>`:
   \   0000027C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IsMultiBuffer>`:
   \   00000280   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IsInvertSoftKey>`:
   \   00000284   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IsShowInfo>`:
   \   00000288   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for UIN>`:
   \   0000028C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for VIBR_ON_CONNECT>`:
   \   00000290   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for SHOW_ACTIVE>`:
   \   00000294   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for VIBR_TYPE>`:
   \   00000298   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for DEVELOP_IF>`:
   \   0000029C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LOG_ALL>`:
   \   000002A0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LOG_STATCH>`:
   \   000002A4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for FIRST_LETTER>`:
   \   000002A8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for SORT_CLIST>`:
   \   000002AC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HISTORY_TYPE>`:
   \   000002B0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for vibraPower>`:
   \   000002B4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IDLEICON_X>`:
   \   000002B8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IDLEICON_Y>`:
   \   000002BC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for I_COLOR>`:
   \   000002C0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for TO_COLOR>`:
   \   000002C4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for X_COLOR>`:
   \   000002C8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_I_COLOR>`:
   \   000002CC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_TO_COLOR>`:
   \   000002D0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_X_COLOR>`:
   \   000002D4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ED_FONT_SIZE>`:
   \   000002D8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ED_H_FONT_SIZE>`:
   \   000002DC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ED_X_FONT_SIZE>`:
   \   000002E0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_ED_FONT_SIZE>`:
   \   000002E4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_ED_H_FONT_SIZE>`:
   \   000002E8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_ED_X_FONT_SIZE>`:
   \   000002EC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ACK_COLOR>`:
   \   000002F0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for UNACK_COLOR>`:
   \   000002F4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ENA_AUTO_XTXT>`:
   \   000002F8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for NOT_LOG_SAME_XTXT>`:
   \   000002FC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LOG_XTXT>`:
   \   00000300   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HISTORY_BUFFER>`:
   \   00000304   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_DISP_RECV>`:
   \   00000308   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_KEYS_RECV>`:
   \   0000030C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_RECV_TMR>`:
   \   00000310   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_DISP_SEND>`:
   \   00000314   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_KEYS_SEND>`:
   \   00000318   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_SEND_TMR>`:
   \   0000031C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_SEND_FADE>`:
   \   00000320   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_RECV_FADE>`:
   \   00000324   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_OFF_FADE>`:
   \   00000328   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sndVolume>`:
   \   0000032C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for NATICQ_PORT>`:
   \   00000330   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for RECONNECT_TIME>`:
   \   00000334   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for temp_chars>`:
   \   00000338   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for temp_lines>`:
   \   0000033C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for fontColor>`:
   \   00000340   00                 DC8 0
   \                     `?<Initializer for bgrColor>`:
   \   00000341   00                 DC8 0
   \   00000342   0000               DC8 0, 0
   \                     `?<Initializer for CLBackgrClr>`:
   \   00000344   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for SoftBackgrClr>`:
   \   00000348   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for SoftFontClr>`:
   \   0000034C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HeadBackgrClr>`:
   \   00000350   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HeadFontClr>`:
   \   00000354   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ScrollBarClr>`:
   \   00000358   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ClCursorClr>`:
   \   0000035C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ClCursorBordClr>`:
   \   00000360   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ActiveClr>`:
   \   00000364   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for NotActiveClr>`:
   \   00000368   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for MMBackgrClr>`:
   \   0000036C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for MMBackgrBordClr>`:
   \   00000370   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for MMCursorBGClr>`:
   \   00000374   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for MMCursorClr>`:
   \   00000378   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for SmBGcolor>`:
   \   0000037C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for SmSelectColor>`:
   \   00000380   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for SmFontColor>`:
   \   00000384   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PopupBGCl>`:
   \   00000388   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PopupOnlineCl>`:
   \   0000038C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PopupMsgCl>`:
   \   00000390   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PBcolor>`:
   \   00000394   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for BGPBcolor>`:
   \   00000398   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for per_s>`:
   \   0000039C   257300             DC8 "%s"
   \   0000039F   00                 DC8 0
   \                     `?<Initializer for sndMsg2>`:
   \   000003A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for pingsnd>`:
   \   000003E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000400   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000410   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for ICON_PATH2>`:
   \   00000420   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000430   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000440   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000450   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for fontpath2>`:
   \   00000460   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000470   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000480   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000490   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for fontpath3>`:
   \   000004E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000500   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000510   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000520   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000530   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000540   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000550   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for fontpath4>`:
   \   00000560   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000570   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000580   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000590   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for fontpath>`:
   \   000005E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000600   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000610   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for awayHelloMsg>`:
   \   00000620   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000630   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for awayMsg>`:
   \   00000638   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000648   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000658   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000668   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000678   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000688   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000698   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000708   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000718   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000728   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for PopupMsgString>`:
   \   00000738   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for PopupOnlineString>`:
   \   00000744   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for playing>`:
   \   00000750   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000760   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for CsmAdr>`:
   \   00000770   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for ignor_list>`:
   \   0000077C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000078C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000079C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000080C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000081C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000082C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000083C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000084C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000085C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000086C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for I_str>`:
   \   0000087C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000088C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for PASS>`:
   \   0000089C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for sndStartup>`:
   \   000008A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for sndSrvMsg>`:
   \   000008E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000908   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000918   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for sndGlobal>`:
   \   00000928   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000938   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000948   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000958   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for sndGlobal2>`:
   \   00000968   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000978   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000988   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000998   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for sndMsg>`:
   \   000009A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for sndMsgSent>`:
   \   000009E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A08   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A18   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for SMILE_FILE>`:
   \   00000A28   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A38   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A48   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A58   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for TEMPLATES_PATH>`:
   \   00000A68   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A78   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A88   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A98   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for ICON_PATH>`:
   \   00000AA8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AB8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AC8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AD8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for SMILE_PATH>`:
   \   00000AE8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AF8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B08   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B18   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for XSTATUSES_PATH>`:
   \   00000B28   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B38   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B48   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B58   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for HIST_PATH>`:
   \   00000B68   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B78   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B88   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B98   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for NATICQ_HOST>`:
   \   00000BA8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BB8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BC8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BD8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BE8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BF8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C08   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C18   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for suc_config_name>`:
   \   00000C28   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C38   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C48   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C58   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for suc_config_name_mod>`:
   \   00000C68   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C78   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C88   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C98   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\zbin\\\\etc\\\\NATICQMod...">`:
   \   00000000   303A5C7A6269       DC8 "0:\\zbin\\etc\\NATICQMod.bcfg"
   \              6E5C6574635C
   \              4E4154494351
   \              4D6F642E6263
   \              666700      
   \   0000001B   00                 DC8 0
   \   0000001C   343A5C7A6269       DC8 "4:\\zbin\\etc\\NATICQ.bcfg"
   \              6E5C6574635C
   \              4E4154494351
   \              2E6263666700
   \   00000034   343A5C7A6269       DC8 "4:\\zbin\\etc\\NATICQMod.bcfg"
   \              6E5C6574635C
   \              4E4154494351
   \              4D6F642E6263
   \              666700      
   \   0000004F   00                 DC8 0
   \   00000050   303A5C7A6269       DC8 "0:\\zbin\\etc\\NATICQ.bcfg"
   \              6E5C6574635C
   \              4E4154494351
   \              2E6263666700
   \   00000068   4E4154494351       DC8 "NATICQ"
   \              00          
   \   0000006F   00                 DC8 0
   \   00000070   43616E277420       DC8 "Can't open configs!"
   \              6F70656E2063
   \              6F6E66696773
   \              2100        
   \   00000084   436F6E666967       DC8 "Config mod not correct!!!"
   \              206D6F64206E
   \              6F7420636F72
   \              726563742121
   \              2100        
   \   0000009E   0000               DC8 0, 0
   \   000000A0   4E4154494351       DC8 "NATICQMod"
   \              4D6F6400    
   \   000000AA   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\\\uins.txt">`:
   \   00000000   5C75696E732E       DC8 "\\uins.txt"
   \              74787400    
   \   0000000A   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function     CSTACK
     --------     ------
     FreeUINS         8
     LoadUIN        332
     ParseUINS       36
     UpdateConfig    36


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     UpdateConfig                   3008
     PBRECT                         3240
     FreeUINS                         56
     LoadUIN                         320
     ParseUINS                       236
     ??DataTable2                      4
     ?<Initializer for PBRECT>      3240
     ?<Constant "0:\\zbin\\etc\\NATICQMod...">
                                     172
     ?<Constant "\\uins.txt">         12
      Others                          64

 
 3 676 bytes in segment CODE
   184 bytes in segment DATA_C
 3 240 bytes in segment DATA_I
 3 240 bytes in segment DATA_ID
    12 bytes in segment INITTAB
 
 3 624 bytes of CODE  memory (+ 64 bytes shared)
 3 424 bytes of CONST memory
 3 240 bytes of DATA  memory

Errors: none
Warnings: none
