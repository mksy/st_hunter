##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Feb/2009  14:43:42 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\_MY_PROJECT_\naticq_mod2\configs.c      #
#    Command line    =  D:\pasha\elf\_MY_PROJECT_\naticq_mod2\configs.c -D   #
#                       NEWSGOLD -D ELKA -D kluchnik -D BCFG -D ICONBAR      #
#                       --preprocess D:\pasha\elf\_MY_PROJECT_\naticq_mod2\k #
#                       luchnik_iconbar\List\ -lC                            #
#                       D:\pasha\elf\_MY_PROJECT_\naticq_mod2\kluchnik_iconb #
#                       ar\List\ -o D:\pasha\elf\_MY_PROJECT_\naticq_mod2\kl #
#                       uchnik_iconbar\Obj\ -s9 --cpu_mode arm --endian      #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "D:\Embedded Workbench   #
#                       4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I            #
#                       "D:\Embedded Workbench 4.0 Evaluation2\ARM\INC\"     #
#                       --inline_threshold=2                                 #
#    List file       =  D:\pasha\elf\_MY_PROJECT_\naticq_mod2\kluchnik_iconb #
#                       ar\List\configs.lst                                  #
#    Object file     =  D:\pasha\elf\_MY_PROJECT_\naticq_mod2\kluchnik_iconb #
#                       ar\Obj\configs.r79                                   #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\_MY_PROJECT_\naticq_mod2\configs.c
      1          #include "../inc/swilib.h"
      2          #include "../inc/cfg_items.h"
      3          #include "../inc/pnglist.h"
      4          #include "configs.h"
      5          #include "NatICQ.h"
      6          #include "conf_loader.h"
      7          
      8          //Теперь конфиги делаются отдельно!!!!как в экстраинфо! прикладываю два проекта 1stconfig && 2ndconfig
      9          //должны находится в папке с исходником натаси в своих папках!чтобы конфиг можно было удоьно редактировать
     10          //если изменили какой то из конфигов,то так же нужно изменить структуры в таком же порядке,
     11          //как зменили конфиг с темиже данными!и поправить функцию UpdateConfig(),и потом скомпилить отдельно эльфы 1stconfig && 2ndconfig,
     12          //чтобы получить разные конфиги...по другому пока не знаю как сделать...
     13          //та и короче...теперь меняется тока конфиг мода...оригинальный конфиг не трогать!
     14          //понятнее хз как объяснить....;)
     15          // by kluchnik 31.03.08 
     16          
     17          
     18          //--------------------------------------------------------------------//
     19          //------------------------  ORIGINAL CONFIG  -------------------------//
     20          //--------------------------------------------------------------------//
     21          
     22          typedef struct 
     23          {
     24            
     25            CFG_HDR cfghdr0;
     26            unsigned int UIN;
     27            
     28            CFG_HDR cfghdr1;
     29            char PASS[9];
     30          
     31            
     32          //--- NETWORK SETTING ---//
     33            
     34          CFG_HDR cfghdr2;
     35            CFG_HDR cfghdr2_1;
     36            char NATICQ_HOST[128];
     37          
     38            CFG_HDR cfghdr2_2;
     39            unsigned int NATICQ_PORT;
     40          
     41            CFG_HDR cfghdr2_3;
     42            unsigned int RECONNECT_TIME;
     43            
     44            CFG_HDR cfghdr2_4;
     45            char HIST_PATH[64];
     46          
     47            CFG_HDR cfghdr2_5;
     48            char SMILE_FILE[64];
     49          
     50            CFG_HDR cfghdr2_6;
     51            char SMILE_PATH[64];
     52          
     53            CFG_HDR cfghdr2_7;
     54            char ICON_PATH[64];
     55          
     56            CFG_HDR cfghdr2_8;
     57            char XSTATUSES_PATH[64];
     58          
     59            CFG_HDR cfghdr2_9;
     60            char TEMPLATES_PATH[64];
     61          CFG_HDR cfghdr3;//NETWORK SETTING
     62          
     63          
     64          //---  INTERFACE ---//
     65          
     66          CFG_HDR cfghdr4;
     67          //Status icon on mainscreen position
     68            CFG_HDR cfghdr4_1;
     69            unsigned int IDLEICON_X;
     70            unsigned int IDLEICON_Y;
     71            
     72          //Popup chat
     73            CFG_HDR cfghdr4_2;
     74            int DEVELOP_IF;
     75            CFG_CBOX_ITEM cfgcbox4_2[3];
     76            
     77          //Sorting
     78            CFG_HDR cfghdr4_3;
     79            int SORT_CLIST;
     80            CFG_CBOX_ITEM cfgcbox4_3[2];
     81          
     82          //First letter when typing
     83            CFG_HDR cfghdr4_4;
     84            int FIRST_LETTER;
     85            CFG_CBOX_ITEM cfgcbox4_4[2];
     86          
     87          
     88            
     89          //--- FONT AND COLOR ---//
     90            
     91           CFG_HDR cfghdr4_5;
     92              CFG_HDR cfghdr4_5_1;
     93              unsigned int I_COLOR;
     94            
     95              CFG_HDR cfghdr4_5_2;
     96              unsigned int TO_COLOR;
     97            
     98              CFG_HDR cfghdr4_5_3;
     99              unsigned int X_COLOR;
    100            
    101              CFG_HDR cfghdr4_5_4;
    102              unsigned int ED_FONT_SIZE;
    103            
    104              CFG_HDR cfghdr4_5_5;
    105              unsigned int ED_H_FONT_SIZE;
    106            
    107              CFG_HDR cfghdr4_5_6;
    108              unsigned int ED_X_FONT_SIZE;
    109            
    110              CFG_HDR cfghdr4_5_7;
    111              unsigned int O_I_COLOR;
    112            
    113              CFG_HDR cfghdr4_5_8;
    114              unsigned int O_TO_COLOR;
    115              
    116              CFG_HDR cfghdr4_5_9;
    117              unsigned int O_X_COLOR;
    118            
    119              CFG_HDR cfghdr4_5_10;
    120              unsigned int O_ED_FONT_SIZE;
    121            
    122              CFG_HDR cfghdr4_5_11;
    123              unsigned int O_ED_H_FONT_SIZE;
    124            
    125              CFG_HDR cfghdr4_5_12;
    126              unsigned int O_ED_X_FONT_SIZE;
    127            
    128              CFG_HDR cfghdr4_5_13;
    129              unsigned int ACK_COLOR;
    130            
    131              CFG_HDR cfghdr4_5_14;
    132              unsigned int UNACK_COLOR;
    133            CFG_HDR cfghdr4_6;//FONT & COLOR  
    134          
    135            
    136          //--- ILLUMINATION ---//
    137          //Illumination by BoBa 19.04.2007
    138            
    139            CFG_HDR cfghdr4_7;
    140              CFG_HDR cfghdr4_7_1;
    141              unsigned int ILL_DISP_RECV;
    142            
    143              CFG_HDR cfghdr4_7_2;
    144              unsigned int ILL_KEYS_RECV;
    145            
    146              CFG_HDR cfghdr4_7_3;
    147              unsigned int ILL_RECV_TMR;
    148            
    149              CFG_HDR cfghdr4_7_4;
    150              unsigned int ILL_RECV_FADE;
    151            
    152              CFG_HDR cfghdr4_7_5;
    153              unsigned int ILL_DISP_SEND;
    154            
    155              CFG_HDR cfghdr4_7_6;
    156              unsigned int ILL_KEYS_SEND;
    157            
    158              CFG_HDR cfghdr4_7_7;
    159              unsigned int ILL_SEND_TMR;
    160            
    161              CFG_HDR cfghdr4_7_8;
    162              unsigned int ILL_SEND_FADE;
    163            
    164              CFG_HDR cfghdr4_7_9;
    165              unsigned int ILL_OFF_FADE;
    166            CFG_HDR cfghdr4_8;  //ILLUMINATION
    167           
    168          CFG_HDR cfghdr5;//INTERFACE
    169          
    170          
    171          
    172          //---------------------//
    173          //       HISTORY       //
    174          //---------------------//
    175          
    176          //History
    177          CFG_HDR cfghdr6;
    178          
    179          //Enable history logging
    180              CFG_HDR cfghdr6_1;
    181              int LOG_ALL;
    182              CFG_CBOX_ITEM cfgcbox6_1[2];
    183          
    184          //History type
    185              CFG_HDR cfghdr6_2;
    186              int HISTORY_TYPE;
    187              CFG_CBOX_ITEM cfgcbox6_2[2];
    188            
    189          //Enable status logging
    190              CFG_HDR cfghdr6_3;
    191              int LOG_STATCH;
    192              CFG_CBOX_ITEM cfgcbox6_3[2];
    193          
    194          //Enable X-status logging
    195              CFG_HDR cfghdr6_4;
    196              int LOG_XTXT;
    197              CFG_CBOX_ITEM cfgcbox6_4[2];
    198            
    199          //Auto request X-status if entering to chat
    200              CFG_HDR cfghdr6_5;
    201              int ENA_AUTO_XTXT;
    202              CFG_CBOX_ITEM cfgcbox6_5[2];
    203          
    204          //Don't log X-status, if it same as prevision
    205              CFG_HDR cfghdr6_6;
    206              int NOT_LOG_SAME_XTXT;
    207              CFG_CBOX_ITEM cfgcbox6_6[2];
    208          
    209          //Buffer for fill from history
    210              CFG_HDR cfghdr6_7;
    211              int HISTORY_BUFFER;
    212              CFG_CBOX_ITEM cfgcbox6_7[6];
    213            
    214          CFG_HDR cfghdr7;//HISTORY
    215          
    216          
    217          //---------------------//
    218          //    NOTYFY POWER     //
    219          //---------------------//
    220          
    221          CFG_HDR cfghdr8;
    222          
    223            CFG_HDR cfghdr8_1;
    224            unsigned int sndVolume;
    225          
    226            CFG_HDR cfghdr8_2;
    227            unsigned int vibraPower;
    228          
    229            CFG_HDR cfghdr8_3;
    230            int VIBR_TYPE;
    231            CFG_CBOX_ITEM cfgcbox8_3[2];
    232          
    233            CFG_HDR cfghdr8_4;
    234            int VIBR_ON_CONNECT;
    235            CFG_CBOX_ITEM cfgcbox8_4[2];
    236          
    237            
    238          //--- SOUND SETUP ---//
    239            
    240            CFG_HDR cfghdr8_5;
    241          
    242              CFG_HDR cfghdr8_5_1;
    243              char sndStartup[64];
    244            
    245              CFG_HDR cfghdr8_5_2;
    246              char sndSrvMsg[64];
    247            
    248              CFG_HDR cfghdr8_5_3;
    249              char sndGlobal[64];
    250            
    251              CFG_HDR cfghdr8_5_4;
    252              char sndMsg[64];
    253            
    254              CFG_HDR cfghdr8_5_5;
    255              char sndMsgSent[64];
    256            CFG_HDR cfghdr8_6;//SOUND SETUP
    257            
    258          CFG_HDR cfghdr9;//NOTYFY POWER
    259          }myConfig;
    260          
    261          
    262          
    263          
    264          //----------------------------------------------//
    265          //                  MOD CONFIG                  //
    266          //----------------------------------------------//
    267          /*
    268          typedef struct
    269          {
    270            CFG_HDR cfghdr0;
    271            CFG_HDR cfghdr31;//={CFG_LEVEL,"Оригинальные настройки",1,0};
    272          
    273          //Popup chat
    274            CFG_HDR cfghdr4_2;//={CFG_CBOX,"Popup",0,2};
    275            int DEVELOP_IF_MOD;
    276            CFG_CBOX_ITEM cfgcbox15_1[2];//={"Use set orig.config", "After unlock"};
    277            
    278          //history
    279            CFG_HDR cfghdr6_8;//"Show Active contact"
    280            int SHOW_ACTIVE;
    281            CFG_CBOX_ITEM cfgcbox6_8[2];//={"No","Yes"};
    282          
    283            CFG_HDR cfghdr6_10;//={CFG_CBOX,"Save history with name",0,2};
    284            int HISTORY_SAVE_TYPE;// = 1;
    285            CFG_CBOX_ITEM cfgcbox6_9[2];//={"No","Yes"};
    286              
    287          //Buffer for fill from history
    288            CFG_HDR cfghdr6_7;//={CFG_CBOX,"History read buffer",0,2};
    289            int HISTORY_BUFFER_MOD;
    290            CFG_CBOX_ITEM cfgcbox6_7[3];//={"Use set orig.conf.","4 kbyte"};    
    291              
    292          
    293            CFG_HDR cfghdr181;//={CFG_CBOX,"Extended sounds",0,2};
    294            unsigned int extended_sounds;
    295            CFG_CBOX_ITEM cfgcbox18_3_2[2];//={"No","Yes"};
    296              
    297            CFG_HDR cfghdr181_2;//={CFG_CBOX,"Add sound type file",0,3};
    298            unsigned int ext_type_sounds;
    299            CFG_CBOX_ITEM cfgcbox182_3_2[3];
    300              
    301            CFG_HDR cfghdr15;//={CFG_STR_UTF8,"add online msg path",0,63};
    302            char sndGlobal2[64];
    303            
    304            CFG_HDR cfghdr161;//={CFG_STR_UTF8,"add new msg path",0,63};
    305            char sndMsg2[64];
    306              
    307            CFG_HDR cfghdr16r1;//={CFG_STR_UTF8,"ping sound",0,63};
    308            char pingsnd[64];
    309          
    310            CFG_HDR cfghdr2_7;
    311            char ICON_PATH2[64];
    312              
    313          CFG_HDR cfghdr30;
    314          
    315          //--------------------------------------//
    316          //              ИНТЕРФЕЙС               //
    317          //--------------------------------------//
    318          
    319          CFG_HDR cfghdrI_1;//интерфейс
    320          
    321            CFG_HDR cfghdrI_2;
    322            int VIEW_MODE;
    323                    
    324            CFG_HDR cfghdrI_3;
    325            int LINE_MODE;          
    326            
    327            CFG_HDR cfghdrI_4;  
    328            unsigned int MAXLOGMSG;    
    329            
    330            CFG_HDR cfghdrI_5;
    331            unsigned int ShowStatusToIconBar;    
    332            
    333            CFG_HDR cfghdrI_6;
    334            unsigned int PingToIconBar;    
    335            
    336            CFG_HDR cfghdrCl_1;//КЛ
    337              
    338               CFG_HDR cfghdrrCl_2;
    339               char CLBackgrClr[4];
    340               
    341               CFG_HDR cfghdrrCl_3;
    342               char SoftBackgrClr[4];   
    343               
    344               CFG_HDR cfghdrrCl_4;
    345               char SoftFontClr[4];
    346               
    347               CFG_HDR cfghdrrCl_5;
    348               char HeadBackgrClr[4];   
    349               
    350               CFG_HDR cfghdrrCl_6;
    351               char HeadFontClr[4];
    352               
    353               CFG_HDR cfghdrrCl_7;
    354               char ScrollBarClr[4];
    355               
    356               CFG_HDR cfghdrrCl_8;
    357               char ClCursorClr[4];
    358               
    359               CFG_HDR cfghdrrCl_9;
    360               char ClCursorBordClr[4];
    361               
    362               CFG_HDR cfghdrrCl_10;
    363               char ActiveClr[4];
    364               
    365               CFG_HDR cfghdrrCl_11;
    366               char NotActiveClr[4];
    367          
    368            CFG_HDR cfghdrCl_0;//КЛ
    369            
    370            CFG_HDR cfghdrM_1;//Гл Меню
    371            
    372                CFG_HDR cfghdrrM_4;
    373                char MMBackgrClr[4];
    374                
    375                CFG_HDR cfghdrrM_5;
    376                char MMBackgrBordClr[4];
    377                     
    378                CFG_HDR cfghdrrM_2;
    379                char MMCursorBGClr[4];
    380                
    381                CFG_HDR cfghdrrM_3;
    382                char MMCursorClr[4]; 
    383             
    384            CFG_HDR cfghdrM_0;
    385                    
    386            //--------------------
    387            
    388            
    389              CFG_HDR cfghdr_e1;//level       
    390                    
    391                  CFG_HDR cfghdr23;
    392                  char fontpath2[128];
    393                    
    394                  CFG_HDR cfghdr24;
    395                  char fontpath3[128];        
    396                  
    397                  CFG_HDR cfghdre1_2;
    398                  char fontpath4[128];
    399                    
    400                  CFG_HDR cfghdr_e1_3;
    401                  int PNG_HEADER;
    402                  
    403                  CFG_HDR cfghdr_e1_4;
    404                  int PNG_SOFTKEY;        
    405                  
    406              CFG_HDR cfghdr_e0; 
    407               
    408               
    409              CFG_HDR cfghdr_y1;//level     
    410               
    411                  CFG_HDR cfghdr_2_2;
    412                  int isSystemFont;
    413                    
    414                  CFG_HDR cfghdr2_8;  
    415                  unsigned int pngFont;  
    416          
    417                  CFG_HDR cfghdr2_9;
    418                  unsigned int HeadFont;
    419                  
    420              CFG_HDR cfghdr_y0;//     
    421          
    422          CFG_HDR cfghdrI_0;
    423          
    424          //----------- НАСТРОЙКА КЛАВИШ -----------//
    425          
    426          
    427          //View settings
    428            CFG_HDR cfghdr23_4;
    429            
    430          //Action on # button in contact list
    431            CFG_HDR cfghdr78_4520;
    432            int ActionResh;
    433            CFG_CBOX_ITEM cfgcbox_668_z[2];
    434            
    435          
    436          //Press vol up or vol down button in CL
    437            CFG_HDR cfghdr34_642;
    438            int isVolDownButton;
    439            CFG_CBOX_ITEM cfgcbox434_56[2];
    440            
    441            CFG_HDR cfghdr34_6342;
    442            int isVolUpButton;
    443            CFG_CBOX_ITEM cfgcbox4134_56[2];
    444            
    445            CFG_HDR cfghdr99_1;  
    446            
    447            //Long press right in chat
    448            CFG_HDR cfghdr4_67;
    449            int LongRightAction;
    450            CFG_CBOX_ITEM cfgcbox4_56[3];
    451          
    452          //Long press right in chat
    453            CFG_HDR cfghdr34_64;
    454            int LongLeftAction ;
    455            CFG_CBOX_ITEM cfgcbox444_56[2];
    456            
    457          
    458            CFG_HDR cfghdr23_1;
    459            int LongVolUpAction;
    460            CFG_CBOX_ITEM cfgcbox23_2[2];
    461          
    462            CFG_HDR cfghdr23_3;
    463            int LongVolDownAction ;
    464            CFG_CBOX_ITEM cfgcbox23_4[2];
    465          
    466            CFG_HDR cfghdr99_3_0;
    467            int longAct_0;
    468            CFG_CBOX_ITEM cfgcbox99_4_0[14];
    469          
    470            CFG_HDR cfghdr99_3_1;
    471            int longAct_1;
    472            CFG_CBOX_ITEM cfgcbox99_4_1[14];
    473            
    474            CFG_HDR cfghdr99_3_2;
    475            int longAct_2;
    476            CFG_CBOX_ITEM cfgcbox99_4_2[14];
    477                
    478            CFG_HDR cfghdr99_3_3;
    479            int longAct_3;
    480            CFG_CBOX_ITEM cfgcbox99_4_3[14];
    481                
    482            CFG_HDR cfghdr99_3_4;
    483            int longAct_4;
    484            CFG_CBOX_ITEM cfgcbox99_4_4[14];
    485            
    486            CFG_HDR cfghdr99_3_5;
    487            int longAct_5;
    488            CFG_CBOX_ITEM cfgcbox99_4_5[14];
    489                
    490            CFG_HDR cfghdr99_3_6;
    491            int longAct_6;
    492            CFG_CBOX_ITEM cfgcbox99_4_6[14];
    493            
    494            CFG_HDR cfghdr99_3_7;
    495            int longAct_7;
    496            CFG_CBOX_ITEM cfgcbox99_4_7[14];
    497                
    498            CFG_HDR cfghdr99_3_8;
    499            int longAct_8;
    500            CFG_CBOX_ITEM cfgcbox99_4_8[14];
    501                
    502            CFG_HDR cfghdr99_3_9;
    503            int longAct_9;
    504            CFG_CBOX_ITEM cfgcbox99_4_9[14];
    505            
    506            CFG_HDR cfghdr99_3_10;
    507            int longAct_10;
    508            CFG_CBOX_ITEM cfgcbox99_4_10[14];
    509                
    510            CFG_HDR cfghdr99_3_11;
    511            int longAct_11;
    512            CFG_CBOX_ITEM cfgcbox99_4_11[14];
    513                
    514            CFG_HDR cfghdr99_3_RB;
    515            int longAct_RB;
    516            CFG_CBOX_ITEM cfgcbox99_4_RB[14];
    517            
    518            CFG_HDR cfghdr00_2;
    519          
    520          CFG_HDR cfghdr223_5; //НАСТРОКА КЛАВИШ
    521          	
    522          	
    523          //----------- STATUS SETTING -----------//
    524            
    525          
    526          CFG_HDR cfghdr_45;
    527          #ifdef NEWSGOLD
    528          //Status icon on mainscreen position
    529              CFG_HDR cfghdr467_1;
    530              int ShowStatusIcon;
    531              CFG_CBOX_ITEM cfgcbox9_1[5];
    532          #endif
    533          #ifdef NEWSGOLD
    534          //Show x-status on iconbar or mainscreen
    535              CFG_HDR cfghdrz_68;
    536              int show_xstatus;
    537              CFG_CBOX_ITEM cfgcbox_8z[4];
    538          #else
    539              CFG_HDR cfghdrz_68;
    540              int show_xstatus;
    541              CFG_CBOX_ITEM cfgcbox_8z[2];
    542          #endif
    543          //Xstatus idle position
    544              CFG_HDR cfghdrz_1;
    545              unsigned int IDLEICON_XX;
    546              unsigned int IDLEICON_YX;
    547          
    548              CFG_HDR cfghdr780_1;
    549              int ind_set_xstatus;
    550              CFG_CBOX_ITEM cfgcbox8_z2[2];
    551              
    552          #ifdef NEWSGOLD
    553          //Number first pic status in folder img for show in iconbar
    554              CFG_HDR cfghdr19_22;
    555              unsigned int NumStatusToIconBar;  
    556          
    557          //Number first pic x-status in folder img for show in iconbar    
    558              CFG_HDR cfghdr19_242;
    559              unsigned int NumXStatusToIconBar;  
    560          
    561              CFG_HDR cfghdr_32_1;//={CFG_LEVEL,"Доп. статус в иконбар",1,0};
    562           
    563                CFG_HDR cfghdr32_2;//={CFG_UINT,"UIN",0,0xFFFFFFFF};
    564                unsigned int ADDITION_UIN;
    565                
    566                CFG_HDR cfghdr32_3;//={CFG_CBOX,"Показывать",0,2};
    567                int show_add_state;
    568                CFG_CBOX_ITEM cfgcbox32_4[2];
    569          
    570                CFG_HDR cfghdr32_5;//={CFG_CBOX,"Показывать хстатус",0,2};
    571                int show_add_xstate;
    572                CFG_CBOX_ITEM cfgcbox32_6[2];       
    573          
    574             CFG_HDR cfghdr_32_0;
    575          #endif
    576          CFG_HDR cfghdr_4;//STATUS SETTINGS
    577            
    578            
    579          //----------- PNGFONT SETTING -----------//     
    580            
    581          CFG_HDR cfghdr1_45;
    582             
    583          //Nember png-font or system
    584             CFG_HDR cfghdr65z;
    585             unsigned int fonto;
    586              
    587          //Path to png-font
    588             CFG_HDR cfghdr98;
    589             char fontpath[64];
    590          
    591          //Coordinates for message on idle
    592             CFG_HDR cfghd83;
    593             unsigned int msg_d_x ;
    594             unsigned int msg_d_y ;   
    595             
    596             CFG_HDR cfghdrs19_1;
    597             unsigned int main_msg_timer;
    598             
    599            CFG_HDR cfghdr60_2;
    600            char fontColor[4];
    601            
    602            CFG_HDR cfghdr60_3;
    603            char bgrColor[4];
    604          
    605          //Max show symbol on idle
    606            CFG_HDR cfghdr19a_1;
    607            unsigned int main_lenght;
    608                
    609            CFG_HDR cfghdr9z9;
    610            int use_cutter;
    611            CFG_CBOX_ITEM cfgcbox18a_4[2];
    612          
    613            CFG_HDR cfghdr65y;
    614            unsigned int spaco1;
    615                
    616          CFG_HDR cfghdrss_45;//PNGFONT SETTING
    617          
    618          
    619          //-------------------------------------------------------//
    620          //                SMILES COLOR SETTING                   //
    621          //-------------------------------------------------------//
    622          
    623          
    624          CFG_HDR cfghdr41;//={CFG_LEVEL,"Цвета выбора смайлов",1,0};
    625          
    626           CFG_HDR cfghdr40_1;//={CFG_COLOR,"Цвет фона",0,0};
    627           char SmBGcolor[4];
    628            
    629           CFG_HDR cfghdr40_2;//={CFG_COLOR,"Цвет курсора",0,0};
    630           char SmSelectColor[4];
    631            
    632           CFG_HDR cfghdr40_3;//={CFG_COLOR,"Цвет текста стат.",0,0};
    633           char SmFontColor[4];
    634          
    635          CFG_HDR cfghdr40;
    636            
    637          
    638          //-------------------------------------------------------//
    639          //                     IDLE SETTING                      //
    640          //-------------------------------------------------------//
    641          
    642          CFG_HDR cfghdr_m71;
    643          
    644              CFG_HDR cfghdr699;
    645              unsigned int onlineTime_x;
    646              unsigned int onlineTime_y;
    647          
    648              CFG_HDR cfghdr698;
    649              int Pause_Time;
    650              CFG_CBOX_ITEM cfgcbox85[2];
    651          
    652          
    653              CFG_HDR cfghd66;
    654              unsigned int Ping_X ;
    655              unsigned int Ping_Y ;
    656              
    657              CFG_HDR cfghdr1z9a_1;
    658              unsigned int ping_time_config ;
    659              
    660              CFG_HDR cfghdr298;
    661              int Is_Unread_On;
    662              CFG_CBOX_ITEM cfgcbox86[2];
    663              
    664              CFG_HDR cfghd67;
    665              unsigned int unread_X;
    666              unsigned int unread_Y;
    667              
    668              CFG_HDR cfghdr71_3;// = {CFG_CBOX,"Показывать подключ.",0,2};
    669              int Is_Online_On;
    670              CFG_CBOX_ITEM cfgcbox71_2[2];
    671              
    672              CFG_HDR cfghd71_1;// = {CFG_COORDINATES,"Подключ.контакты",0,0};
    673              unsigned int online_x;
    674              unsigned int online_y;  
    675          
    676          CFG_HDR cfghdr_m90;
    677          
    678          
    679          //-------------------------------------------------------//
    680          //                     AUTO STATUS                       //
    681          //-------------------------------------------------------//
    682          
    683          
    684          CFG_HDR cfghdr_m61;
    685          
    686              CFG_HDR cfghdr668;
    687              int Auto_Status;
    688              CFG_CBOX_ITEM cfgcbox89[2];
    689              
    690              
    691              CFG_HDR cfghdr_m61_1;// = {CFG_CBOX,"Вкл. недоступен",0,2};
    692              int IsOnNAStatus ;
    693              CFG_CBOX_ITEM cfgcbox_m61_2[2];//={"No","Yes"};
    694          
    695              CFG_HDR cfghdr61_8;//={CFG_UINT,"Время до недоступен(мин)",0,150};
    696              unsigned int NAStatusTime;    
    697              
    698              CFG_HDR cfghdr6678;// = {CFG_CBOX,"Включить автоматически при",0,2};
    699              int isAutoStatusOn;// = 0;
    700              CFG_CBOX_ITEM cfgcboxa1_153[13];//={"Выключен","В сети", "Отошел", "Недоступен", "Не беспокоить", "Занят", "Готов болтать", "Невидимый", "Депрессия", "Злой", "Дома", "Жру","На работе"};
    701          
    702              
    703              CFG_HDR cfghdr667;
    704              unsigned int AUTO_ENGADE;
    705              
    706              CFG_HDR cfghdr61_18;//={CFG_UINT,"Количество ответов",0,150};
    707              unsigned int automsgcount;//=3;
    708              
    709              CFG_HDR cfghdr_13;
    710              int time_zone;
    711              CFG_CBOX_ITEM cfgcbox_13[33];
    712              
    713              CFG_HDR cfghdrzz_8;
    714              char awayHelloMsg[24];
    715              
    716              CFG_HDR cfghdrzz_9;
    717              char awayMsg[256];
    718              
    719              CFG_HDR cfghdr66_2;
    720              int Reset_timer;
    721              CFG_CBOX_ITEM cfgcbox90[2];
    722            
    723          //Show away time on idle
    724              CFG_HDR cfghdr663;
    725              int showAwayIdle ;
    726              CFG_CBOX_ITEM cfgcbox82[2];
    727              
    728              CFG_HDR cfghd6_7;
    729              unsigned int auto_x;
    730              unsigned int auto_y;
    731            
    732          CFG_HDR cfghdr_m60;
    733          
    734          
    735          
    736          //-------------------------------------------------------//
    737          //                   AUTO CHANGE STATUS                  //
    738          //-------------------------------------------------------//
    739          
    740          
    741          CFG_HDR cfghdra1;
    742          
    743              CFG_HDR cfghdra1_3;
    744              int status_1;
    745              CFG_CBOX_ITEM cfgcboxa1_13[13];
    746          
    747              CFG_HDR cfghdra1_2;
    748              TTime tm_status_1;     
    749          
    750              CFG_HDR cfghdra1_1;
    751              int status_2;
    752              CFG_CBOX_ITEM cfgcboxa1_14[13];
    753          
    754              CFG_HDR cfghdra1_4;
    755              TTime tm_status_2;
    756          
    757              CFG_HDR cfghdra1_5;
    758              int status_3;
    759              CFG_CBOX_ITEM cfgcboxa1_15[13];
    760              
    761              CFG_HDR cfghdra1_6;
    762              TTime tm_status_3;
    763          
    764              CFG_HDR cfghdra1_7;
    765              int status_4;
    766              CFG_CBOX_ITEM cfgcboxa1_16[13];
    767              
    768              CFG_HDR cfghdra1_8;
    769              TTime tm_status_4;
    770          
    771              CFG_HDR cfghdra1_9;
    772              int status_5 ;
    773              CFG_CBOX_ITEM cfgcboxa1_17[13];
    774              
    775              CFG_HDR cfghdra1_14;
    776              TTime tm_status_5;
    777              
    778          CFG_HDR cfghdra0;
    779          
    780          //-------------------------------------------------------//
    781          //                    SCREEN SAVER                       //
    782          //-------------------------------------------------------//
    783          #ifdef NEWSGOLD
    784          
    785          CFG_HDR cfghdr_91;//={CFG_LEVEL,"Заставка",1,0};
    786          
    787              CFG_HDR cfghdr9_1;// = {CFG_CBOX,"Включить заставку",0,2};
    788              int isScreenSaverEna;
    789              CFG_CBOX_ITEM cfgcbox9_2[2];
    790              
    791              CFG_HDR cfghdr9_3;//={CFG_UINT,"Время до срабатывания(12=1мин)",0,1000};
    792              unsigned int screenSaverTime;
    793          CFG_HDR cfghdr_90;
    794          
    795          #endif
    796          
    797          //-------------------------------------------------------//
    798          //                     POPUP MESSAGE                     //
    799          //-------------------------------------------------------//
    800          
    801          CFG_HDR cfghdr_51;//={CFG_LEVEL,"Всплывающие сообщ.",1,0};
    802          
    803             CFG_HDR cfghdr51_0;// = {CFG_CBOX,"Показывать",0,4};
    804             int PopupShow;
    805             CFG_CBOX_ITEM cfgcbox51_2[4];//={"Ничего","Вход.сообш.","Подкл.конт.","Все"};
    806              
    807             CFG_HDR cfghdr51_1;//={CFG_STR_UTF8,"Формат входящ.сооб.",0,8};
    808             char PopupMsgString[9];//="%s";
    809              
    810             CFG_HDR cfghdr51_2;//={CFG_STR_UTF8,"Формат подкл.контакта",0,8};
    811             char PopupOnlineString[9];//=">%s<";  
    812              
    813             CFG_HDR cfghdr51_3;//={CFG_UINT,"Шрифт всплыв.сообщ",0,1000};
    814             unsigned int PopupFont;
    815             
    816             CFG_HDR cfghdr51_6;//={CFG_COLOR,"Фон всплыв.сообщ.",0,0};
    817             char PopupBGCl[4];
    818          
    819             CFG_HDR cfghdr51_4;//={CFG_COLOR,"Цвет подкл.контакта",0,0};
    820             char PopupOnlineCl[4];
    821              
    822             CFG_HDR cfghdr51_5;//={CFG_COLOR,"Цвет входящ.сообщ.",0,0};
    823             char PopupMsgCl[4];
    824             
    825          CFG_HDR cfghdr_50;//={CFG_LEVEL,"",0,0};
    826          
    827          
    828          
    829          //-------------------------------------------------------//
    830          //              SETTING CONTACTLIST HEADER               //
    831          //-------------------------------------------------------//
    832          
    833          CFG_HDR cfghdr_s1;//={CFG_LEVEL,"Настройка заголовка КЛ",1,0};
    834          
    835          //Show contact header with...
    836              CFG_HDR cfghdrs1_3;// = {CFG_CBOX,"Показывать в заголовке КЛ",0,6};
    837              int TIME_OR_MSG;
    838              CFG_CBOX_ITEM cfgcboxs2[6];//={"Время","Сообщения","Контакты","Все","Пнг шрифт(все)","Ничего"};
    839          
    840              CFG_HDR cfghdrs1_s1;//={CFG_UINT,"Время подкл./отключ.(сек)",0,1000};
    841              unsigned int ON_OFF_TIME;
    842          
    843              CFG_HDR cfghdrHead_1;
    844              int HEAD_STATUS;
    845            
    846              CFG_HDR cfghdrHead_2;
    847              int HEAD_XSTATUS;
    848            
    849              CFG_HDR cfghdrHead_3;
    850              int HEAD_PRIVATE;
    851            
    852              CFG_HDR cfghdrHead_4;
    853              int HEAD_PING;    
    854              
    855              CFG_HDR cfghdrs1_15;
    856              int ShowTraff;
    857              CFG_CBOX_ITEM cfgcboxs15[2];
    858              
    859              CFG_HDR cfghdrs1_11;//={CFG_CBOX,"Отображать кол-во контактов",0,2};
    860              int isShowCont;
    861              CFG_CBOX_ITEM cfgcboxs11[2];
    862          
    863              CFG_HDR cfghdrs1_12;//={CFG_CBOX,"Отображать кол-во непрочит.",0,2};
    864              int isShowUnread;
    865              CFG_CBOX_ITEM cfgcboxs12[2];
    866          
    867              CFG_HDR cfghdrs1_4;//={CFG_CBOX,"Отображать вибру [R] ",0,2};
    868              int isShowV ;
    869              CFG_CBOX_ITEM cfgcboxs3[2];
    870              
    871              CFG_HDR cfghdrs1_5;//={CFG_CBOX,"Отображать звук [S]",0,2};
    872              int isShowS ;
    873              CFG_CBOX_ITEM cfgcboxs5[2];
    874              
    875              CFG_HDR cfghdrs1_6;//={CFG_CBOX,"Отображать автостатус [A]",0,2};
    876              int isShowA ;
    877              CFG_CBOX_ITEM cfgcboxs6[2];
    878              
    879              CFG_HDR cfghdrs1_7;//={CFG_CBOX,"Отображать напоминалку [R]",0,2};
    880              int isShowR ;
    881              CFG_CBOX_ITEM cfgcboxs7[2];
    882              
    883              CFG_HDR cfghdrs1_8;//={CFG_CBOX,"Отображать статус/время [Tm/Xs]",0,2};
    884              int isShowTmXs ;
    885              CFG_CBOX_ITEM cfgcboxs8[2];
    886              
    887              CFG_HDR cfghdrs1_13;//={CFG_CBOX,"Отображать инвиз [I]",0,2};
    888              int isShowI;
    889              CFG_CBOX_ITEM cfgcboxs13[2];
    890              
    891              CFG_HDR cfghdrs1_9;//={CFG_CBOX,"Отображать заряд батареи",0,2};
    892              int isShowBat ;
    893              CFG_CBOX_ITEM cfgcboxs9[2];
    894              
    895              CFG_HDR cfghdrs1_10;//={CFG_CBOX,"Отображать время",0,2};
    896              int isShowTime;
    897              CFG_CBOX_ITEM cfgcboxs10[2];
    898              
    899          CFG_HDR cfghdr_s0;
    900          
    901          
    902          
    903          //-------------------------------------------------------//
    904          //                      EXTRA CONFIG                     //
    905          //-------------------------------------------------------//
    906          
    907          CFG_HDR cfghdr_m51;
    908          
    909           
    910          //Vibra count in vibra remaider
    911              CFG_HDR cfghdr65;
    912              unsigned int Vibra_cc;
    913          #ifdef NEWSGOLD
    914          //CSM for player
    915              CFG_HDR cfghdr66;
    916              char CsmAdr[9];  
    917              
    918          //Text before name track
    919              CFG_HDR cfghdr67;
    920              char playing[32];
    921              
    922          //Id3 tags is any status    
    923              CFG_HDR cfghdr7820;
    924              int Is_ID3_ANY_STATUS;
    925              CFG_CBOX_ITEM cfgcbox28_z[2];    
    926          
    927          #endif
    928          //Show command sending    
    929              CFG_HDR cfghdr780;
    930              int show_send_info;
    931              CFG_CBOX_ITEM cfgcbox8_z[2];
    932              
    933          //Show changr status contact
    934              CFG_HDR cfghdr7_80;
    935              int isLogStatusChange;
    936              CFG_CBOX_ITEM cfgcbox8df_z[2];
    937          
    938          //Show Loopback contact in CL
    939              CFG_HDR cfghdr71_30;
    940              int IsShowLoopback;
    941              CFG_CBOX_ITEM cfgcbox_3z[2];
    942              
    943              CFG_HDR cfghdr71_31;//={CFG_CBOX,"Открывать ссылки",0,2};
    944              int IsOpenBrowser;
    945              CFG_CBOX_ITEM cfgcbox_32[2];
    946              
    947              CFG_HDR cfghdr71_33;//={CFG_CBOX,"Открывать ссылки",0,2};
    948              int IsMultiBuffer;
    949              CFG_CBOX_ITEM cfgcbox_34[2];   
    950          
    951          CFG_HDR cfghdr_m50;//level
    952          
    953          //---------------------------------------//
    954          //        SETTING LOADING SCREEN         //
    955          //---------------------------------------//
    956          
    957          
    958          CFG_HDR cfghdr_q1;//={CFG_LEVEL,"Экран заргузки",1,0};
    959          
    960            CFG_HDR cfghdr_s2;// = {CFG_RECT, "Прогрессбар", 0, 0};
    961            RECT PBRECT;// = {4,281,236,294};//LOadScreenRECT
    962             
    963            CFG_HDR cfghdr_s3;//={CFG_COLOR,"Цвет прогрессбара",0,0};
    964            char PBcolor[4];//={0x00,0x00,0x00,100};//ProgressBarColor
    965          
    966            CFG_HDR cfghdr_s7;//={CFG_COLOR,"Фон прогрессбара",0,0};
    967            char BGPBcolor[4];//={0xFF,0xFF,0xFF,100};//BackGroundProgressBarColor
    968            
    969            CFG_HDR cfghdr_s4;//={CFG_CBOX,"Менять софты",0,2};
    970            int IsInvertSoftKey;
    971            CFG_CBOX_ITEM cfgcbox_s5[2];//={"No","Yes"};  
    972          
    973            CFG_HDR cfghdr_s6;//={CFG_CBOX,"Показывать инфу",0,2};
    974            int IsShowInfo;
    975            CFG_CBOX_ITEM cfgcbox_s7[2];//={"No","Yes"};    
    976          
    977          CFG_HDR cfghdr_q0;//={CFG_LEVEL,"",0,0};
    978          
    979          
    980          //--------------------------------------//
    981          
    982          CFG_HDR cfghdr11_10;
    983          char myName[32];
    984          
    985          CFG_HDR cfghdr11_9;
    986          char ignor_list[256];
    987          
    988          }myConfigMod;
    989          
    990          */
    991          #ifdef NEWSGOLD
    992          #define DEFAULT_DISK "4"
    993          #else
    994          #define DEFAULT_DISK "0"
    995          #endif
    996          
    997          //------------ origin setting ---------------//
    998          /*
    999          int DEVELOP_IF_MOD;
   1000          int SHOW_ACTIVE;
   1001          int HISTORY_SAVE_TYPE;
   1002          int HISTORY_BUFFER_MOD;
   1003          unsigned int extended_sounds;
   1004          unsigned int ext_type_sounds;
   1005          char sndGlobal2[64];
   1006          char sndMsg2[64];
   1007          char pingsnd[64];
   1008          char ICON_PATH2[64];
   1009            
   1010          //-------------- INTERFACE ----------------//
   1011          
   1012          int LINE_MODE;
   1013          int VIEW_MODE;
   1014          unsigned int MAXLOGMSG;
   1015          unsigned int ShowStatusToIconBar;    
   1016          unsigned int PingToIconBar;    
   1017          
   1018          char CLBackgrClr[4];
   1019          
   1020          char SoftBackgrClr[4];   
   1021          char SoftFontClr[4];
   1022          
   1023          char HeadBackgrClr[4];   
   1024          char HeadFontClr[4];
   1025          char ScrollBarClr[4];
   1026          
   1027          char ClCursorClr[4];
   1028          char ClCursorBordClr[4];
   1029          char ActiveClr[4];
   1030          char NotActiveClr[4];
   1031          
   1032          char MMBackgrClr[4];
   1033          char MMBackgrBordClr[4];
   1034          char MMCursorBGClr[4];
   1035          char MMCursorClr[4]; 
   1036          
   1037          //--------------------
   1038            
   1039          char fontpath2[128];
   1040          char fontpath3[128];        
   1041          char fontpath4[128];
   1042          int PNG_HEADER;
   1043          int PNG_SOFTKEY;        
   1044          
   1045          int isSystemFont;
   1046          unsigned int pngFont;  
   1047          unsigned int HeadFont;
   1048          //------------ SETTING BUTTON -------------//
   1049          
   1050          int LongRightAction;
   1051          int LongLeftAction;
   1052          int ActionResh;
   1053          int LongVolUpAction;
   1054          int LongVolDownAction ;
   1055          int isVolUpButton;//If action vol up && vol down button on elka
   1056          int isVolDownButton;
   1057          
   1058          int longAct_0;
   1059          int longAct_1;
   1060          int longAct_2;
   1061          int longAct_3;
   1062          int longAct_4;
   1063          int longAct_5;
   1064          int longAct_6;
   1065          int longAct_7;
   1066          int longAct_8;
   1067          int longAct_9;
   1068          int longAct_10;
   1069          int longAct_11;
   1070          int longAct_RB;
   1071           
   1072          
   1073          //------------ STATUS SETTING --------------//
   1074          
   1075          #ifdef NEWSGOLD
   1076          int ShowStatusIcon;
   1077          #endif
   1078          int show_xstatus;
   1079          unsigned int IDLEICON_XX;
   1080          unsigned int IDLEICON_YX;
   1081          int ind_set_xstatus;
   1082          #ifdef NEWSGOLD
   1083          unsigned int NumStatusToIconBar;
   1084          unsigned int NumXStatusToIconBar;
   1085          
   1086          unsigned int ADDITION_UIN;
   1087          int show_add_state;
   1088          int show_add_xstate;
   1089          #endif
   1090          
   1091          
   1092          //----------- PNG FONT SETTING -------------//
   1093          
   1094          unsigned int fonto;
   1095          char fontpath[64];
   1096          unsigned int msg_d_x;
   1097          unsigned int msg_d_y;
   1098          unsigned int main_msg_timer;//Кол-во секунд сколько показывать сообщения на идле
   1099          char fontColor[];//Цвет для системного шрифта
   1100          char bgrColor[];
   1101          unsigned int main_lenght;
   1102          int use_cutter;
   1103          unsigned int spaco1;
   1104          unsigned int spaco2;
   1105            
   1106          
   1107          //------------ smiles color -----------------//
   1108          
   1109          char SmBGcolor[4];
   1110          char SmSelectColor[4];
   1111          char SmFontColor[4];
   1112          
   1113          
   1114          //---------------- idle set -----------------//
   1115          
   1116          //Online time on idle
   1117          unsigned int onlineTime_x;
   1118          unsigned int onlineTime_y;
   1119          int Pause_Time;  
   1120          
   1121          unsigned int Ping_X;
   1122          unsigned int Ping_Y;
   1123          unsigned int ping_time_config;
   1124          
   1125          int Is_Unread_On;
   1126          unsigned int unread_X;
   1127          unsigned int unread_Y;
   1128          
   1129          int Is_Online_On;
   1130          unsigned int online_x;
   1131          unsigned int online_y;  
   1132          
   1133          //---------------- AUTO STATUS ---------------//
   1134          
   1135          int Auto_Status;//Включен автостатус или нет 
   1136          int IsOnNAStatus;
   1137          unsigned int NAStatusTime;    
   1138          int isAutoStatusOn;// = 0;
   1139          unsigned int AUTO_ENGADE;
   1140          unsigned int automsgcount;
   1141          int time_zone;
   1142          char awayHelloMsg[24];//hello msg
   1143          char awayMsg[256];//message
   1144          int showAwayIdle;  
   1145          unsigned int auto_x;
   1146          unsigned int auto_y;
   1147          int Reset_timer;  
   1148          
   1149          
   1150          //------------- AUTO CHANGE STATUS ------------//
   1151          
   1152          TTime tm_status_1;
   1153          unsigned int status_1;
   1154          TTime tm_status_2;
   1155          unsigned int status_2;
   1156          TTime tm_status_3;
   1157          unsigned int status_3;
   1158          TTime tm_status_4;
   1159          unsigned int status_4;
   1160          TTime tm_status_5;
   1161          unsigned int status_5;    
   1162              
   1163          
   1164          //---------------  SCREEN SAVER ---------------//
   1165          
   1166          #ifdef NEWSGOLD
   1167          unsigned int screenSaverTime;
   1168          int isScreenSaverEna;
   1169          #endif
   1170          
   1171          //------------ popup message -----------------//
   1172          
   1173          int PopupShow;// = 3;
   1174          char PopupMsgString[9];//="%s";
   1175          char PopupOnlineString[9];//=">%s<";  
   1176          unsigned int PopupFont;//=FONT_SMALL;
   1177          char PopupBGCl[4];
   1178          char PopupOnlineCl[4];    
   1179          char PopupMsgCl[4];
   1180          
   1181          
   1182          //------------ CL HEADER SETTING -------------//
   1183          
   1184          int TIME_OR_MSG;
   1185          unsigned int ON_OFF_TIME;
   1186          
   1187          int HEAD_STATUS;
   1188          int HEAD_XSTATUS;
   1189          int HEAD_PRIVATE;
   1190          int HEAD_PING;
   1191              
   1192          int ShowTraff;
   1193          int isShowCont;
   1194          int isShowUnread;
   1195          int isShowI;
   1196          int isShowV;
   1197          int isShowS;
   1198          int isShowR;
   1199          int isShowA;
   1200          int isShowTmXs;
   1201          int isShowTime;
   1202          int isShowBat;
   1203          
   1204          
   1205          //-------------  EXTRA CONFIG ---------------//
   1206          
   1207          unsigned int Vibra_cc;
   1208          #ifdef NEWSGOLD
   1209          char playing[32];
   1210          char CsmAdr[9];
   1211          int Is_ID3_ANY_STATUS;
   1212          #endif
   1213          int show_send_info;  
   1214          int isLogStatusChange;
   1215          int IsShowLoopback;//Show Loopback contact in CL
   1216          int IsOpenBrowser;
   1217          int IsMultiBuffer;
   1218          
   1219          
   1220          //-------------  LOAD SCREEN SET ------------//
   1221          
   1222          RECT PBRECT;
   1223          char PBcolor[4];
   1224          char BGPBcolor[4];
   1225          int IsInvertSoftKey;
   1226          int IsShowInfo;
   1227          
   1228          
   1229          
   1230          char ignor_list[256];
   1231          //char myName[256];
   1232          char I_str[32];
   1233          */
   1234          //------------ ORIGINAL SETTING -------------//  
   1235          
   1236          unsigned int UIN;
   1237          char PASS[9];
   1238          
   1239          int VIBR_ON_CONNECT;
   1240          //int SHOW_ACTIVE;
   1241          int VIBR_TYPE;
   1242          int DEVELOP_IF;
   1243          
   1244          int LOG_ALL;
   1245          int LOG_STATCH;
   1246          int FIRST_LETTER;
   1247          int SORT_CLIST;
   1248          
   1249          
   1250          int HISTORY_TYPE;
   1251          unsigned int vibraPower;
   1252          
   1253          unsigned int IDLEICON_X;
   1254          unsigned int IDLEICON_Y;
   1255            
   1256          unsigned int I_COLOR;
   1257          unsigned int TO_COLOR;
   1258          unsigned int X_COLOR;
   1259          unsigned int O_I_COLOR;
   1260          unsigned int O_TO_COLOR;
   1261          unsigned int O_X_COLOR;
   1262            
   1263          unsigned int ED_FONT_SIZE;
   1264          unsigned int ED_H_FONT_SIZE;
   1265          unsigned int ED_X_FONT_SIZE;
   1266          unsigned int O_ED_FONT_SIZE;
   1267          unsigned int O_ED_H_FONT_SIZE;
   1268          unsigned int O_ED_X_FONT_SIZE;
   1269            
   1270          unsigned int ACK_COLOR;
   1271          unsigned int UNACK_COLOR;
   1272            
   1273          int ENA_AUTO_XTXT;
   1274          int NOT_LOG_SAME_XTXT;
   1275          int LOG_XTXT;
   1276          int HISTORY_BUFFER;  
   1277            
   1278          //Illumination by BoBa 19.04.2007
   1279          ///////////
   1280          unsigned int ILL_DISP_RECV;
   1281          unsigned int ILL_KEYS_RECV;
   1282          unsigned int ILL_RECV_TMR;
   1283          unsigned int ILL_DISP_SEND;
   1284          unsigned int ILL_KEYS_SEND;
   1285          unsigned int ILL_SEND_TMR;
   1286          unsigned int ILL_SEND_FADE;
   1287          unsigned int ILL_RECV_FADE;
   1288          unsigned int ILL_OFF_FADE;
   1289          
   1290          char sndStartup[64];
   1291          char sndSrvMsg[64];
   1292          char sndGlobal[64];
   1293          //char sndGlobal2[64];
   1294          char sndMsg[64];
   1295          char sndMsgSent[64];
   1296          unsigned int sndVolume;
   1297            
   1298          char SMILE_FILE[64];
   1299          char TEMPLATES_PATH[64];
   1300          char ICON_PATH[64];
   1301          char SMILE_PATH[64];
   1302          char XSTATUSES_PATH[64];
   1303          char HIST_PATH[64];
   1304          char NATICQ_HOST[128];
   1305          unsigned int NATICQ_PORT;
   1306          unsigned int RECONNECT_TIME;
   1307          
   1308          
   1309          
   1310          //--------------------------------------------------------//
   1311          //                      INIT CONFIGS                      //
   1312          //--------------------------------------------------------//
   1313          
   1314          char per_s[]="%s";
   1315          
   1316          char suc_config_name[64];
   1317          //char suc_config_name_mod[64];
   1318          extern int maincsm_id;
   1319          extern void InitConfig2();
   1320          

   \                                 In segment CODE, align 4, keep-with-next
   1321          int UpdateConfig()
   1322          { 
   \                     UpdateConfig:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   1323            int myConfigSize = sizeof(myConfig);
   1324            myConfig* myConf = (myConfig*)malloc(myConfigSize);
   1325            int newCfgFile;
   1326          //  int myConfigModSize = sizeof(myConfigMod);
   1327          //  myConfigMod* myConfMod = (myConfigMod*)malloc(myConfigModSize);
   1328          //  int newCfgModFile;// = InitConfig(myConfMod, myConfigModSize, "NATICQMod",disk);
   1329            InitConfig2();
   1330            
   1331          #ifdef kluchnik
   1332            newCfgFile= InitConfig(myConf, myConfigSize, "NATICQ_2747093",4);
   \   00000004   FC629FE5           LDR      R6,??UpdateConfig_0  ;; `?<Constant "Can\\'t open configs!">`
   \   00000008   4450A0E3           MOV      R5,#+68
   \   0000000C   4C5D85E3           ORR      R5,R5,#0x1300
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   140000EF           SWI      +20
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   ........           _BLF     InitConfig2,??InitConfig2??rA
   \   00000020   0510A0E1           MOV      R1,R5
   1333            //newCfgModFile = InitConfig(myConfMod, myConfigModSize, "NATICQMod_2747093",4);  
   1334            sprintf(suc_config_name,"4:\\zbin\\etc\\NATICQ_2747093.bcfg");      
   \   00000024   ........           LDR      R5,??DataTable2  ;; addonuin
   \   00000028   0430A0E3           MOV      R3,#+4
   \   0000002C   142086E2           ADD      R2,R6,#+20
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000038   0070A0E1           MOV      R7,R0
   \   0000003C   241086E2           ADD      R1,R6,#+36
   \   00000040   4A0E85E2           ADD      R0,R5,#+1184
   \   00000044   160000EF           SWI      +22
   1335          //  sprintf(suc_config_name_mod,"4:\\zbin\\etc\\NATICQMod_2747093.bcfg");      
   1336          #else
   1337            if((newCfgFile= InitConfig(myConf, myConfigSize, "NATICQ",4))!=-1)
   1338            { 
   1339              sprintf(suc_config_name,"4:\\zbin\\etc\\NATICQ.bcfg"); 
   1340            }
   1341            else
   1342            {
   1343               newCfgFile= InitConfig(myConf, myConfigSize, "NATICQ",0);
   1344               sprintf(suc_config_name,"0:\\zbin\\etc\\NATICQ.bcfg");
   1345            }
   1346          #endif
   1347            /*
   1348            if((newCfgModFile = InitConfig(myConfMod, myConfigModSize, "NATICQMod",4))!=-1)
   1349            {
   1350              sprintf(suc_config_name_mod,"4:\\zbin\\etc\\NATICQMod.bcfg");      
   1351            }
   1352            else
   1353            {
   1354               newCfgModFile = InitConfig(myConfMod, myConfigModSize, "NATICQMod",0);
   1355               sprintf(suc_config_name_mod,"0:\\zbin\\etc\\NATICQMod.bcfg");      
   1356            }
   1357          #endif
   1358          
   1359          if(get_file_size(suc_config_name_mod)!=sizeof(myConfigMod))
   1360          {
   1361             LockSched();
   1362             ShowMSG(2,(int)"Конфиг мода не корректен!!!");
   1363             UnlockSched();
   1364             extern void ElfKiller(void);
   1365          //   SUBPROC((void *)ElfKiller);
   1366            // return -1;
   1367          }*/
   1368            
   1369          if(newCfgFile!=-1/* && newCfgModFile!=-1*/)//Если конфиги есть
   \   00000048   010077E3           CMN      R7,#+1
   \   0000004C   A300000A           BEQ      ??UpdateConfig_1
   1370          {  /*
   1371          //-------------------- MOD CONFIG ---------------------//
   1372            
   1373          //-------------- setting interface ---------------//
   1374            
   1375            TIME_OR_MSG=myConfMod->TIME_OR_MSG;  
   1376            IsShowLoopback=myConfMod->IsShowLoopback;//Show Loopback contact in CL  
   1377            SHOW_ACTIVE=myConfMod->SHOW_ACTIVE;
   1378            HISTORY_SAVE_TYPE=myConfMod->HISTORY_SAVE_TYPE;
   1379            IsOpenBrowser=myConfMod->IsOpenBrowser; 
   1380            IsMultiBuffer=myConfMod->IsMultiBuffer;
   1381          
   1382            MAXLOGMSG=myConfMod->MAXLOGMSG;
   1383            sprintf(ICON_PATH2,myConfMod->ICON_PATH2);
   1384            
   1385            
   1386            ext_type_sounds=myConfMod->ext_type_sounds; 
   1387          
   1388          //--------------------
   1389            
   1390              sprintf(fontpath2,per_s,myConfMod->fontpath2);
   1391              sprintf(fontpath3,per_s,myConfMod->fontpath3);
   1392              sprintf(fontpath4,per_s,myConfMod->fontpath4);
   1393              isSystemFont=myConfMod->isSystemFont;
   1394              pngFont=myConfMod->pngFont;
   1395              PNG_HEADER=myConfMod->PNG_HEADER;
   1396              PNG_SOFTKEY=myConfMod->PNG_SOFTKEY;
   1397              LINE_MODE=myConfMod->LINE_MODE;  
   1398              VIEW_MODE=myConfMod->VIEW_MODE;
   1399              HeadFont=myConfMod->HeadFont;
   1400          
   1401              ShowStatusToIconBar=myConfMod->ShowStatusToIconBar;
   1402              PingToIconBar=myConfMod->PingToIconBar;
   1403          
   1404          //-------------- log status change ---------------//
   1405            
   1406            isLogStatusChange=myConfMod->isLogStatusChange;
   1407            
   1408            
   1409          //-------------- setting png font ----------------//
   1410            
   1411            sprintf(fontpath,per_s,myConfMod->fontpath);
   1412            fonto=myConfMod->fonto;
   1413            spaco1=myConfMod->spaco1;
   1414            spaco2=myConfMod->spaco1;//так нада
   1415            
   1416            
   1417          //---------- Цвет для системного шрифта ----------//
   1418            
   1419            for(int i=0;i<4;i++)
   1420            {
   1421              fontColor[i]=myConfMod->fontColor[i];
   1422              bgrColor[i]=myConfMod->bgrColor[i];
   1423            }
   1424            
   1425            Is_Unread_On=myConfMod->Is_Unread_On;
   1426            
   1427            
   1428          //------------- automessage setting --------------//
   1429            
   1430            AUTO_ENGADE=myConfMod->AUTO_ENGADE;//time to away
   1431            isAutoStatusOn=myConfMod->isAutoStatusOn;
   1432            automsgcount=myConfMod->automsgcount;
   1433            Auto_Status=myConfMod->Auto_Status;//Включен автостатус или нет
   1434            time_zone=myConfMod->time_zone;
   1435            auto_x=myConfMod->auto_x;
   1436            auto_y=myConfMod->auto_y;
   1437            showAwayIdle=myConfMod->showAwayIdle;
   1438            sprintf(awayHelloMsg,per_s,myConfMod->awayHelloMsg);//hello msg
   1439            snprintf(awayMsg,256,per_s,myConfMod->awayMsg);//message
   1440            Reset_timer=myConfMod->Reset_timer;//reset away timer on send message or key down
   1441            IsOnNAStatus=myConfMod->IsOnNAStatus;
   1442            NAStatusTime=myConfMod->NAStatusTime;    
   1443            
   1444            
   1445          //------------- AUTO CHANGE STATUS ------------//
   1446          
   1447            tm_status_1=myConfMod->tm_status_1;
   1448            status_1=myConfMod->status_1;
   1449            
   1450            tm_status_2=myConfMod->tm_status_2;
   1451            status_2=myConfMod->status_2;
   1452            
   1453            tm_status_3=myConfMod->tm_status_3;
   1454            status_3=myConfMod->status_3;
   1455            
   1456            tm_status_4=myConfMod->tm_status_4;
   1457            status_4=myConfMod->status_4;
   1458            
   1459            tm_status_5=myConfMod->tm_status_5;
   1460            status_5=myConfMod->status_5;    
   1461          
   1462          
   1463          //------------- Online time on idle --------------//
   1464            
   1465            onlineTime_x=myConfMod->onlineTime_x;
   1466            onlineTime_y=myConfMod->onlineTime_y;
   1467            Pause_Time=myConfMod->Pause_Time;
   1468          
   1469            
   1470          //----------------- setting ping -----------------//
   1471            
   1472            Ping_X=myConfMod->Ping_X;
   1473            Ping_Y=myConfMod->Ping_Y;
   1474            sprintf(pingsnd,per_s,myConfMod->pingsnd);
   1475            ping_time_config=myConfMod->ping_time_config;
   1476            
   1477          //---------- show online contact on idle --------//
   1478            
   1479            Is_Online_On=myConfMod->Is_Online_On;
   1480            online_x=myConfMod->online_x;
   1481            online_y=myConfMod->online_y;  
   1482          
   1483            
   1484          //------- setting last 5 message on idle ---------//
   1485            
   1486            main_msg_timer=myConfMod->main_msg_timer;
   1487            msg_d_x=myConfMod->msg_d_x;
   1488            msg_d_y=myConfMod->msg_d_y;
   1489            main_lenght=myConfMod->main_lenght;
   1490            use_cutter=myConfMod->use_cutter;
   1491            
   1492            
   1493          //----------------- player setting ---------------//
   1494          
   1495          #ifdef NEWSGOLD
   1496            sprintf(CsmAdr,per_s,myConfMod->CsmAdr);//csm mediaplayer
   1497            sprintf(playing,per_s,myConfMod->playing);//text before name song
   1498          #endif
   1499            
   1500          //----------- number status to iconbar -----------//
   1501            
   1502          #ifdef NEWSGOLD
   1503            NumStatusToIconBar=myConfMod->NumStatusToIconBar;
   1504            NumXStatusToIconBar=myConfMod->NumXStatusToIconBar;
   1505            ShowStatusIcon=myConfMod->ShowStatusIcon;
   1506            
   1507            ADDITION_UIN=myConfMod->ADDITION_UIN;
   1508            show_add_state=myConfMod->show_add_state;
   1509            show_add_xstate=myConfMod->show_add_xstate;
   1510          #endif
   1511            
   1512            
   1513          //--------------- setting xstatus ----------------//
   1514            
   1515            show_xstatus=myConfMod->show_xstatus;
   1516            IDLEICON_XX=myConfMod->IDLEICON_XX;
   1517            IDLEICON_YX=myConfMod->IDLEICON_YX;
   1518            ind_set_xstatus=myConfMod->ind_set_xstatus;;
   1519            
   1520          //------------------ setting keys ----------------//
   1521            
   1522            LongRightAction=myConfMod->LongRightAction;
   1523            LongLeftAction=myConfMod->LongLeftAction;  
   1524            ActionResh=myConfMod->ActionResh;//действие на # в контакт листе
   1525              
   1526          //-  If action vol up && vol down button on elka -//
   1527            
   1528            LongVolUpAction=myConfMod->LongVolUpAction;
   1529            LongVolDownAction=myConfMod->LongVolDownAction;
   1530            isVolUpButton=myConfMod->isVolUpButton;
   1531            isVolDownButton=myConfMod->isVolDownButton;
   1532          
   1533          //---------- LONG PRESS ACTION ON CL -----------//
   1534          
   1535            longAct_0=myConfMod->longAct_0;
   1536            longAct_1=myConfMod->longAct_1;
   1537            longAct_2=myConfMod->longAct_2;
   1538            longAct_3=myConfMod->longAct_3;
   1539            longAct_4=myConfMod->longAct_4;
   1540            longAct_5=myConfMod->longAct_5;
   1541            longAct_6=myConfMod->longAct_6;
   1542            longAct_7=myConfMod->longAct_7;
   1543            longAct_8=myConfMod->longAct_8;
   1544            longAct_9=myConfMod->longAct_9;
   1545            longAct_10=myConfMod->longAct_10;
   1546            longAct_11=myConfMod->longAct_11;
   1547            longAct_RB=myConfMod->longAct_RB;
   1548            
   1549          //---------------- other setting -----------------//
   1550            
   1551            sprintf(ignor_list,per_s,myConfMod->ignor_list);
   1552            sprintf(I_str,per_s,myConfMod->myName);
   1553            show_send_info=myConfMod->show_send_info;
   1554            
   1555            Vibra_cc=myConfMod->Vibra_cc;//vibra remainder
   1556            
   1557            unread_X=myConfMod->unread_X;
   1558            unread_Y=myConfMod->unread_Y;
   1559          #ifdef NEWSGOLD
   1560            Is_ID3_ANY_STATUS = myConfMod->Is_ID3_ANY_STATUS;  
   1561          #endif
   1562            
   1563          //------------- Screen Saver setting -------------//
   1564            
   1565          #ifdef NEWSGOLD
   1566            screenSaverTime=myConfMod->screenSaverTime;
   1567            isScreenSaverEna=myConfMod->isScreenSaverEna;
   1568          #endif
   1569            
   1570          //------------ smiles && popup color -------------//
   1571          
   1572            for(int i=0;i<4;i++)
   1573            {
   1574              SmBGcolor[i]=myConfMod->SmBGcolor[i];
   1575              SmSelectColor[i]=myConfMod->SmSelectColor[i];
   1576              SmFontColor[i]=myConfMod->SmFontColor[i];
   1577              
   1578              PopupBGCl[i]=myConfMod->PopupBGCl[i];;
   1579              PopupOnlineCl[i]=myConfMod->PopupOnlineCl[i];    
   1580              PopupMsgCl[i]=myConfMod->PopupMsgCl[i];
   1581              
   1582              
   1583              PBcolor[i]=myConfMod->PBcolor[i];
   1584              BGPBcolor[i]=myConfMod->BGPBcolor[i];
   1585              
   1586              
   1587                 CLBackgrClr[i]=myConfMod->CLBackgrClr[i];
   1588               SoftBackgrClr[i]=myConfMod->SoftBackgrClr[i];
   1589               SoftFontClr[i]=myConfMod->SoftFontClr[i];
   1590          
   1591               HeadBackgrClr[i]=myConfMod->HeadBackgrClr[i];
   1592               HeadFontClr[i]=myConfMod->HeadFontClr[i];
   1593               ScrollBarClr[i]=myConfMod->ScrollBarClr[i];
   1594          
   1595               ClCursorClr[i]=myConfMod->ClCursorClr[i];
   1596               ClCursorBordClr[i]=myConfMod->ClCursorBordClr[i];
   1597               ActiveClr[i]=myConfMod->ActiveClr[i];
   1598               NotActiveClr[i]=myConfMod->NotActiveClr[i];
   1599                
   1600               MMBackgrClr[i]=myConfMod->MMBackgrClr[i];
   1601               MMBackgrBordClr[i]=myConfMod->MMBackgrBordClr[i];
   1602               MMCursorBGClr[i]=myConfMod->MMCursorBGClr[i];
   1603               MMCursorClr[i]=myConfMod->MMCursorClr[i]; 
   1604            }
   1605          
   1606            
   1607          //----------------- popup message ----------------//
   1608          
   1609            PopupShow=myConfMod->PopupShow;
   1610            sprintf(PopupMsgString,per_s,myConfMod->PopupMsgString);
   1611            sprintf(PopupOnlineString,per_s,myConfMod->PopupOnlineString);
   1612            PopupFont=myConfMod->PopupFont;
   1613            
   1614            
   1615            
   1616          //--------------- CL HEADER SETTING --------------//
   1617          
   1618            isShowCont=myConfMod->isShowCont;
   1619            ShowTraff=myConfMod->ShowTraff;
   1620            isShowUnread=myConfMod->isShowUnread;
   1621            isShowI=myConfMod->isShowI;
   1622            isShowV=myConfMod->isShowV;
   1623            isShowS=myConfMod->isShowS;
   1624            isShowR=myConfMod->isShowR;
   1625            isShowA=myConfMod->isShowA;
   1626            isShowTmXs=myConfMod->isShowTmXs;
   1627            isShowTime=myConfMod->isShowTime;
   1628            isShowBat=myConfMod->isShowBat;
   1629            ON_OFF_TIME=myConfMod->ON_OFF_TIME;
   1630            
   1631            HEAD_STATUS=myConfMod->HEAD_STATUS;
   1632            HEAD_XSTATUS=myConfMod->HEAD_XSTATUS;
   1633            HEAD_PRIVATE=myConfMod->HEAD_PRIVATE;
   1634            HEAD_PING=myConfMod->HEAD_PING;
   1635          
   1636          //-------------  LOAD SCREEN SET ------------//
   1637          
   1638            PBRECT=myConfMod->PBRECT;
   1639            IsInvertSoftKey=myConfMod->IsInvertSoftKey;
   1640            IsShowInfo=myConfMod->IsShowInfo;
   1641          
   1642          */
   1643          //------------------ ORIGINAL CONFIG --------------------//
   1644            
   1645            UIN=myConf->UIN;
   \   00000050   2C6084E2           ADD      R6,R4,#+44
   \   00000054   000096E5           LDR      R0,[R6, #+0]
   1646            sprintf(PASS,per_s,myConf->PASS);
   \   00000058   547FA0E3           MOV      R7,#+336
   \   0000005C   A00085E5           STR      R0,[R5, #+160]
   \   00000060   5C2084E2           ADD      R2,R4,#+92
   \   00000064   051087E0           ADD      R1,R7,R5
   \   00000068   550F85E2           ADD      R0,R5,#+340
   \   0000006C   160000EF           SWI      +22
   1647            
   1648            SORT_CLIST=myConf->SORT_CLIST;
   \   00000070   440596E5           LDR      R0,[R6, #+1348]
   1649            LOG_ALL=myConf->LOG_ALL;
   1650            LOG_STATCH=myConf->LOG_STATCH;
   1651            VIBR_TYPE=myConf->VIBR_TYPE;
   1652            VIBR_ON_CONNECT=myConf->VIBR_ON_CONNECT;
   1653          
   1654          //  DEVELOP_IF_MOD=myConfMod->DEVELOP_IF_MOD;
   1655            if(!DEVELOP_IF_MOD)
   1656              DEVELOP_IF=myConf->DEVELOP_IF;
   1657            else
   1658              DEVELOP_IF=3;
   1659            FIRST_LETTER=myConf->FIRST_LETTER;    
   1660          
   1661            HISTORY_TYPE=myConf->HISTORY_TYPE;
   1662            
   1663           
   1664            sprintf(HIST_PATH,per_s,myConf->HIST_PATH);
   \   00000074   732F84E2           ADD      R2,R4,#+460
   \   00000078   BC0085E5           STR      R0,[R5, #+188]
   \   0000007C   7C0B96E5           LDR      R0,[R6, #+2940]
   \   00000080   051087E0           ADD      R1,R7,R5
   \   00000084   B00085E5           STR      R0,[R5, #+176]
   \   00000088   5C0C96E5           LDR      R0,[R6, #+3164]
   \   0000008C   B40085E5           STR      R0,[R5, #+180]
   \   00000090   C40F96E5           LDR      R0,[R6, #+4036]
   \   00000094   A80085E5           STR      R0,[R5, #+168]
   \   00000098   F10E87E2           ADD      R0,R7,#+3856
   \   0000009C   040090E7           LDR      R0,[R0, +R4]
   \   000000A0   A40085E5           STR      R0,[R5, #+164]
   \   000000A4   60029FE5           LDR      R0,??UpdateConfig_0+0x4  ;; DEVELOP_IF_MOD
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   B4049605           LDREQ    R0,[R6, #+1204]
   \   000000B4   0300A013           MOVNE    R0,#+3
   \   000000B8   AC0085E5           STR      R0,[R5, #+172]
   \   000000BC   B40596E5           LDR      R0,[R6, #+1460]
   \   000000C0   B80085E5           STR      R0,[R5, #+184]
   \   000000C4   EC0B96E5           LDR      R0,[R6, #+3052]
   \   000000C8   C00085E5           STR      R0,[R5, #+192]
   \   000000CC   F80F85E2           ADD      R0,R5,#+992
   \   000000D0   160000EF           SWI      +22
   1665            sprintf(NATICQ_HOST,per_s,myConf->NATICQ_HOST);
   \   000000D4   C02084E2           ADD      R2,R4,#+192
   \   000000D8   051087E0           ADD      R1,R7,R5
   \   000000DC   420E85E2           ADD      R0,R5,#+1056
   \   000000E0   160000EF           SWI      +22
   1666            NATICQ_PORT=myConf->NATICQ_PORT;
   \   000000E4   400196E5           LDR      R0,[R6, #+320]
   \   000000E8   400185E5           STR      R0,[R5, #+320]
   1667            RECONNECT_TIME=myConf->RECONNECT_TIME; //2058
   \   000000EC   700196E5           LDR      R0,[R6, #+368]
   \   000000F0   440185E5           STR      R0,[R5, #+324]
   1668            
   1669            vibraPower=myConf->vibraPower;  
   \   000000F4   940F96E5           LDR      R0,[R6, #+3988]
   \   000000F8   C40085E5           STR      R0,[R5, #+196]
   1670            
   1671            IDLEICON_X=myConf->IDLEICON_X;
   \   000000FC   800496E5           LDR      R0,[R6, #+1152]
   \   00000100   C80085E5           STR      R0,[R5, #+200]
   1672            IDLEICON_Y=myConf->IDLEICON_Y;
   \   00000104   840496E5           LDR      R0,[R6, #+1156]
   \   00000108   CC0085E5           STR      R0,[R5, #+204]
   1673            
   1674            I_COLOR=myConf->I_COLOR;
   \   0000010C   500696E5           LDR      R0,[R6, #+1616]
   \   00000110   D00085E5           STR      R0,[R5, #+208]
   1675            TO_COLOR=myConf->TO_COLOR;
   \   00000114   800696E5           LDR      R0,[R6, #+1664]
   \   00000118   D40085E5           STR      R0,[R5, #+212]
   1676            X_COLOR=myConf->X_COLOR;
   \   0000011C   B00696E5           LDR      R0,[R6, #+1712]
   \   00000120   D80085E5           STR      R0,[R5, #+216]
   1677            O_I_COLOR=myConf->O_I_COLOR;
   \   00000124   700796E5           LDR      R0,[R6, #+1904]
   \   00000128   DC0085E5           STR      R0,[R5, #+220]
   1678            O_TO_COLOR=myConf->O_TO_COLOR;
   \   0000012C   A00796E5           LDR      R0,[R6, #+1952]
   \   00000130   E00085E5           STR      R0,[R5, #+224]
   1679            O_X_COLOR=myConf->O_X_COLOR;
   \   00000134   D00796E5           LDR      R0,[R6, #+2000]
   \   00000138   E40085E5           STR      R0,[R5, #+228]
   1680            
   1681            ED_FONT_SIZE=myConf->ED_FONT_SIZE;
   \   0000013C   E00696E5           LDR      R0,[R6, #+1760]
   \   00000140   E80085E5           STR      R0,[R5, #+232]
   1682            ED_H_FONT_SIZE=myConf->ED_H_FONT_SIZE;
   \   00000144   100796E5           LDR      R0,[R6, #+1808]
   \   00000148   EC0085E5           STR      R0,[R5, #+236]
   1683            ED_X_FONT_SIZE=myConf->ED_X_FONT_SIZE;
   \   0000014C   400796E5           LDR      R0,[R6, #+1856]
   \   00000150   F00085E5           STR      R0,[R5, #+240]
   1684            O_ED_FONT_SIZE=myConf->O_ED_FONT_SIZE;
   \   00000154   000896E5           LDR      R0,[R6, #+2048]
   \   00000158   F40085E5           STR      R0,[R5, #+244]
   1685            O_ED_H_FONT_SIZE=myConf->O_ED_H_FONT_SIZE;
   \   0000015C   300896E5           LDR      R0,[R6, #+2096]
   \   00000160   F80085E5           STR      R0,[R5, #+248]
   1686            O_ED_X_FONT_SIZE=myConf->O_ED_X_FONT_SIZE;
   \   00000164   600896E5           LDR      R0,[R6, #+2144]
   \   00000168   FC0085E5           STR      R0,[R5, #+252]
   1687            
   1688            ACK_COLOR=myConf->ACK_COLOR;
   \   0000016C   900896E5           LDR      R0,[R6, #+2192]
   \   00000170   000185E5           STR      R0,[R5, #+256]
   1689            UNACK_COLOR=myConf->UNACK_COLOR;
   \   00000174   C00896E5           LDR      R0,[R6, #+2240]
   \   00000178   040185E5           STR      R0,[R5, #+260]
   1690            
   1691            ENA_AUTO_XTXT=myConf->ENA_AUTO_XTXT;
   \   0000017C   3C0D96E5           LDR      R0,[R6, #+3388]
   \   00000180   080185E5           STR      R0,[R5, #+264]
   1692            NOT_LOG_SAME_XTXT=myConf->NOT_LOG_SAME_XTXT;
   \   00000184   AC0D96E5           LDR      R0,[R6, #+3500]
   \   00000188   0C0185E5           STR      R0,[R5, #+268]
   1693            LOG_XTXT=myConf->LOG_XTXT;
   \   0000018C   CC0C96E5           LDR      R0,[R6, #+3276]
   \   00000190   100185E5           STR      R0,[R5, #+272]
   1694          //  HISTORY_BUFFER_MOD=myConfMod->HISTORY_BUFFER_MOD;  
   1695            if(!HISTORY_BUFFER_MOD)
   \   00000194   74019FE5           LDR      R0,??UpdateConfig_0+0x8  ;; HISTORY_BUFFER_MOD
   \   00000198   000090E5           LDR      R0,[R0, #+0]
   \   0000019C   000050E3           CMP      R0,#+0
   1696               HISTORY_BUFFER=myConf->HISTORY_BUFFER;  
   \   000001A0   1C0E9605           LDREQ    R0,[R6, #+3612]
   \   000001A4   0200000A           BEQ      ??UpdateConfig_2
   1697            else
   1698              HISTORY_BUFFER = ((HISTORY_BUFFER_MOD==1)?(6):(7));//4 or 8 kb
   \   000001A8   010050E3           CMP      R0,#+1
   \   000001AC   0600A003           MOVEQ    R0,#+6
   \   000001B0   0700A013           MOVNE    R0,#+7
   \                     ??UpdateConfig_2:
   \   000001B4   140185E5           STR      R0,[R5, #+276]
   1699            
   1700          //Illumination by BoBa 19.04.2007
   1701          ///////////
   1702            ILL_DISP_RECV=myConf->ILL_DISP_RECV;
   \   000001B8   480996E5           LDR      R0,[R6, #+2376]
   1703            ILL_KEYS_RECV=myConf->ILL_KEYS_RECV;
   1704            ILL_DISP_SEND=myConf->ILL_DISP_SEND;
   1705            ILL_KEYS_SEND=myConf->ILL_KEYS_SEND;
   1706            ILL_SEND_TMR=myConf->ILL_SEND_TMR;
   1707            ILL_SEND_FADE=myConf->ILL_SEND_FADE;
   1708            ILL_RECV_TMR=myConf->ILL_RECV_TMR;
   1709            ILL_RECV_FADE=myConf->ILL_RECV_FADE;
   1710            ILL_OFF_FADE=myConf->ILL_OFF_FADE;
   1711            
   1712          //=============================Проигрывание звука=======================
   1713            
   1714            sprintf(sndStartup,per_s,myConf->sndStartup);
   \   000001BC   051087E0           ADD      R1,R7,R5
   \   000001C0   180185E5           STR      R0,[R5, #+280]
   \   000001C4   780996E5           LDR      R0,[R6, #+2424]
   \   000001C8   1C0185E5           STR      R0,[R5, #+284]
   \   000001CC   080A96E5           LDR      R0,[R6, #+2568]
   \   000001D0   240185E5           STR      R0,[R5, #+292]
   \   000001D4   380A96E5           LDR      R0,[R6, #+2616]
   \   000001D8   280185E5           STR      R0,[R5, #+296]
   \   000001DC   680A96E5           LDR      R0,[R6, #+2664]
   \   000001E0   2C0185E5           STR      R0,[R5, #+300]
   \   000001E4   980A96E5           LDR      R0,[R6, #+2712]
   \   000001E8   300185E5           STR      R0,[R5, #+304]
   \   000001EC   A80996E5           LDR      R0,[R6, #+2472]
   \   000001F0   200185E5           STR      R0,[R5, #+288]
   \   000001F4   D80996E5           LDR      R0,[R6, #+2520]
   \   000001F8   340185E5           STR      R0,[R5, #+308]
   \   000001FC   C80A96E5           LDR      R0,[R6, #+2760]
   \   00000200   380185E5           STR      R0,[R5, #+312]
   \   00000204   FC00A0E3           MOV      R0,#+252
   \   00000208   400D80E3           ORR      R0,R0,#0x1000
   \   0000020C   042080E0           ADD      R2,R0,R4
   \   00000210   580F85E2           ADD      R0,R5,#+352
   \   00000214   160000EF           SWI      +22
   1715            sprintf(sndSrvMsg,per_s,myConf->sndSrvMsg);
   \   00000218   6800A0E3           MOV      R0,#+104
   \   0000021C   440D80E3           ORR      R0,R0,#0x1100
   \   00000220   042080E0           ADD      R2,R0,R4
   \   00000224   051087E0           ADD      R1,R7,R5
   \   00000228   680F85E2           ADD      R0,R5,#+416
   \   0000022C   160000EF           SWI      +22
   1716            sprintf(sndGlobal,per_s,myConf->sndGlobal);
   \   00000230   D400A0E3           MOV      R0,#+212
   \   00000234   440D80E3           ORR      R0,R0,#0x1100
   \   00000238   042080E0           ADD      R2,R0,R4
   \   0000023C   051087E0           ADD      R1,R7,R5
   \   00000240   780F85E2           ADD      R0,R5,#+480
   \   00000244   160000EF           SWI      +22
   1717          //  sprintf(sndGlobal2,per_s,myConfMod->sndGlobal2);
   1718            sprintf(sndMsg,per_s,myConf->sndMsg);
   \   00000248   492D84E2           ADD      R2,R4,#+4672
   \   0000024C   051087E0           ADD      R1,R7,R5
   \   00000250   880F85E2           ADD      R0,R5,#+544
   \   00000254   160000EF           SWI      +22
   1719          //  sprintf(sndMsg2,per_s,myConfMod->sndMsg2);
   1720          //  extended_sounds=myConfMod->extended_sounds;
   1721            sprintf(sndMsgSent,per_s,myConf->sndMsgSent);
   \   00000258   AC00A0E3           MOV      R0,#+172
   \   0000025C   480D80E3           ORR      R0,R0,#0x1200
   \   00000260   042080E0           ADD      R2,R0,R4
   \   00000264   051087E0           ADD      R1,R7,R5
   \   00000268   980F85E2           ADD      R0,R5,#+608
   \   0000026C   160000EF           SWI      +22
   1722            sndVolume=myConf->sndVolume; 
   \   00000270   640F96E5           LDR      R0,[R6, #+3940]
   1723          
   1724          //-----------------------------------------
   1725            
   1726            vibraPower=myConf->vibraPower;
   1727               
   1728            sprintf(TEMPLATES_PATH,per_s,myConf->TEMPLATES_PATH);
   \   00000274   FA2F84E2           ADD      R2,R4,#+1000
   \   00000278   3C0185E5           STR      R0,[R5, #+316]
   \   0000027C   940F96E5           LDR      R0,[R6, #+3988]
   \   00000280   051087E0           ADD      R1,R7,R5
   \   00000284   C40085E5           STR      R0,[R5, #+196]
   \   00000288   B80F85E2           ADD      R0,R5,#+736
   \   0000028C   160000EF           SWI      +22
   1729            sprintf(ICON_PATH,per_s,myConf->ICON_PATH);
   \   00000290   C42F84E2           ADD      R2,R4,#+784
   \   00000294   051087E0           ADD      R1,R7,R5
   \   00000298   C80F85E2           ADD      R0,R5,#+800
   \   0000029C   160000EF           SWI      +22
   1730            sprintf(SMILE_FILE,per_s,myConf->SMILE_FILE);
   \   000002A0   8E2F84E2           ADD      R2,R4,#+568
   \   000002A4   051087E0           ADD      R1,R7,R5
   \   000002A8   A80F85E2           ADD      R0,R5,#+672
   \   000002AC   160000EF           SWI      +22
   1731            sprintf(SMILE_PATH,per_s,myConf->SMILE_PATH);
   \   000002B0   A92F84E2           ADD      R2,R4,#+676
   \   000002B4   051087E0           ADD      R1,R7,R5
   \   000002B8   D80F85E2           ADD      R0,R5,#+864
   \   000002BC   160000EF           SWI      +22
   1732            sprintf(XSTATUSES_PATH,per_s,myConf->XSTATUSES_PATH);
   \   000002C0   DF2F84E2           ADD      R2,R4,#+892
   \   000002C4   051087E0           ADD      R1,R7,R5
   \   000002C8   E80F85E2           ADD      R0,R5,#+928
   \   000002CC   160000EF           SWI      +22
   1733            
   1734            
   1735          //-----------------------------------------
   1736            
   1737            mfree(myConf);
   \   000002D0   0400A0E1           MOV      R0,R4
   \   000002D4   150000EF           SWI      +21
   \   000002D8   0000A0E3           MOV      R0,#+0
   \   000002DC   F080BDE8           POP      {R4-R7,PC}
   1738           // mfree(myConfMod);
   1739          }
   1740          else
   1741          {
   1742            LockSched();
   \                     ??UpdateConfig_1:
   \   000002E0   460100EF           SWI      +326
   1743            ShowMSG(1,(int)"Can't open configs!");
   \   000002E4   0610A0E1           MOV      R1,R6
   \   000002E8   0100A0E3           MOV      R0,#+1
   \   000002EC   480100EF           SWI      +328
   1744            UnlockSched();
   \   000002F0   470100EF           SWI      +327
   1745            CloseCSM(maincsm_id);
   \   000002F4   18009FE5           LDR      R0,??UpdateConfig_0+0xC  ;; maincsm_id
   \   000002F8   000090E5           LDR      R0,[R0, #+0]
   \   000002FC   FC0100EF           SWI      +508
   1746          }
   1747          return 0;
   \   00000300   0000A0E3           MOV      R0,#+0
   \   00000304   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??UpdateConfig_0:
   \   00000308   ........           DC32     `?<Constant "Can\\'t open configs!">`
   \   0000030C   ........           DC32     DEVELOP_IF_MOD
   \   00000310   ........           DC32     HISTORY_BUFFER_MOD
   \   00000314   ........           DC32     maincsm_id
   1748          }

   \                                 In segment DATA_I, align 4, align-sorted
   1749          
   1750          
   1751          
   1752          //===================================================================
   1753          
   1754          /*
   1755            uins.txt
   1756            uin;pass
   1757            123456;qwe123
   1758          */
   1759          
   1760          #define max_uin 10
   1761          ADDUIN addonuin[max_uin];
   \                     addonuin:
   \   00000000                      DS8 160
   \   000000A0                      REQUIRE `?<Initializer for addonuin>`
   \                     UIN:
   \   000000A0                      DS8 4
   \   000000A4                      REQUIRE `?<Initializer for UIN>`
   \                     VIBR_ON_CONNECT:
   \   000000A4                      DS8 4
   \   000000A8                      REQUIRE `?<Initializer for VIBR_ON_CONNECT>`
   \                     VIBR_TYPE:
   \   000000A8                      DS8 4
   \   000000AC                      REQUIRE `?<Initializer for VIBR_TYPE>`
   \                     DEVELOP_IF:
   \   000000AC                      DS8 4
   \   000000B0                      REQUIRE `?<Initializer for DEVELOP_IF>`
   \                     LOG_ALL:
   \   000000B0                      DS8 4
   \   000000B4                      REQUIRE `?<Initializer for LOG_ALL>`
   \                     LOG_STATCH:
   \   000000B4                      DS8 4
   \   000000B8                      REQUIRE `?<Initializer for LOG_STATCH>`
   \                     FIRST_LETTER:
   \   000000B8                      DS8 4
   \   000000BC                      REQUIRE `?<Initializer for FIRST_LETTER>`
   \                     SORT_CLIST:
   \   000000BC                      DS8 4
   \   000000C0                      REQUIRE `?<Initializer for SORT_CLIST>`
   \                     HISTORY_TYPE:
   \   000000C0                      DS8 4
   \   000000C4                      REQUIRE `?<Initializer for HISTORY_TYPE>`
   \                     vibraPower:
   \   000000C4                      DS8 4
   \   000000C8                      REQUIRE `?<Initializer for vibraPower>`
   \                     IDLEICON_X:
   \   000000C8                      DS8 4
   \   000000CC                      REQUIRE `?<Initializer for IDLEICON_X>`
   \                     IDLEICON_Y:
   \   000000CC                      DS8 4
   \   000000D0                      REQUIRE `?<Initializer for IDLEICON_Y>`
   \                     I_COLOR:
   \   000000D0                      DS8 4
   \   000000D4                      REQUIRE `?<Initializer for I_COLOR>`
   \                     TO_COLOR:
   \   000000D4                      DS8 4
   \   000000D8                      REQUIRE `?<Initializer for TO_COLOR>`
   \                     X_COLOR:
   \   000000D8                      DS8 4
   \   000000DC                      REQUIRE `?<Initializer for X_COLOR>`
   \                     O_I_COLOR:
   \   000000DC                      DS8 4
   \   000000E0                      REQUIRE `?<Initializer for O_I_COLOR>`
   \                     O_TO_COLOR:
   \   000000E0                      DS8 4
   \   000000E4                      REQUIRE `?<Initializer for O_TO_COLOR>`
   \                     O_X_COLOR:
   \   000000E4                      DS8 4
   \   000000E8                      REQUIRE `?<Initializer for O_X_COLOR>`
   \                     ED_FONT_SIZE:
   \   000000E8                      DS8 4
   \   000000EC                      REQUIRE `?<Initializer for ED_FONT_SIZE>`
   \                     ED_H_FONT_SIZE:
   \   000000EC                      DS8 4
   \   000000F0                      REQUIRE `?<Initializer for ED_H_FONT_SIZE>`
   \                     ED_X_FONT_SIZE:
   \   000000F0                      DS8 4
   \   000000F4                      REQUIRE `?<Initializer for ED_X_FONT_SIZE>`
   \                     O_ED_FONT_SIZE:
   \   000000F4                      DS8 4
   \   000000F8                      REQUIRE `?<Initializer for O_ED_FONT_SIZE>`
   \                     O_ED_H_FONT_SIZE:
   \   000000F8                      DS8 4
   \   000000FC                      REQUIRE `?<Initializer for O_ED_H_FONT_SIZE>`
   \                     O_ED_X_FONT_SIZE:
   \   000000FC                      DS8 4
   \   00000100                      REQUIRE `?<Initializer for O_ED_X_FONT_SIZE>`
   \                     ACK_COLOR:
   \   00000100                      DS8 4
   \   00000104                      REQUIRE `?<Initializer for ACK_COLOR>`
   \                     UNACK_COLOR:
   \   00000104                      DS8 4
   \   00000108                      REQUIRE `?<Initializer for UNACK_COLOR>`
   \                     ENA_AUTO_XTXT:
   \   00000108                      DS8 4
   \   0000010C                      REQUIRE `?<Initializer for ENA_AUTO_XTXT>`
   \                     NOT_LOG_SAME_XTXT:
   \   0000010C                      DS8 4
   \   00000110                      REQUIRE `?<Initializer for NOT_LOG_SAME_XTXT>`
   \                     LOG_XTXT:
   \   00000110                      DS8 4
   \   00000114                      REQUIRE `?<Initializer for LOG_XTXT>`
   \                     HISTORY_BUFFER:
   \   00000114                      DS8 4
   \   00000118                      REQUIRE `?<Initializer for HISTORY_BUFFER>`
   \                     ILL_DISP_RECV:
   \   00000118                      DS8 4
   \   0000011C                      REQUIRE `?<Initializer for ILL_DISP_RECV>`
   \                     ILL_KEYS_RECV:
   \   0000011C                      DS8 4
   \   00000120                      REQUIRE `?<Initializer for ILL_KEYS_RECV>`
   \                     ILL_RECV_TMR:
   \   00000120                      DS8 4
   \   00000124                      REQUIRE `?<Initializer for ILL_RECV_TMR>`
   \                     ILL_DISP_SEND:
   \   00000124                      DS8 4
   \   00000128                      REQUIRE `?<Initializer for ILL_DISP_SEND>`
   \                     ILL_KEYS_SEND:
   \   00000128                      DS8 4
   \   0000012C                      REQUIRE `?<Initializer for ILL_KEYS_SEND>`
   \                     ILL_SEND_TMR:
   \   0000012C                      DS8 4
   \   00000130                      REQUIRE `?<Initializer for ILL_SEND_TMR>`
   \                     ILL_SEND_FADE:
   \   00000130                      DS8 4
   \   00000134                      REQUIRE `?<Initializer for ILL_SEND_FADE>`
   \                     ILL_RECV_FADE:
   \   00000134                      DS8 4
   \   00000138                      REQUIRE `?<Initializer for ILL_RECV_FADE>`
   \                     ILL_OFF_FADE:
   \   00000138                      DS8 4
   \   0000013C                      REQUIRE `?<Initializer for ILL_OFF_FADE>`
   \                     sndVolume:
   \   0000013C                      DS8 4
   \   00000140                      REQUIRE `?<Initializer for sndVolume>`
   \                     NATICQ_PORT:
   \   00000140                      DS8 4
   \   00000144                      REQUIRE `?<Initializer for NATICQ_PORT>`
   \                     RECONNECT_TIME:
   \   00000144                      DS8 4
   \   00000148                      REQUIRE `?<Initializer for RECONNECT_TIME>`
   1762          
   1763          char *temp_chars; //Собственно файл
   \                     temp_chars:
   \   00000148                      DS8 4
   \   0000014C                      REQUIRE `?<Initializer for temp_chars>`
   1764          char **temp_lines; //Массив указателей на строки
   \                     temp_lines:
   \   0000014C                      DS8 4
   \   00000150                      REQUIRE `?<Initializer for temp_lines>`
   \                     per_s:
   \   00000150                      DS8 3
   \   00000153                      REQUIRE `?<Initializer for per_s>`
   \   00000153                      DS8 1
   \                     PASS:
   \   00000154                      DS8 12
   \   00000160                      REQUIRE `?<Initializer for PASS>`
   \                     sndStartup:
   \   00000160                      DS8 64
   \   000001A0                      REQUIRE `?<Initializer for sndStartup>`
   \                     sndSrvMsg:
   \   000001A0                      DS8 64
   \   000001E0                      REQUIRE `?<Initializer for sndSrvMsg>`
   \                     sndGlobal:
   \   000001E0                      DS8 64
   \   00000220                      REQUIRE `?<Initializer for sndGlobal>`
   \                     sndMsg:
   \   00000220                      DS8 64
   \   00000260                      REQUIRE `?<Initializer for sndMsg>`
   \                     sndMsgSent:
   \   00000260                      DS8 64
   \   000002A0                      REQUIRE `?<Initializer for sndMsgSent>`
   \                     SMILE_FILE:
   \   000002A0                      DS8 64
   \   000002E0                      REQUIRE `?<Initializer for SMILE_FILE>`
   \                     TEMPLATES_PATH:
   \   000002E0                      DS8 64
   \   00000320                      REQUIRE `?<Initializer for TEMPLATES_PATH>`
   \                     ICON_PATH:
   \   00000320                      DS8 64
   \   00000360                      REQUIRE `?<Initializer for ICON_PATH>`
   \                     SMILE_PATH:
   \   00000360                      DS8 64
   \   000003A0                      REQUIRE `?<Initializer for SMILE_PATH>`
   \                     XSTATUSES_PATH:
   \   000003A0                      DS8 64
   \   000003E0                      REQUIRE `?<Initializer for XSTATUSES_PATH>`
   \                     HIST_PATH:
   \   000003E0                      DS8 64
   \   00000420                      REQUIRE `?<Initializer for HIST_PATH>`
   \                     NATICQ_HOST:
   \   00000420                      DS8 128
   \   000004A0                      REQUIRE `?<Initializer for NATICQ_HOST>`
   \                     suc_config_name:
   \   000004A0                      DS8 64
   \   000004E0                      REQUIRE `?<Initializer for suc_config_name>`
   1765          

   \                                 In segment CODE, align 4, keep-with-next
   1766          void FreeUINS(void)
   1767          {
   \                     FreeUINS:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1768            if (temp_lines) mfree(temp_lines);
   \   00000004   ........           LDR      R4,??DataTable2  ;; addonuin
   \   00000008   4C0194E5           LDR      R0,[R4, #+332]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      ??FreeUINS_0
   \   00000014   150000EF           SWI      +21
   1769            if (temp_chars) mfree(temp_chars);
   \                     ??FreeUINS_0:
   \   00000018   480194E5           LDR      R0,[R4, #+328]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0100000A           BEQ      ??FreeUINS_1
   \   00000024   150000EF           SWI      +21
   1770            temp_lines=NULL;
   \   00000028   0000A0E3           MOV      R0,#+0
   \                     ??FreeUINS_1:
   \   0000002C   4C0184E5           STR      R0,[R4, #+332]
   1771            temp_chars=NULL;
   \   00000030   480184E5           STR      R0,[R4, #+328]
   1772          }
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
   1773          

   \                                 In segment CODE, align 4, keep-with-next
   1774          int LoadUIN()
   1775          {
   \                     LoadUIN:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   1776            FSTATS stat;
   1777            char fn[256];
   1778            int f;
   1779            unsigned int ul;
   1780            int i;
   1781            int fsize;
   1782            char *p;
   1783            char *pp;
   1784            int c;
   1785            FreeUINS();
   1786            strcpy(fn,TEMPLATES_PATH);
   \   00000004   ........           LDR      R4,??DataTable2  ;; addonuin
   \   00000008   4BDF4DE2           SUB      SP,SP,#+300
   1787            i=strlen(fn);
   1788            sprintf(fn+i,"\\uins.txt");
   1789            if (GetFileStats(fn,&stat,&ul)==-1) return 0;
   \   0000000C   0050E0E3           MVN      R5,#+0
   \   00000010   ........           BL       FreeUINS
   \   00000014   B81F84E2           ADD      R1,R4,#+736
   \   00000018   04008DE2           ADD      R0,SP,#+4
   \   0000001C   1A0000EF           SWI      +26
   \   00000020   04008DE2           ADD      R0,SP,#+4
   \   00000024   1B0000EF           SWI      +27
   \   00000028   04119FE5           LDR      R1,??LoadUIN_0   ;; `?<Constant "\\\\uins.txt">`
   \   0000002C   0070A0E1           MOV      R7,R0
   \   00000030   04008DE2           ADD      R0,SP,#+4
   \   00000034   000087E0           ADD      R0,R7,R0
   \   00000038   160000EF           SWI      +22
   \   0000003C   0D20A0E1           MOV      R2,SP
   \   00000040   411F8DE2           ADD      R1,SP,#+260
   \   00000044   04008DE2           ADD      R0,SP,#+4
   \   00000048   840000EF           SWI      +132
   \   0000004C   050050E1           CMP      R0,R5
   \   00000050   0200001A           BNE      ??LoadUIN_1
   \                     ??LoadUIN_2:
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   4BDF8DE2           ADD      SP,SP,#+300
   \   0000005C   F087BDE8           POP      {R4-R10,PC}
   1790            if ((fsize=stat.size)<=0) return 0;
   \                     ??LoadUIN_1:
   \   00000060   08719DE5           LDR      R7,[SP, #+264]
   \   00000064   010057E3           CMP      R7,#+1
   \   00000068   F9FFFFBA           BLT      ??LoadUIN_2
   1791            if((f=fopen(fn,A_ReadOnly+A_BIN,P_READ,&ul))==-1) return 0;
   \   0000006C   0D30A0E1           MOV      R3,SP
   \   00000070   8020A0E3           MOV      R2,#+128
   \   00000074   801CA0E3           MOV      R1,#+32768
   \   00000078   04008DE2           ADD      R0,SP,#+4
   \   0000007C   0A0000EF           SWI      +10
   \   00000080   0080A0E1           MOV      R8,R0
   \   00000084   050058E1           CMP      R8,R5
   \   00000088   F1FFFF0A           BEQ      ??LoadUIN_2
   1792            p=temp_chars=malloc(fsize+1);
   \   0000008C   010087E2           ADD      R0,R7,#+1
   \   00000090   140000EF           SWI      +20
   \   00000094   480184E5           STR      R0,[R4, #+328]
   \   00000098   0050A0E1           MOV      R5,R0
   1793            p[fread(f,p,fsize,&ul)]=0;
   \   0000009C   0060A0E3           MOV      R6,#+0
   \   000000A0   0D30A0E1           MOV      R3,SP
   \   000000A4   0720A0E1           MOV      R2,R7
   \   000000A8   0510A0E1           MOV      R1,R5
   \   000000AC   0800A0E1           MOV      R0,R8
   \   000000B0   0B0000EF           SWI      +11
   \   000000B4   0560C0E7           STRB     R6,[R0, +R5]
   1794            fclose(f,&ul);
   \   000000B8   0D10A0E1           MOV      R1,SP
   \   000000BC   0800A0E1           MOV      R0,R8
   \   000000C0   0D0000EF           SWI      +13
   1795            i=0;
   \   000000C4   0070A0E3           MOV      R7,#+0
   1796            pp=p;
   \   000000C8   0580A0E1           MOV      R8,R5
   1797            for(;;)
   1798            {
   1799              c=*p;
   \                     ??LoadUIN_3:
   \   000000CC   0090D5E5           LDRB     R9,[R5, #+0]
   1800              if (c<32)
   \   000000D0   200059E3           CMP      R9,#+32
   \   000000D4   0E0000AA           BGE      ??LoadUIN_4
   1801              {
   1802                if (pp&&(pp!=p))
   \   000000D8   000058E3           CMP      R8,#+0
   \   000000DC   05005811           CMPNE    R8,R5
   \   000000E0   0600000A           BEQ      ??LoadUIN_5
   1803                {
   1804          	temp_lines=realloc(temp_lines,(i+1)*sizeof(char *));
   \   000000E4   4C0194E5           LDR      R0,[R4, #+332]
   \   000000E8   01A087E2           ADD      R10,R7,#+1
   \   000000EC   0A11A0E1           LSL      R1,R10,#+2
   \   000000F0   BA0000EF           SWI      +186
   \   000000F4   4C0184E5           STR      R0,[R4, #+332]
   1805          	temp_lines[i++]=pp;
   \   000000F8   078180E7           STR      R8,[R0, +R7, LSL #+2]
   \   000000FC   0A70A0E1           MOV      R7,R10
   1806                }
   1807                pp=NULL;
   \                     ??LoadUIN_5:
   \   00000100   0080A0E3           MOV      R8,#+0
   1808                if (!c) break;
   \   00000104   000059E3           CMP      R9,#+0
   \   00000108   0600000A           BEQ      ??LoadUIN_6
   1809                *p=0;
   \   0000010C   0060C5E5           STRB     R6,[R5, #+0]
   \   00000110   010000EA           B        ??LoadUIN_7
   1810              }
   1811              else
   1812              {
   1813                if (pp==NULL) pp=p;
   \                     ??LoadUIN_4:
   \   00000114   000058E3           CMP      R8,#+0
   \   00000118   0580A001           MOVEQ    R8,R5
   1814              }
   1815              p++;
   \                     ??LoadUIN_7:
   \   0000011C   015085E2           ADD      R5,R5,#+1
   1816              if(i>max_uin) break;
   \   00000120   0B0057E3           CMP      R7,#+11
   \   00000124   E8FFFFBA           BLT      ??LoadUIN_3
   1817            }
   1818            return i;
   \                     ??LoadUIN_6:
   \   00000128   0700A0E1           MOV      R0,R7
   \   0000012C   4BDF8DE2           ADD      SP,SP,#+300
   \   00000130   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??LoadUIN_0:
   \   00000134   ........           DC32     `?<Constant "\\\\uins.txt">`
   1819          }
   1820          
   1821          
   1822          extern const char percent_s[];
   1823          extern unsigned long  strtoul (const char *nptr,char **endptr,int base);
   1824          

   \                                 In segment CODE, align 4, keep-with-next
   1825          int ParseUINS()
   1826          {
   \                     ParseUINS:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   1827            char *pass;
   1828            char uin[9];
   1829            int i=LoadUIN();
   1830            int j=0;
   \   00000008   0040A0E3           MOV      R4,#+0
   \   0000000C   ........           BL       LoadUIN
   \   00000010   0050B0E1           MOVS     R5,R0
   1831            if(i==0) return 0;
   \   00000014   2F00000A           BEQ      ??ParseUINS_0
   1832            
   1833            addonuin[0].uin=UIN;//В первую ячейку уин из конфига
   \   00000018   C0609FE5           LDR      R6,??ParseUINS_1  ;; addonuin
   1834            snprintf(addonuin[0].pass,9,percent_s,PASS);
   \   0000001C   C0709FE5           LDR      R7,??ParseUINS_1+0x4  ;; percent_s
   \   00000020   A00096E5           LDR      R0,[R6, #+160]
   \   00000024   553F86E2           ADD      R3,R6,#+340
   \   00000028   000086E5           STR      R0,[R6, #+0]
   \   0000002C   0720A0E1           MOV      R2,R7
   \   00000030   0910A0E3           MOV      R1,#+9
   \   00000034   040086E2           ADD      R0,R6,#+4
   \   00000038   1B0100EF           SWI      +283
   \   0000003C   010055E3           CMP      R5,#+1
   \   00000040   220000AA           BGE      ??ParseUINS_2
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   FE81BDE8           POP      {R1-R8,PC}
   1835            
   1836            while(j<i)
   1837            {
   1838             pass=strrchr(temp_lines[j],';')+1; 
   \                     ??ParseUINS_3:
   \   0000004C   4C0196E5           LDR      R0,[R6, #+332]
   \   00000050   3B10A0E3           MOV      R1,#+59
   \   00000054   040190E7           LDR      R0,[R0, +R4, LSL #+2]
   1839             snprintf(addonuin[j+1].pass,9,percent_s,pass);
   \   00000058   048286E0           ADD      R8,R6,R4, LSL #+4
   \   0000005C   170100EF           SWI      +279
   \   00000060   013080E2           ADD      R3,R0,#+1
   \   00000064   0720A0E1           MOV      R2,R7
   \   00000068   0910A0E3           MOV      R1,#+9
   \   0000006C   140088E2           ADD      R0,R8,#+20
   \   00000070   1B0100EF           SWI      +283
   1840            // ShowMSG(2,(int)pass);
   1841             int k;
   1842             for(k=0; k<9 && temp_lines[j][k]!=';';k++)
   \   00000074   0000A0E3           MOV      R0,#+0
   \                     ??ParseUINS_4:
   \   00000078   4C1196E5           LDR      R1,[R6, #+332]
   \   0000007C   041181E0           ADD      R1,R1,R4, LSL #+2
   \   00000080   002091E5           LDR      R2,[R1, #+0]
   \   00000084   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000088   3B0052E3           CMP      R2,#+59
   \   0000008C   0600000A           BEQ      ??ParseUINS_5
   1843                uin[k]=temp_lines[j][k];
   \   00000090   001091E5           LDR      R1,[R1, #+0]
   \   00000094   0D20A0E1           MOV      R2,SP
   \   00000098   0110D0E7           LDRB     R1,[R0, +R1]
   \   0000009C   0210C0E7           STRB     R1,[R0, +R2]
   \   000000A0   010080E2           ADD      R0,R0,#+1
   \   000000A4   090050E3           CMP      R0,#+9
   \   000000A8   F2FFFFBA           BLT      ??ParseUINS_4
   1844             uin[k]=0;
   \                     ??ParseUINS_5:
   \   000000AC   0D10A0E1           MOV      R1,SP
   \   000000B0   0020A0E3           MOV      R2,#+0
   \   000000B4   0120C0E7           STRB     R2,[R0, +R1]
   1845             addonuin[j+1].uin=strtoul(uin,0,10);
   \   000000B8   0A20A0E3           MOV      R2,#+10
   \   000000BC   0010A0E3           MOV      R1,#+0
   \   000000C0   0D00A0E1           MOV      R0,SP
   \   000000C4   ........           _BLF     strtoul,??strtoul??rA
   \   000000C8   100088E5           STR      R0,[R8, #+16]
   1846          //   ShowMSG(2,(int)uin);   
   1847             j++;
   \   000000CC   014084E2           ADD      R4,R4,#+1
   1848            }
   \                     ??ParseUINS_2:
   \   000000D0   050054E1           CMP      R4,R5
   \   000000D4   DCFFFFBA           BLT      ??ParseUINS_3
   1849          return j;
   \                     ??ParseUINS_0:
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   FE81BDE8           POP      {R1-R8,PC}       ;; return
   \                     ??ParseUINS_1:
   \   000000E0   ........           DC32     addonuin
   \   000000E4   ........           DC32     percent_s
   1850          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     addonuin

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for addonuin>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for UIN>`:
   \   000000A0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for VIBR_ON_CONNECT>`:
   \   000000A4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for VIBR_TYPE>`:
   \   000000A8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for DEVELOP_IF>`:
   \   000000AC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LOG_ALL>`:
   \   000000B0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LOG_STATCH>`:
   \   000000B4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for FIRST_LETTER>`:
   \   000000B8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for SORT_CLIST>`:
   \   000000BC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HISTORY_TYPE>`:
   \   000000C0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for vibraPower>`:
   \   000000C4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IDLEICON_X>`:
   \   000000C8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for IDLEICON_Y>`:
   \   000000CC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for I_COLOR>`:
   \   000000D0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for TO_COLOR>`:
   \   000000D4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for X_COLOR>`:
   \   000000D8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_I_COLOR>`:
   \   000000DC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_TO_COLOR>`:
   \   000000E0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_X_COLOR>`:
   \   000000E4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ED_FONT_SIZE>`:
   \   000000E8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ED_H_FONT_SIZE>`:
   \   000000EC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ED_X_FONT_SIZE>`:
   \   000000F0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_ED_FONT_SIZE>`:
   \   000000F4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_ED_H_FONT_SIZE>`:
   \   000000F8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for O_ED_X_FONT_SIZE>`:
   \   000000FC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ACK_COLOR>`:
   \   00000100   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for UNACK_COLOR>`:
   \   00000104   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ENA_AUTO_XTXT>`:
   \   00000108   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for NOT_LOG_SAME_XTXT>`:
   \   0000010C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LOG_XTXT>`:
   \   00000110   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HISTORY_BUFFER>`:
   \   00000114   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_DISP_RECV>`:
   \   00000118   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_KEYS_RECV>`:
   \   0000011C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_RECV_TMR>`:
   \   00000120   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_DISP_SEND>`:
   \   00000124   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_KEYS_SEND>`:
   \   00000128   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_SEND_TMR>`:
   \   0000012C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_SEND_FADE>`:
   \   00000130   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_RECV_FADE>`:
   \   00000134   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ILL_OFF_FADE>`:
   \   00000138   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sndVolume>`:
   \   0000013C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for NATICQ_PORT>`:
   \   00000140   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for RECONNECT_TIME>`:
   \   00000144   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for temp_chars>`:
   \   00000148   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for temp_lines>`:
   \   0000014C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for per_s>`:
   \   00000150   257300             DC8 "%s"
   \   00000153   00                 DC8 0
   \                     `?<Initializer for PASS>`:
   \   00000154   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for sndStartup>`:
   \   00000160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for sndSrvMsg>`:
   \   000001A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for sndGlobal>`:
   \   000001E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000200   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000210   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for sndMsg>`:
   \   00000220   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000230   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000240   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000250   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for sndMsgSent>`:
   \   00000260   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000270   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000280   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000290   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for SMILE_FILE>`:
   \   000002A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for TEMPLATES_PATH>`:
   \   000002E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000300   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000310   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for ICON_PATH>`:
   \   00000320   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000330   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000340   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000350   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for SMILE_PATH>`:
   \   00000360   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000370   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000380   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000390   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for XSTATUSES_PATH>`:
   \   000003A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for HIST_PATH>`:
   \   000003E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000400   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000410   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for NATICQ_HOST>`:
   \   00000420   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000430   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000440   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000450   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000460   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000470   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000480   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000490   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for suc_config_name>`:
   \   000004A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t open configs!">`:
   \   00000000   43616E277420       DC8 "Can't open configs!"
   \              6F70656E2063
   \              6F6E66696773
   \              2100        
   \   00000014   4E4154494351       DC8 "NATICQ_2747093"
   \              5F3237343730
   \              393300      
   \   00000023   00                 DC8 0
   \   00000024   343A5C7A6269       DC8 "4:\\zbin\\etc\\NATICQ_2747093.bcfg"
   \              6E5C6574635C
   \              4E4154494351
   \              5F3237343730
   \              39332E626366
   \              6700        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\\\uins.txt">`:
   \   00000000   5C75696E732E       DC8 "\\uins.txt"
   \              74787400    
   \   0000000A   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function     CSTACK
     --------     ------
     FreeUINS         8
     LoadUIN        332
     ParseUINS       36
     UpdateConfig    20


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     UpdateConfig                    792
     addonuin                       1248
     FreeUINS                         56
     LoadUIN                         312
     ParseUINS                       232
     ??DataTable2                      4
     ?<Initializer for addonuin>    1248
     ?<Constant "Can\'t open configs!">
                                      68
     ?<Constant "\\uins.txt">         12
      Others                          64

 
 1 448 bytes in segment CODE
    80 bytes in segment DATA_C
 1 248 bytes in segment DATA_I
 1 248 bytes in segment DATA_ID
    12 bytes in segment INITTAB
 
 1 396 bytes of CODE  memory (+ 64 bytes shared)
 1 328 bytes of CONST memory
 1 248 bytes of DATA  memory

Errors: none
Warnings: none
